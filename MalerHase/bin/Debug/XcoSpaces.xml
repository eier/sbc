<?xml version="1.0"?>
<doc>
  <assembly>
    <name>XcoSpaces</name>
  </assembly>
  <members>
    <member name="T:XcoSpaces.XcoHelper">
      <summary>
            Class that contians helper methods for the XcoSpace.
            </summary>
    </member>
    <member name="F:XcoSpaces.XcoHelper.XcoScheme">
      <summary>
            Scheme name of space URIs.
            </summary>
    </member>
    <member name="F:XcoSpaces.XcoHelper.LocalServerAddress">
      <summary>
            Address for local spaces.
            </summary>
    </member>
    <member name="M:XcoSpaces.XcoHelper.CreateServerAddressFromPort(System.Int32)">
      <summary>
            Creates an address for a local space running on the given port.
            </summary>
      <param name="port">The port where the space is running.</param>
      <returns>The address of the space.</returns>
    </member>
    <member name="M:XcoSpaces.XcoHelper.NormalizeServerAddress(System.Uri)">
      <summary>
            Converts the given address to the standard XcoSpace address format (e.g. correct scheme).
            </summary>
      <param name="serverAddress">The address to be convert.</param>
      <returns>The converted address.</returns>
    </member>
    <member name="M:XcoSpaces.XcoHelper.UriToAuthority(System.Uri)">
      <summary>
            Gets the authority from an uri.
            </summary>
      <param name="serverUri">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:XcoSpaces.XcoHelper.AuthorityToUri(System.String)">
      <summary>
            Builds an uri from an authority.
            </summary>
      <param name="uriAuthority">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:XcoSpaces.XcoHelper.FormatContainerName(System.String,System.Type)">
      <summary>
            Builds a qualified container name from a given container name and type.
            </summary>
      <param name="name">The name of the container.</param>
      <param name="containerType">The type of the container.</param>
      <returns>The qualified container name.</returns>
    </member>
    <member name="T:XcoSpaces.XcoSpace">
      <summary>
            Main class of XcoSpaces, instantiates the space.
            </summary>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Start">
      <summary>
            Starts a new global XcoSpace without remote communication, if there is no global space
            already running. The space can be reached with the XcoSpace.Current singleton
            property.
            </summary>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Start(System.Int32,XcoSpaces.Services.IXcoService[])">
      <summary>
            Starts a new global XcoSpace with the given port and services, if there is no global space
            already running. The space can be reached with the XcoSpace.Current singleton
            property.
            </summary>
      <param name="port">The port where the remote communication service should be running.</param>
      <param name="services">The services that should be added to the space.</param>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Start(XcoSpaces.XcoSpace)">
      <summary>
            Sets the global XcoSpace to the given instance, if there is no global space already running.
            The space can be reached with the XcoSpace.Current singleton property.
            </summary>
      <param name="current">The XcoSpace instance to be used.</param>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Stop">
      <summary>
            Stops the current global XcoSpace that is stored under the XcoSpace.Current singleton property.
            </summary>
    </member>
    <member name="M:XcoSpaces.XcoSpace.#ctor">
      <summary>
            Creates a new XcoSpace without remote communication.
            </summary>
    </member>
    <member name="M:XcoSpaces.XcoSpace.#ctor(System.Int32)">
      <summary>
            Creates a new XcoSpace instance running on the given port.
            </summary>
      <param name="port">The port where the space should be running.</param>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Close">
      <summary>
            Closes the XcoSpace.
            </summary>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Add(XcoSpaces.Collections.XcoCollectionBase)">
      <summary>
            Adds a new Container to the local space.
            </summary>
      <param name="container">The container to be added.</param>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Add(XcoSpaces.Collections.XcoCollectionBase,System.String)">
      <summary>
            Adds a new Container to the local space.
            </summary>
      <param name="container">The container to be added.</param>
      <param name="name">The name under which the container should be published.</param>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Add(XcoSpaces.Collections.XcoCollectionBase,System.Uri)">
      <summary>
            Adds a new container to the space witht the given address.
            </summary>
      <param name="container">The container to be added.</param>
      <param name="serverAddress">The address of the space where the container should be added.</param>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Add(XcoSpaces.Collections.XcoCollectionBase,System.String,System.Uri)">
      <summary>
            Adds a new container to the space witht the given address.
            </summary>
      <param name="container">The container to be added.</param>
      <param name="name">The name under which the container should be published.</param>
      <param name="serverAddress">The address of the space where the container should be added.</param>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Remove(XcoSpaces.Collections.XcoCollectionBase)">
      <summary>
            Removes a container from its space.
            </summary>
      <param name="container">The container to be removed.</param>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Publish(XcoSpaces.Collections.XcoCollectionBase,System.String)">
      <summary>
            Publishes a container under the given name.
            </summary>
      <param name="container">The container to be published.</param>
      <param name="name">The name under which the container should be published.</param>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Unpublish(XcoSpaces.Collections.XcoCollectionBase)">
      <summary>
            Unpublishes a container, meaning the name under which the container is currently reachable
            is removed from the space.
            </summary>
      <param name="container">The container that should be unpublished.</param>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Contains``1(System.String)">
      <summary>
            Checks if a container with a certain type and name exists.
            </summary>
      <typeparam name="T">The type of the container.</typeparam>
      <param name="name">The name of the container.</param>
      <returns>True if the container exists.</returns>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Contains(System.String)">
      <summary>
            Checks if a container with a certain qualified name (string consisting of container type and container name) exists.
            </summary>
      <param name="qualifiedName">The qualified name of the container consisting of: container name + "-" + FullName of container type</param>
      <returns>True if the container exists.</returns>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Get``1(System.String)">
      <summary>
            Gets a container from the local space.
            </summary>
      <typeparam name="T">The type of the container.</typeparam>
      <param name="name">The name of the container.</param>
      <returns>The container, or null if the container was not found.</returns>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Get``1(System.String,System.Uri)">
      <summary>
            Gets a container from the space with the given address
            </summary>
      <typeparam name="T">The type of the container.</typeparam>
      <param name="name">The name of the container.</param>
      <param name="serverAddress">The address of the space where the container is hosted.</param>
      <returns>The container, or null if the container was not found.</returns>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Find``1(System.String)">
      <summary>
            Tries to discover a container within all known spaces. A discovery service must have
            been added to the space for this to work, otherwise an exception will be thrown.
            </summary>
      <typeparam name="T">The type of the container to be found.</typeparam>
      <param name="name">The name the container to be found.</param>
      <returns>The found container, or null if no container has been found.</returns>
    </member>
    <member name="M:XcoSpaces.XcoSpace.BeginTransaction">
      <summary>
            Starts a new transaction and returns it. If a transaction is already running, the currently 
            running transaction is returned.
            </summary>
      <returns>The active transaction.</returns>
    </member>
    <member name="M:XcoSpaces.XcoSpace.AddService(XcoSpaces.Services.IXcoService)">
      <summary>
            Adds a new service to the space.
            </summary>
      <param name="service">The service to be added.</param>
    </member>
    <member name="M:XcoSpaces.XcoSpace.Dispose">
      <summary>
            Closes the space.
            </summary>
    </member>
    <member name="P:XcoSpaces.XcoSpace.Current">
      <summary>
            The "global" space, meaning an XcoSpace singleton instance.
            </summary>
    </member>
    <member name="P:XcoSpaces.XcoSpace.IsOpen">
      <summary>
            Checks if the space is open (true if Close() has not been called yet).
            </summary>
    </member>
    <member name="P:XcoSpaces.XcoSpace.IsServing">
      <summary>
            Checks if the space is open for remote communication.
            </summary>
    </member>
    <member name="P:XcoSpaces.XcoSpace.Address">
      <summary>
            The address of the space.
            </summary>
    </member>
    <member name="P:XcoSpaces.XcoSpace.CurrentTransaction">
      <summary>
            Returns the currently running transaction, or null if no transaction is currently running.
            </summary>
    </member>
    <member name="T:XcoSpaces.Services.Discovery.IXcoDiscoveryService">
      <summary>
            Interface for space discovery services.
            </summary>
    </member>
    <member name="M:XcoSpaces.Services.Discovery.IXcoDiscoveryService.Start(XcoSpaces.XcoSpace)">
      <summary>
            Starts the discovery service.
            </summary>
      <param name="localSpace">The owning XcoSpace instance.</param>
    </member>
    <member name="M:XcoSpaces.Services.Discovery.IXcoDiscoveryService.Stop">
      <summary>
            Stops the discovery service.
            </summary>
    </member>
    <member name="M:XcoSpaces.Services.Discovery.IXcoDiscoveryService.LocateContainer(System.String)">
      <summary>
            Looks up a container with a certain name.
            </summary>
      <param name="name">The qualified name of the container to be found.</param>
      <returns>The address of the space where the container is hosted, or null if the container was not fond.</returns>
    </member>
    <member name="T:XcoSpaces.XcoTransaction">
      <summary>
            Class representing a transaction in an XcoSpace.
            </summary>
    </member>
    <member name="M:XcoSpaces.XcoTransaction.Commit">
      <summary>
            Commits the transaction.
            </summary>
    </member>
    <member name="M:XcoSpaces.XcoTransaction.Rollback">
      <summary>
            Rolls back the transaction.
            </summary>
    </member>
    <member name="M:XcoSpaces.XcoTransaction.Dispose">
      <summary>
            Disposes the transaction by rolling it back.
            </summary>
    </member>
    <member name="P:XcoSpaces.XcoTransaction.EnlistedServers">
      <summary>
            The addresses of all spaces that are currently affected by this transaction.
            </summary>
    </member>
    <member name="T:XcoSpaces.Collections.XcoDeserializationContext">
      <summary>
            Context needed for deserialization of containers.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDeserializationContext.#ctor(XcoSpaces.XcoSpace)">
      <summary>
            Creates a new XcoDeserializationContext.
            </summary>
      <param name="space">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDeserializationContext.Dispose">
      <summary>
            Disposes the XcoDeserializationContext for the current thread.
            </summary>
    </member>
    <member name="P:XcoSpaces.Collections.XcoDeserializationContext.Current">
      <summary>
            The current XcoDeserializationContext as a ThreadStatic variable.
            </summary>
    </member>
    <member name="P:XcoSpaces.Collections.XcoDeserializationContext.Space">
      <summary>
            The local space where the deserialization takes place.
            </summary>
    </member>
    <member name="T:XcoSpaces.Collections.XcoCollectionBase">
      <summary>
            Base class for all XcoCollection classes, representing containers in the space.
            </summary>
    </member>
    <member name="F:XcoSpaces.Collections.XcoCollectionBase.owningSpace">
      <summary>
            The XcoSpace instance that owns this collection.
            </summary>
    </member>
    <member name="F:XcoSpaces.Collections.XcoCollectionBase.cref">
      <summary>
            The ContainerReference of the container that is used to store the collection's data.
            </summary>
    </member>
    <member name="F:XcoSpaces.Collections.XcoCollectionBase.name">
      <summary>
            The name of the container, if it has been published.
            </summary>
    </member>
    <member name="F:XcoSpaces.Collections.XcoCollectionBase.keepEntriesSerialized">
      <summary>
            Defines if entries in the container should be kept in a serialized state.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCollectionBase.#ctor">
      <summary>
            Creates a new XcoCollectionBase.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCollectionBase.#ctor(System.Type)">
      <summary>
            Creates a new XcoCollectionBase.
            </summary>
      <param name="entryType">The type of entries to be stored in this collection.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCollectionBase.TakeSingle``1(System.Int32,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Takes a single entry from the underlying container.
            </summary>
      <typeparam name="T">The type of entry to be taken.</typeparam>
      <param name="timeout">The maximum timeout of the take operation in milliseconds.</param>
      <param name="selectors">The selectors to be used for reading.</param>
      <returns>The read entry.</returns>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCollectionBase.ReadSingle``1(System.Int32,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Reads a single entry from the underlying container.
            </summary>
      <typeparam name="T">The type of entry to be read.</typeparam>
      <param name="timeout">The maximum timeout of the read operation in milliseconds.</param>
      <param name="selectors">The selectors to be used for reading.</param>
      <returns>The read entry.</returns>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCollectionBase.WriteSingle(System.Object,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Writes a single entry into the underlying container (with no timeout).
            </summary>
      <param name="entry">The entry to be written.</param>
      <param name="selectors">The selectors to be used for writing.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCollectionBase.WriteSingle(System.Object,System.Int32,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Writes a single entry into the underlying container.
            </summary>
      <param name="entry">The entry to be written.</param>
      <param name="timeout">The maximum timeout of the write operation in milliseconds.</param>
      <param name="selectors">The selectors to be used for writing.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCollectionBase.ShiftSingle(System.Object,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Shifts a single entry into the underlying container (with no timeout), meaning the entry can overwrite
            existing entries in the container.
            </summary>
      <param name="entry">The entry to be written.</param>
      <param name="selectors">The selectors to be used for writing.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCollectionBase.ShiftSingle(System.Object,System.Int32,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Shifts a single entry into the underlying container, meaning the entry can overwrite
            existing entries in the container.
            </summary>
      <param name="entry">The entry to be written.</param>
      <param name="timeout">The maximum timeout of the write operation in milliseconds.</param>
      <param name="selectors">The selectors to be used for writing.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCollectionBase.Create(XcoSpaces.XcoSpace,System.Uri)">
      <summary>
            Creates the container the is used to store the collection's data.
            </summary>
      <param name="owningSpace">The instance of the owning XcoSpace.</param>
      <param name="owningServerAddress">The address of the container to be created.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCollectionBase.Get(XcoSpaces.XcoSpace,System.Uri,System.String,System.Type)">
      <summary>
            Gets an existing contianer to be used to store the collection's data.
            </summary>
      <param name="owningSpace">The instance of the owning XcoSpace.</param>
      <param name="owningServerAddress">The address of the container.</param>
      <param name="name">The name of the container.</param>
      <param name="containerType">The type of the container.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCollectionBase.AddRef">
      <summary>
            Adds the collection's ContainerReference to the reference counter of owning XcoSpace.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCollectionBase.Release">
      <summary>
            Removes the collection's ContainerReference from the reference counter of owning XcoSpace.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCollectionBase.Dispose">
      <summary>
            Disposes the collection.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCollectionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoCollectionBase. This constructor is used for deserialization. It uses
            an existing XcoDeserializationContext to get a reference to the local space and sets
            this space as the owning space (otherwise the collection would not be able to store
            its data in its underlying container.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="P:XcoSpaces.Collections.XcoCollectionBase.Core">
      <summary>
            The XcoKernel instance of the owning space.
            </summary>
    </member>
    <member name="P:XcoSpaces.Collections.XcoCollectionBase.TxRef">
      <summary>
            Returns the currently active transaction, or null if there is currently no active transaction.
            </summary>
    </member>
    <member name="P:XcoSpaces.Collections.XcoCollectionBase.Cref">
      <summary>
            The ContainerReference of the container that is used to store the collection's data.
            </summary>
    </member>
    <member name="P:XcoSpaces.Collections.XcoCollectionBase.Space">
      <summary>
            The XcoSpace instance that owns this collection.
            </summary>
    </member>
    <member name="P:XcoSpaces.Collections.XcoCollectionBase.ServerAddress">
      <summary>
            The address of the space where the collection's container is hosted.
            </summary>
    </member>
    <member name="P:XcoSpaces.Collections.XcoCollectionBase.Name">
      <summary>
            The name of the container.
            </summary>
    </member>
    <member name="P:XcoSpaces.Collections.XcoCollectionBase.Count">
      <summary>
            The number of entries that are contained in the collection.
            </summary>
    </member>
    <member name="P:XcoSpaces.Collections.XcoCollectionBase.Length">
      <summary>
            The maximum number of entries that can be stored in this collection.
            </summary>
    </member>
    <member name="P:XcoSpaces.Collections.XcoCollectionBase.KeepEntriesSerialized">
      <summary>
            True if entries in this collection's container should be kept in a serialized state.
            </summary>
    </member>
    <member name="T:XcoSpaces.Collections.XcoCompositeCollection">
      <summary>
            Base class for special types of XcoCollections.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCompositeCollection.#ctor">
      <summary>
            Creates a new XcoCompositeCollection.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCompositeCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoCompositeCollection.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoCompositeCollection.Create(XcoSpaces.XcoSpace,System.Uri)">
      <summary>
            Creates a placeholder container that can be used by the collection to store its data.
            </summary>
      <param name="owningSpace">The owning XcoSpace instance.</param>
      <param name="owningServerAddress">The address of the space where the container is hosted.</param>
    </member>
    <member name="T:XcoSpaces.Collections.XcoList`1">
      <summary>
            Class representing a list that is hosted by an XcoSpace.
            </summary>
      <typeparam name="T">The type of entries that are stored in the list.</typeparam>
    </member>
    <member name="T:XcoSpaces.Collections.XcoList`1.OnEntryModifyDelegate">
      <summary>
            Defines an XcoList event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="entry">The entry that has been added/removed.</param>
      <param name="index">The index where the entry has been added/removed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.#ctor">
      <summary>
            Creates a new XcoList.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.#ctor(System.Boolean)">
      <summary>
            Creates a new XcoList.
            </summary>
      <param name="keepEntriesSerialized">True if entries should be stored in the contianer in a serialized state.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.#ctor(System.Int32)">
      <summary>
            Creates a new XcoList.
            </summary>
      <param name="maxSize">The maximum number of entries that can be stored in the list.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.#ctor(System.Int32,System.Boolean)">
      <summary>
            Creates a new XcoList.
            </summary>
      <param name="maxSize">The maximum number of entries that can be stored in the list.</param>
      <param name="keepEntriesSerialized">True if entries should be stored in the contianer in a serialized state.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoList.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.Create(XcoSpaces.XcoSpace,System.Uri)">
      <summary>
            Creates the container in the space that is used by this XcoList instance.
            </summary>
      <param name="owningSpace">
      </param>
      <param name="owningServerAddress">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.Add(`0)">
      <summary>
            Adds a new entry to the list.
            </summary>
      <param name="entry">The entry to be added.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.Insert(System.Int32,`0)">
      <summary>
            Inserts an entry at a certain index.
            </summary>
      <param name="index">The index where the entry should be inserted.</param>
      <param name="entry">The entry to be inserted.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.RemoveAt(System.Int32)">
      <summary>
            Removes an entry from a certain index.
            </summary>
      <param name="index">The index where the entry should be removed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.AddNotificationForEntryAdd(XcoSpaces.Collections.XcoList{`0}.OnEntryModifyDelegate)">
      <summary>
            Registers a method to be called whenever an entry is added.
            </summary>
      <param name="notificationHandler">The method that should be called when an entry is added.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.AddNotificationForEntryRemove(XcoSpaces.Collections.XcoList{`0}.OnEntryModifyDelegate)">
      <summary>
            Registers a method to be called whenever an entry is removed.
            </summary>
      <param name="notificationHandler">The method that should be called when an entry is removed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.RemoveNotificationForEntryAdd(XcoSpaces.Collections.XcoList{`0}.OnEntryModifyDelegate)">
      <summary>
            Removes an existing notification for added entries.
            </summary>
      <param name="notificationHandler">The method to be removed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.RemoveNotificationForEntryRemove(XcoSpaces.Collections.XcoList{`0}.OnEntryModifyDelegate)">
      <summary>
            Removes an existing notification for removed entries.
            </summary>
      <param name="notificationHandler">The method to be removed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.ClearNotificationForEntryRemove">
      <summary>
            Clears all existing notifications for removed entries.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.ClearNotificationForEntryAdd">
      <summary>
            Clears all existing notifications for added entries.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoList`1.Dispose">
      <summary>
            Disposes the XcoList.
            </summary>
    </member>
    <member name="P:XcoSpaces.Collections.XcoList`1.Item(System.Int32)">
      <summary>
            Reads an entry from a certain index. Or overwrites an entry at a certain index.
            An exception is thrown if the index is not valid.
            </summary>
      <param name="index">The index of the entry.</param>
      <returns>The read entry.</returns>
    </member>
    <member name="P:XcoSpaces.Collections.XcoList`1.Item(System.Int32,System.Boolean)">
      <summary>
            Reads an entry from a certain index.
            </summary>
      <param name="index">The index where the entry should be read.</param>
      <param name="block">If true, the operation will block until an entry with the given index is available in the list (and not throw an exception if the index is bigger than the current number of entries in the list).</param>
      <returns>The read entry.</returns>
    </member>
    <member name="P:XcoSpaces.Collections.XcoList`1.Item(System.Int32,System.Int32)">
      <summary>
            Reads an entry from a certain index.
            </summary>
      <param name="index">The index where the entry should be read.</param>
      <param name="timeout">The time in milliseconds that should be waited if there is no entry available at the given index.</param>
      <returns>The read entry.</returns>
    </member>
    <member name="T:XcoSpaces.Collections.XcoQueue`1">
      <summary>
            Class representing a queue that is hosted by an XcoSpace.
            </summary>
      <typeparam name="T">The type of entries that are stored in the queue.</typeparam>
    </member>
    <member name="T:XcoSpaces.Collections.XcoQueue`1.OnEntryEnqueuedDelegate">
      <summary>
            Definition of an XcoQueue event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="entry">The entry that has been added/removed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.#ctor">
      <summary>
            Creates a new XcoQueue.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.#ctor(System.Boolean)">
      <summary>
            Creates a new XcoQueue.
            </summary>
      <param name="keepEntriesSerialized">True if entries should be stored in the contianer in a serialized state.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.#ctor(System.Int32)">
      <summary>
            Creates a new XcoQueue.
            </summary>
      <param name="maxSize">The maximum number of entries that can be stored in the queue.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.#ctor(System.Int32,System.Boolean)">
      <summary>
            Creates a new XcoQueue.
            </summary>
      <param name="maxSize">The maximum number of entries that can be stored in the queue.</param>
      <param name="keepEntriesSerialized">True if entries should be stored in the contianer in a serialized state.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoQueue.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.Create(XcoSpaces.XcoSpace,System.Uri)">
      <summary>
            Creates the container in the space that is used by this XcoQueue instance.
            </summary>
      <param name="owningSpace">
      </param>
      <param name="owningServerAddress">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.Enqueue(`0)">
      <summary>
            Adds the given entry to the queue. An exception is thrown if the entry cannot be added because the queue is full.
            </summary>
      <param name="entry">The entry to be added.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.Enqueue(`0,System.Boolean)">
      <summary>
            Adds the given entry to the queue. An exception is thrown if the entry cannot be added because the queue is full.
            </summary>
      <param name="entry">The entry to be added.</param>
      <param name="block">If true, the operation will block until the entry can be enqueued (and not throw an exception if the queue is full).</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.Enqueue(`0,System.Int32)">
      <summary>
            Adds the given entry to the queue. An exception is thrown if the entry cannot be added because the queue is full.
            </summary>
      <param name="entry">The entry to be added.</param>
      <param name="timeout">The time in milliseconds that the operation will wait when the queue is currently full.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.Dequeue">
      <summary>
            Dequeues the next entry from the queue. An error is thrown if the queue is currently emtpy.
            </summary>
      <returns>The dequeued entry.</returns>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.Dequeue(System.Boolean)">
      <summary>
            Dequeues the next entry from the queue. An error is thrown if the queue is currently emtpy.
            </summary>
      <param name="block">If true, the operation will block until an entry can be dequeued (and not throw an exception if the queue is empty).</param>
      <returns>The dequeued entry.</returns>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.Dequeue(System.Int32)">
      <summary>
            Dequeues the next entry from the queue. An error is thrown if the queue is currently emtpy.
            </summary>
      <param name="timeout">The time in milliseconds that the operation will wait when the queue is currently empty.</param>
      <returns>The dequeued entry.</returns>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.AddNotificationForEntryEnqueued(XcoSpaces.Collections.XcoQueue{`0}.OnEntryEnqueuedDelegate)">
      <summary>
            Registers a method to be called whenever an entry is enqueued.
            </summary>
      <param name="notificationHandler">The method that should be called when an entry is added.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.RemoveNotificationForEntryEnqueued(XcoSpaces.Collections.XcoQueue{`0}.OnEntryEnqueuedDelegate)">
      <summary>
            Removes an existing notification for enqueued entries.
            </summary>
      <param name="notificationHandler">The method to be removed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.ClearNotificationForEntryEnqueued">
      <summary>
            Clears all existing notifications for enqueud entries.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoQueue`1.Dispose">
      <summary>
            Disposes the XcoQueue.
            </summary>
    </member>
    <member name="T:XcoSpaces.Collections.XcoArray`1">
      <summary>
            Class representing an array that is hosted by an XcoSpace.
            </summary>
      <typeparam name="T">The type of entries that are stored in the array.</typeparam>
    </member>
    <member name="T:XcoSpaces.Collections.XcoArray`1.OnEntryChangedDelegate">
      <summary>
            Definiation of an XcoQueue event.
            </summary>
      <param name="sender">
      </param>
      <param name="index">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoArray`1.#ctor">
      <summary>
            Creates a new XcoArray with length 0.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoArray`1.#ctor(System.Int32)">
      <summary>
            Creates a new XcoArray.
            </summary>
      <param name="length">The length of the array.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoArray`1.#ctor(System.Int32,System.Boolean)">
      <summary>
            Creates a new XcoArray.
            </summary>
      <param name="length">The length of the array.</param>
      <param name="keepEntriesSerialized">True if entries should be stored in the contianer in a serialized state.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoArray`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoArray.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoArray`1.Create(XcoSpaces.XcoSpace,System.Uri)">
      <summary>
            Creates the container in the space that is used by this XcoArray instance.
            </summary>
      <param name="owningSpace">
      </param>
      <param name="owningServerAddress">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoArray`1.AddNotificationForEntryChanged(XcoSpaces.Collections.XcoArray{`0}.OnEntryChangedDelegate)">
      <summary>
            Registers a method to be called whenever an entry is changed.
            </summary>
      <param name="notificationHandler">The method that should be called when an entry is changed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoArray`1.RemoveNotificationForEntryChanged(XcoSpaces.Collections.XcoArray{`0}.OnEntryChangedDelegate)">
      <summary>
            Removes an existing notification for changed entries.
            </summary>
      <param name="notificationHandler">The method to be removed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoArray`1.ClearNotificationForEntryChanged">
      <summary>
            Clears all existing notifications for changed entries.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoArray`1.Dispose">
      <summary>
            Disposes the XcoArray.
            </summary>
    </member>
    <member name="P:XcoSpaces.Collections.XcoArray`1.Item(System.Int32)">
      <summary>
            Reads an entry from a certain index. Or overwrites an entry at a certain index.
            An exception is thrown if the index is not valid.
            </summary>
      <param name="index">The index of the entry.</param>
      <returns>The read entry.</returns>
    </member>
    <member name="P:XcoSpaces.Collections.XcoArray`1.Item(System.Int32,System.Boolean)">
      <summary>
            Reads an entry from a certain index.
            </summary>
      <param name="index">The index where the entry should be read.</param>
      <param name="block">If true, the operation will block until an entry with the given index is available (and not throw an exception if the entry is e.g. currently blocked by another transaction).</param>
      <returns>The read entry.</returns>
    </member>
    <member name="P:XcoSpaces.Collections.XcoArray`1.Item(System.Int32,System.Int32)">
      <summary>
            Reads an entry from a certain index.
            </summary>
      <param name="index">The index where the entry should be read.</param>
      <param name="timeout">The time in milliseconds that should be waited if the entry at the given index is currently not available (e.g. currently locked by another transaction).</param>
      <returns>The read entry.</returns>
    </member>
    <member name="T:XcoSpaces.Collections.Composite.XcoConversationalQueue`1">
      <summary>
            Class representing a queue that is hosted by an XcoSpace. Minimized in functionality to only
            support essential queue operations.
            </summary>
      <typeparam name="T">The type of entries that are stored in the queue.</typeparam>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoConversationalQueue`1.#ctor">
      <summary>
            Creates a new XcoConversationalQueue.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoConversationalQueue`1.#ctor(System.Boolean)">
      <summary>
            Creates a new XcoConversationalQueue.
            </summary>
      <param name="keepEntriesSerialized">True if entries should be stored in the contianer in a serialized state.</param>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoConversationalQueue`1.#ctor(System.Int32)">
      <summary>
            Creates a new XcoConversationalQueue.
            </summary>
      <param name="maxSize">The maximum number of entries that can be stored in the queue.</param>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoConversationalQueue`1.#ctor(System.Int32,System.Boolean)">
      <summary>
            Creates a new XcoConversationalQueue.
            </summary>
      <param name="maxSize">The maximum number of entries that can be stored in the queue.</param>
      <param name="keepEntriesSerialized">True if entries should be stored in the contianer in a serialized state.</param>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoConversationalQueue`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoConversationalQueue.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoConversationalQueue`1.Create(XcoSpaces.XcoSpace,System.Uri)">
      <summary>
            Creates the container in the space that is used by this XcoConversationalQueue instance.
            </summary>
      <param name="owningSpace">
      </param>
      <param name="owningServerAddress">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoConversationalQueue`1.Enqueue(`0)">
      <summary>
            Adds the given entry to the queue. An exception is thrown if the entry cannot be added because the queue is full.
            </summary>
      <param name="entry">The entry to be added.</param>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoConversationalQueue`1.Dequeue">
      <summary>
            Dequeues the next entry from the queue. An error is thrown if the queue is currently emtpy.
            </summary>
      <returns>The dequeued entry.</returns>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoConversationalQueue`1.Dequeue(System.Boolean)">
      <summary>
            Dequeues the next entry from the queue. An error is thrown if the queue is currently emtpy.
            </summary>
      <param name="block">If true, the operation will block until an entry can be dequeued (and not throw an exception if the queue is empty).</param>
      <returns>The dequeued entry.</returns>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoConversationalQueue`1.Dequeue(System.Int32)">
      <summary>
            Dequeues the next entry from the queue. An error is thrown if the queue is currently emtpy.
            </summary>
      <param name="timeout">The time in milliseconds that the operation will wait when the queue is currently empty.</param>
      <returns>The dequeued entry.</returns>
    </member>
    <member name="T:XcoSpaces.Collections.Composite.XcoStateStore`2">
      <summary>
            Class for storing a state and additional value in the space, and monitoring changes
            to this state.
            </summary>
      <typeparam name="T">The type of state to be stored, must be an enumeration.</typeparam>
      <typeparam name="V">The type of the additional value that can be stored.</typeparam>
    </member>
    <member name="T:XcoSpaces.Collections.Composite.XcoStateStore`2.OnStateChangedDelegate">
      <summary>
            Definition for an XcoStateStore event when the state has changed.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="oldState">The old state (the state before the change).</param>
      <param name="newState">The new state (the state after the change). </param>
      <param name="statetransitionValue">The value that has been set together with the state change.</param>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoStateStore`2.#ctor">
      <summary>
            Creates a new XcoStateStore.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoStateStore`2.#ctor(`0)">
      <summary>
            Creates a new XcoStateStore.
            </summary>
      <param name="initialState">The initial state to be stored.</param>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoStateStore`2.Create(XcoSpaces.XcoSpace,System.Uri)">
      <summary>
            Creates the container in the space that is used by this XcoConversationalQueue instance.
            </summary>
      <param name="owningSpace">
      </param>
      <param name="owningServerAddress">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoStateStore`2.Get(XcoSpaces.XcoSpace,System.Uri,System.String,System.Type)">
      <summary>
            Gets the collection's container by name and type.
            </summary>
      <param name="owningSpace">
      </param>
      <param name="owningServerAddress">
      </param>
      <param name="name">
      </param>
      <param name="containerType">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoStateStore`2.MoveTo(`0)">
      <summary>
            Moves the current state of the store to the given state. (The current value is not changed.)
            </summary>
      <param name="newState">The new state.</param>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoStateStore`2.MoveTo(`0,`1)">
      <summary>
            Moves the current state of the store to the given state and value.
            </summary>
      <param name="newState">The new state.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoStateStore`2.WaitForStates(System.Int32,`0[])">
      <summary>
            Waits until the state is set to one of the states in the given list.
            </summary>
      <param name="timeout">The maximum time in milliseconds that the operation should wait.</param>
      <param name="states">The states that should be waited for.</param>
      <returns>True if one of the states has been set within the timeout, otherwise false.</returns>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoStateStore`2.AddNotificationForStateChanged(XcoSpaces.Collections.Composite.XcoStateStore{`0,`1}.OnStateChangedDelegate)">
      <summary>
            Registers a method to be called whenever the state is changed.
            </summary>
      <param name="notificationHandler">The method that should be called when the state is changed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoStateStore`2.RemoveNotificationForStateChanged(XcoSpaces.Collections.Composite.XcoStateStore{`0,`1}.OnStateChangedDelegate)">
      <summary>
            Removes an existing notification for state changes.
            </summary>
      <param name="notificationHandler">The method to be removed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoStateStore`2.ClearNotificationForStateChanged">
      <summary>
            Clears all existing notifications for state changes.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoStateStore`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoStateStore.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.Composite.XcoStateStore`2.Dispose">
      <summary>
            Disposes the XcoStateStore.
            </summary>
    </member>
    <member name="P:XcoSpaces.Collections.Composite.XcoStateStore`2.State">
      <summary>
            Gets the current state.
            </summary>
    </member>
    <member name="P:XcoSpaces.Collections.Composite.XcoStateStore`2.Value">
      <summary>
            Gets the current value.
            </summary>
    </member>
    <member name="T:XcoSpaces.Collections.XcoDictionary`2">
      <summary>
            Class representing a dictionary that is hosted by an XcoSpace.
            </summary>
      <typeparam name="K">The key type.</typeparam>
      <typeparam name="T">The value type.</typeparam>
    </member>
    <member name="T:XcoSpaces.Collections.XcoDictionary`2.OnEntryModifyDelegate">
      <summary>
            Defines an XcoDictionary event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="key">The key that has been added/removed.</param>
      <param name="entry">The value that has been added/removed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.#ctor">
      <summary>
            Creates a new XcoDictionary.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.#ctor(System.Boolean)">
      <summary>
            Creates a new XcoDictionary.
            </summary>
      <param name="keepEntriesSerialized">True if entries should be stored in the contianer in a serialized state.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoDictionary.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.Create(XcoSpaces.XcoSpace,System.Uri)">
      <summary>
            Creates the container in the space that is used by this XcoDictionary instance.
            </summary>
      <param name="owningSpace">
      </param>
      <param name="owningServerAddress">
      </param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.AddNotificationForEntryAdd(XcoSpaces.Collections.XcoDictionary{`0,`1}.OnEntryModifyDelegate)">
      <summary>
            Registers a method to be called whenever an entry is added to the XcoDictionary.
            </summary>
      <param name="notificationHandler">The method that should be called when an entry is added.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.AddNotificationForEntryRemove(XcoSpaces.Collections.XcoDictionary{`0,`1}.OnEntryModifyDelegate)">
      <summary>
            Registers a method to be called whenever an entry is removed from the XcoDictionary.
            </summary>
      <param name="notificationHandler">The method that should be called when an entry is removed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.RemoveNotificationForEntryAdd(XcoSpaces.Collections.XcoDictionary{`0,`1}.OnEntryModifyDelegate)">
      <summary>
            Removes an existing notification for added entries.
            </summary>
      <param name="notificationHandler">The method to be removed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.RemoveNotificationForEntryRemove(XcoSpaces.Collections.XcoDictionary{`0,`1}.OnEntryModifyDelegate)">
      <summary>
            Removes an existing notification for removed entries.
            </summary>
      <param name="notificationHandler">The method to be removed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.ClearNotificationForEntryRemove">
      <summary>
            Clears all existing notifications for removed entries.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.ClearNotificationForEntryAdd">
      <summary>
            Clears all existing notifications for added entries.
            </summary>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.Add(`0,`1)">
      <summary>
            Adds a new entry to the dictionary.
            </summary>
      <param name="key">The key of the entry.</param>
      <param name="entry">The value.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.TryGetValue(`0,`1@)">
      <summary>
            Tries to get a certain entry from the dictionary.
            </summary>
      <param name="key">The key of the entry to be read.</param>
      <param name="value">The entry that has been read.</param>
      <returns>True if an entry with the given key has been found, otherwise false.</returns>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.TryGetValue(`0,`1@,System.Boolean)">
      <summary>
            Tries to get a certain entry from the dictionary.
            </summary>
      <param name="key">The key of the entry to be read.</param>
      <param name="value">The entry that has been read.</param>
      <param name="block">If true, the operation will block until an entry with the given key is available in the dictionary.</param>
      <returns>True if an entry with the given key has been found, otherwise false. If block is true, then false will never be returned because the operation waits until an entry is available.</returns>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.TryGetValue(`0,`1@,System.Int32)">
      <summary>
            Tries to get a certain entry from the dictionary.
            </summary>
      <param name="key">The key of the entry to be read.</param>
      <param name="value">The entry that has been read.</param>
      <param name="timeout">The time in milliseconds that should be waited if there is no entry available with the given key.</param>
      <returns>True if an entry with the given key has been found, otherwise false.</returns>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.Remove(`0)">
      <summary>
            Removes an entry with the given key from the dictionary.
            </summary>
      <param name="key">The key of the entry to be removed.</param>
    </member>
    <member name="M:XcoSpaces.Collections.XcoDictionary`2.ContainsKey(`0)">
      <summary>
            Checks if an entry with a certain key exists.
            </summary>
      <param name="key">The key to be checked.</param>
      <returns>True if an entry with this key exists.</returns>
    </member>
    <member name="P:XcoSpaces.Collections.XcoDictionary`2.Item(`0)">
      <summary>
            Gets a certain entry from the dictionary. Throws an XcoException if the entry is not available.
            Or adds an entry with the given key to the dictionary.
            </summary>
      <param name="key">The key of the entry.</param>
      <returns>The entry.</returns>
    </member>
    <member name="P:XcoSpaces.Collections.XcoDictionary`2.Item(`0,System.Boolean)">
      <summary>
            Gets a certain entry from the dictionary. Throws an XcoException if the entry is not available.
            Or adds an entry with the given key to the dictionary.
            </summary>
      <param name="key">The key of the entry.</param>
      <param name="block">If true, the operation will block until an entry with the given key is available in the dictionary (and not throw an exception).</param>
      <returns>The entry.</returns>
    </member>
    <member name="P:XcoSpaces.Collections.XcoDictionary`2.Item(`0,System.Int32)">
      <summary>
            Gets a certain entry from the dictionary. Throws an XcoException if the entry is not available.
            Or adds an entry with the given key to the dictionary.
            </summary>
      <param name="key">The key of the entry.</param>
      <param name="timeout">The time in milliseconds that should be waited if there is no entry available with the given key.</param>
      <returns>The entry.</returns>
    </member>
    <member name="P:XcoSpaces.Collections.XcoDictionary`2.Keys">
      <summary>
            Gets the list of keys from the dictionary.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.MessageContent">
      <summary>
            Base class for all message content. Contains an OperationContext, that is needed
            in all messages. Since the OperationContext has to be (de)serialized together with the
            content (because objects stored in the context could lead to serialization errors),
            it cannot be stored in the message itself.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Messages.MessageContent.operationContext">
      <summary>
            Context information of the operation that is represented by this message. Can be
            used provide information for or get information from Aspects in the Core.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.MessageContent.Context">
      <summary>
            Context information of the operation that is represented by this message. Can be
            used provide information for or get information from Aspects in the Core.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.ResponseMessageContent">
      <summary>
            Base class for content of all response messages that are sent from the core.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseMessageContent.#ctor">
      <summary>
            Creates a new ResponseMessage.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseMessageContent.#ctor(XcoSpaces.Exceptions.XcoException)">
      <summary>
            Creates a new ResponseMessage.
            </summary>
      <param name="error">Error that occured while processing the corresponding RequestMessage.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.ResponseMessageContent.Error">
      <summary>
            Exception if an error occured while processing the corresponding RequestMessage,
            or null if no error occured.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.ResponseContainerCreate">
      <summary>
            Response message (response) for Container creation.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseContainerCreate.#ctor(XcoSpaces.Kernel.ContainerReference)">
      <summary>
            Creates a new ResponseContainerCreate message.
            </summary>
      <param name="cref">The reference to the Container that has been created.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseContainerCreate.#ctor(XcoSpaces.Exceptions.XcoException)">
      <summary>
            Creates a new ResponseContainerCreate message.
            </summary>
      <param name="error">Error that occured while processing the corresponding RequestMessage.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.ResponseContainerCreate.CRef">
      <summary>
            The reference to the Container that has been created.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Locking.ILockManager">
      <summary>
            Interface that must be implemented by a class that manages the locks of a container.
            Provides all methods needed to lock the container on entry level and/or container level.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ILockManager.SetReadLock(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Sets a read lock for a single entry.(only for entry level locking)
            </summary>
      <param name="e">The entry to be locked.</param>
      <param name="t">The Transaction for which the read lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ILockManager.SetWriteLock(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Sets a write lock for a single entry.(only for entry level locking)
            </summary>
      <param name="e">The entry to be locked.</param>
      <param name="t">The Transaction for which the write lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ILockManager.SetReadLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Sets a read lock for the complete container.(only for container level locking)
            </summary>
      <param name="t">The Transaction for which the read lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ILockManager.SetWriteLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Sets a write lock for the complete container.(only for container level locking)
            </summary>
      <param name="t">The Transaction for which the write lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ILockManager.SetCompleteReadLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Sets a read lock for the complete container, for special situations where locking
            the complete container is even needed in IEntry level locking mode.
            </summary>
      <param name="t">The Transaction for which the read lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ILockManager.SetCompleteWriteLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Sets a write lock for the complete container, for special situations where locking
            the complete container is even needed in IEntry level locking mode.
            </summary>
      <param name="t">The Transaction for which the write lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Locking.ILockWaitInfo">
      <summary>
            Interface for classes that provide information about operations that are currently
            waiting for a lock.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ILockWaitInfo.OtherLocksSet">
      <summary>
            Checks if there are (still) other locks set, and because of that the lock for
            this operation cannot be set.
            </summary>
      <returns>True if there are other locks set.</returns>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.ILockWaitInfo.Transaction">
      <summary>
            The Transaction for which the lock should be set.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.ILockWaitInfo.Op">
      <summary>
            The operation that needs the lock.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLockWaitInfo">
      <summary>
            Holds information for a single operation that is waiting for a container lock, when
            entry level locking is used.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLockWaitInfo.#ctor(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp,System.Boolean)">
      <summary>
            Creates a new ContainerLockWaitInfo.
            </summary>
      <param name="t">The Transaction for which the lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <param name="write">true for a write lock, false for a read lock</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLockWaitInfo.OtherLocksSet">
      <summary>
            Uses the information in this wait object to check if there are (still) other locks set, 
            and because of that the lock for this operation cannot be set.
            </summary>
      <returns>True if there are other locks set.</returns>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLockWaitInfo.Op">
      <summary>
            The Transaction for which the lock should be set.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLockWaitInfo.Transaction">
      <summary>
            The operation that needs the lock.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLockWaitInfo.OtherTxEntryReadLockCount">
      <summary>
            The number of read locks that are set on entries of this container by other transactions.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLockWaitInfo.OtherTxEntryWriteLockCount">
      <summary>
            The number of write locks that are set on entries of this container by other transactions.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLockWaitInfo.OtherContainerReadLockSet">
      <summary>
            Gets/Sets the information, if another read lock than the own is set for the container.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLockWaitInfo.OtherContainerWriteLockSet">
      <summary>
            Gets/Sets the information, if another write lock than the own is set for the container.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.MemoryCell">
      <summary>
            A MemoryCell to store a single object in the ContainerMemory.
            Note: Test implementation only!
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.MemoryCell.#ctor(System.Object)">
      <summary>
            Creates a new MemoryCell.
            </summary>
      <param name="value">The object to be stored.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.MemoryCell.#ctor">
      <summary>
            Creates a new MemoryCell.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.MemoryCell.Value">
      <summary>
            The object that is stored in this MemoryCell.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.EntityReference">
      <summary>
            Base class for the reference to an entity that is held in a space, to identify it within the space.
            Sub classes of this class represent the references to concrete entities, which can be containers
            (ContainerReference), transactions (TransactionReference) or aspects (AspectReference).
            An entity is identified by the address of the space combined with a unique guid.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.EntityReference.#ctor(System.Guid,System.String,System.String)">
      <summary>
            Creates a new EntityReference.
            </summary>
      <param name="id">The id of the entity.</param>
      <param name="remoteAddress">The address of the space where the entity is held, or null for the local (embedded) space.</param>
      <param name="subPath">The subpath to access meta resources from this reference.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.EntityReference.UpdateRemoteAddress(System.String)">
      <summary>
            Updates the remote address of this EntityReference.
            </summary>
      <param name="remoteAddress">The new remote address.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.EntityReference.Equals(System.Object)">
      <summary>
            Checks if the given object equals this one. Overridden for correct usage in Dictionaries.
            </summary>
      <param name="obj">The object to be compared.</param>
      <returns>True if the instances are equal.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.EntityReference.Equals(XcoSpaces.Kernel.EntityReference)">
      <summary>
            Checks if the EntityReferences are equal. This is the case when id and remote address are the same.
            </summary>
      <param name="eref">The EntityReference to be compared.</param>
      <returns>True if the instances are equal.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.EntityReference.GetHashCode">
      <summary>
            Returns the hashcode for this EntityReference. Overridden for correct usage in Dictionaries
            (so that hashcode from instances with the same id and remote address is also the same).
            </summary>
      <returns>Hashcode for this EntityReference.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.EntityReference.ToString">
      <summary>
            Overridden. Returns a string representation of the EntityReference.
            </summary>
      <returns>A string representation of the EntityReference.</returns>
    </member>
    <member name="P:XcoSpaces.Kernel.EntityReference.ID">
      <summary>
            The id of the entity.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.EntityReference.RemoteAddress">
      <summary>
            The address of the space where the entity is held, or null for the local (embedded) space.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.EntityReference.SubPath">
      <summary>
            The subpath to access meta resources from this reference.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.ContainerReference">
      <summary>
            The reference to a Container, that can be used to access this Container in an operation.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.ContainerReference.#ctor(System.Guid)">
      <summary>
            Creates a new ContainerReference. (This Constructor is only used for testing purposes.)
            </summary>
      <param name="id">The id of the Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.ContainerReference.#ctor(System.Guid,System.String)">
      <summary>
            Creates a new ContainerReference.
            </summary>
      <param name="id">The id of the Container.</param>
      <param name="remoteAddress">The address of the space where the Container is held, or null for the local (embedded) space.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.ContainerReference.#ctor(System.Guid,System.String,System.String)">
      <summary>
            Creates a new ContainerReference.
            </summary>
      <param name="id">The id of the Container.</param>
      <param name="remoteAddress">The address of the space where the Container is held, or null for the local (embedded) space.</param>
      <param name="subPath">The subpath to access meta resources from this reference.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.ContainerReference.CrefMeta">
      <summary>
            The reference to the Meta Container of this Container.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.ContainerReference.CrefProperties">
      <summary>
            The reference to the Properties Container of this Container.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Locking.EntryLevel.TransactionLockInfo">
      <summary>
            Contains information about how many read and write locks a Transaction
            currently holds for the entries of a single container.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.TransactionLockInfo.EntryReadLockCount">
      <summary>
            The number of entry read locks that the Transaction holds.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.TransactionLockInfo.EntryWriteLockCount">
      <summary>
            The number of entry write locks that the Transaction holds.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Transactions.TransactionLock">
      <summary>
            A single lock that has been set in a Transaction.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Transactions.TransactionLock.LockReleaseDelegate">
      <summary>
            Definition of the method that must be implemented for lock release.
            </summary>
      <param name="t">The Transaction for which the lock should be released.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.TransactionLock.#ctor(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Container.Locking.LockType,XcoSpaces.Kernel.Transactions.TransactionLock.LockReleaseDelegate)">
      <summary>
            Creates a new TransactionLock.
            </summary>
      <param name="t">The Transaction for which the lock should be released.</param>
      <param name="lockStatus">The status of the lock to determine what actions have to be done to release the previously acclaimed lock. This assures that when an operation is rolled back, the status of the lock will be exactly as it was before setting the lock. (see LockStatus enum for details)</param>
      <param name="lockReleaseDelegate">The method that can be used to release the lock.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.TransactionLock.Commit">
      <summary>
            Releases the lock that has been set.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.TransactionLock.Rollback">
      <summary>
            Releases the lock that has been set.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.WaitRequest">
      <summary>
            Class to store a RequestMessage that is waiting for a certain event to occur.
            WaitRequests are created by the XCoreProcessor and stored in the RequestWait Container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.WaitRequest.#ctor(XcoSpaces.Kernel.Messages.RequestContainerOp,XcoSpaces.Kernel.Core.WaitEventType,XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference)">
      <summary>
            Creates a new WaitRequest.
            </summary>
      <param name="operation">The waiting operation.</param>
      <param name="type">The type of event the message waits for.</param>
      <param name="cref">Reference to the container that was the target of the operation that is represented by this message.</param>
      <param name="tref">Reference to the Transaction in which this operation is done.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Core.WaitRequest.Operation">
      <summary>
            The waiting message.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Core.WaitRequest.Type">
      <summary>
            The type of event the message waits for.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Core.WaitRequest.CRef">
      <summary>
            Reference to the container that was the target of the operation that is represented by this message.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Core.WaitRequest.TRef">
      <summary>
            Reference to the Transaction in which this operation is done.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.TimeoutInfo">
      <summary>
            Information about the timeout of an operation in the core.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.TimeoutInfo.#ctor(System.Int32)">
      <summary>
            Creates a new TimeoutInfo.
            </summary>
      <param name="value">The timeout in milliseconds. Or -1 for infinite timeout.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.TimeoutInfo.CalcTimeoutFromDate(System.DateTime)">
      <summary>
            Calculates the timeout date from the given date by adding the timeout value to it.
            (The timeout date is set to DateTime.MaxValue if the timeout is infinite.)
            </summary>
      <param name="date">The date for calculating the timeout date.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.TimeoutInfo.Value">
      <summary>
            The timeout in milliseconds. Or -1 for infinite timeout.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.TimeoutInfo.Infinite">
      <summary>
            true if the timeout if infinite.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.TimeoutInfo.Date">
      <summary>
            The date when the operation that this timeout info belongs to times out.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.Message">
      <summary>
            Base class for all messages used to communicate with the XCore. Contains
            Attributes that are needed by every message.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.Message.SerializeContent">
      <summary>
            Serializes the content of this message.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.Message.DeserializeContent">
      <summary>
            Deserializes the content of this message.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.Message.MessageID">
      <summary>
            The id of the message assigned and used by the XcoKernel to find the correct
            Response (ResponseMessage) to a request (RequestMessage) sent to the Kernel (the
            response from the Kernel comes back with the same message id).
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.Message.RemoteAddress">
      <summary>
            The address of the remote space where this message should be sent to,
            or has been received from. Or null, if it is the embedded space.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.Message.IsRemote">
      <summary>
            True if the address of the message belongs to a remote space.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.ResponseTransactionCreate">
      <summary>
            Response message (response) for creating a Transaction.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseTransactionCreate.#ctor(XcoSpaces.Kernel.TransactionReference)">
      <summary>
            Creates a new ResponseTransactionCreate message.
            </summary>
      <param name="tref">The reference to the Transaction that has been created.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseTransactionCreate.#ctor(XcoSpaces.Exceptions.XcoException)">
      <summary>
            Creates a new ResponseTransactionCreate message.
            </summary>
      <param name="error">Error that occured while processing the corresponding RequestMessage.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.ResponseTransactionCreate.TRef">
      <summary>
            The reference to the Transaction that has been created.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLockWaitInfo">
      <summary>
            Holds information for a single operation that is waiting for an entry lock, when
            entry level locking is used.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLockWaitInfo.#ctor(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Messages.RequestContainerOp,System.Boolean)">
      <summary>
            Creates a new EntryLockWaitInfo.
            </summary>
      <param name="t">The Transaction for which the lock should be set.</param>
      <param name="e">The entry that should be locked.</param>
      <param name="op">The operation that needs the lock.</param>
      <param name="write">true for a write lock, false for a read lock</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLockWaitInfo.OtherLocksSet">
      <summary>
            Uses the information in this wait object to check if there are (still) other locks set, 
            and because of that the lock for this operation cannot be set.
            </summary>
      <returns>True if there are other locks set.</returns>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLockWaitInfo.Transaction">
      <summary>
            The Transaction for which the lock should be set.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLockWaitInfo.Op">
      <summary>
            The operation that needs the lock.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLockWaitInfo.IEntry">
      <summary>
            The entry that should be locked.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLockWaitInfo.OtherEntryReadLockSet">
      <summary>
            Gets/Sets the information, if another read lock than the own is set for this entry.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLockWaitInfo.OtherEntryWriteLockSet">
      <summary>
            Gets/Sets the information, if another write lock than the own is set for this entry.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLockWaitInfo.OtherContainerReadLockSet">
      <summary>
            Gets/Sets the information, if another read lock than the own is set for the container.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLockWaitInfo.OtherContainerWriteLockSet">
      <summary>
            Gets/Sets the information, if another write lock than the own is set for the container.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.RequestMessageContent">
      <summary>
            Base class for content of all request messages that are sent to the core.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestMessageContent.SerializeInnerContent">
      <summary>
            Can be implemented by Subclasses to serialize content that should not be deserialized
            immediately after a message is received. (E.g. Entries that should stay in the Container
            serialized)
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestMessageContent.OwningRequestMessage">
      <summary>
            The request message hat contains this content. (This is automatically set by the serialize/deserialize
            methods of the owning RequestMessage.)
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.RequestContainerOp">
      <summary>
            Base class for all request messages that handle container operations. Summarizes
            all attributes that all container operations have in common.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestContainerOp.#ctor(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Int32)">
      <summary>
            Creates a new RequestContainerOp.
            </summary>
      <param name="cref">The reference to the Container that is the target of the operation.</param>
      <param name="tref">Reference to the Transaction in which this operation takes places, or null if an implicit Transaction should be used.</param>
      <param name="timeout">The timeout of the operation in milliseconds. Use System.Threading.Timeout.Infinite for infinite Timeout.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestContainerOp.UpdateTimeout(System.DateTime)">
      <summary>
            Updates the timeout info of this operation. Calculates the timout date by
            adding the timeout value to the given timestamp
            </summary>
      <param name="messageTimestamp">The date when operation entered the core.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestContainerOp.CRef">
      <summary>
            The reference to the Container that is the target of the operation.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestContainerOp.TRef">
      <summary>
            Reference to the Transaction in which this operation takes places, or null if an implicit Transaction should be used.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestContainerOp.Timeout">
      <summary>
            The timeout of the operation, containing timeout value, timeout date and the information if
            the timeout is infinite.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestContainerOp.TimeoutIntValue">
      <summary>
            The timeout of the operation in milliseconds.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestContainerOp.RetryCount">
      <summary>
            The number of times this operation has been tried to process but could not be fullfilled
            before the current try.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.RequestContainerCreate">
      <summary>
            Request message (request) for container creation.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestContainerCreate.ID">
      <summary>
            The id of the container, or Guid.Empty if a new id should be created for the container.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestContainerCreate.Size">
      <summary>
            The maximum size of the Container. (-1 for an unbounded Container.)
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestContainerCreate.Unique">
      <summary>
            True if the elements in the container should be unique.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestContainerCreate.CoordinationTypes">
      <summary>
            The list of the coordination types for this Container (fifo, lifo, vector, key, ...).
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.ResponseTransactionCommit">
      <summary>
            Response message (response) for committing a Transaction.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseTransactionCommit.#ctor">
      <summary>
            Creates a new ResponseTransactionCommit message.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseTransactionCommit.#ctor(XcoSpaces.Exceptions.XcoException)">
      <summary>
            Creates a new ResponseTransactionCommit message.
            </summary>
      <param name="error">Error that occured while processing the corresponding RequestMessage.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.ContainerAspectManager">
      <summary>
            Manages a list of Aspects per ContainerIPoint for a Container, and provides Methods
            to call the Aspects for every ContainerIPoint.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.#ctor(XcoSpaces.Kernel.ContainerReference)">
      <summary>
            Creates a new ContainerAspectManager.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.AddAspect(XcoSpaces.Kernel.Aspects.ContainerAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint})">
      <summary>
            Adds an Aspect to the Container.
            </summary>
      <param name="aspect">The Aspect that should be added.</param>
      <param name="iPoints">The list of ContainerIPoints where the Aspect should be added.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.RemoveAspect(XcoSpaces.Kernel.Aspects.ContainerAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint})">
      <summary>
            Removes an Aspect from the Container.
            </summary>
      <param name="aspect">The Aspect that should be removed.</param>
      <param name="iPoints">The list of ContainerIPoints where the Aspect should be removed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.CreateException(System.Exception,XcoSpaces.Kernel.Aspects.ContainerIPoint,System.Int32)">
      <summary>
            Creates an XcoAspectException if the given Exception is not of this type, or else gives the same
            Exception back. This method is used to guarantee that an Aspect always gives back an Exception
            of type XcoAspectException.
            </summary>
      <param name="ex">The Exception that was thrown.</param>
      <param name="iPoint">The ContainerIPoint where the Exception occured.</param>
      <param name="index">The index of the Aspect in the list of Aspects for this iPoint, that has thrown the Exception.</param>
      <returns>An XcoAspectException for the error that occured.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PreRead(XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector}@,System.Int32,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Read. Calls all Aspects of this Container that have been added
            to the PreRead iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to read Entries from the Container.</param>
      <param name="retryCount">The number of times this operation has already been rescheduled.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PostRead(XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Read. Calls all Aspects of this Container that have been added
            to the PostRead iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to read Entries from the Container.</param>
      <param name="entries">The list of Entries that have been read.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PreTake(XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector}@,System.Int32,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Take. Calls all Aspects of this Container that have been added
            to the PreTake iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to take Entries from the Container.</param>
      <param name="retryCount">The number of times this operation has already been rescheduled.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PostTake(XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Take. Calls all Aspects of this Container that have been added
            to the PostTake iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to take Entries from the Container.</param>
      <param name="entries">The list of Entries that have been taken.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PreDestroy(XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector}@,System.Int32,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Destroy. Calls all Aspects of this Container that have been added
            to the PreDestroy iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to destroy Entries in the Container.</param>
      <param name="retryCount">The number of times this operation has already been rescheduled.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PostDestroy(XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Destroy. Calls all Aspects of this Container that have been added
            to the PostDestroy iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to destroy Entries in the Container.</param>
      <param name="entries">The list of Entries that have been destroyed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PreWrite(XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,System.Int32,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Write. Calls all Aspects of this Container that have been added
            to the PreWrite iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="entries">The list of Entries that should be written.</param>
      <param name="retryCount">The number of times this operation has already been rescheduled.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PostWrite(XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Write. Calls all Aspects of this Container that have been added
            to the PostWrite iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="entries">The list of Entries that have been written.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PreShift(XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,System.Int32,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Shift. Calls all Aspects of this Container that have been added
            to the PreShift iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="entries">The list of Entries that should be written.</param>
      <param name="retryCount">The number of times this operation has already been rescheduled.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PostShift(XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Shift. Calls all Aspects of this Container that have been added
            to the PostShift iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="entries">The list of Entries that have been written.</param>
      <param name="removedEntries">The list of Entries that have been removed for shift.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PreAddAspect(XcoSpaces.Kernel.Aspects.ContainerAspect@,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Add Aspect. Calls all Aspects of this Container that have been added
            to the PreAddAspect iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="aspect">The Aspect that should be added.</param>
      <param name="iPoints">The list of iPoints where the Aspect should be added.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PostAddAspect(XcoSpaces.Kernel.Aspects.ContainerAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Add Aspect. Calls all Aspects of this Container that have been added
            to the PostAddAspect iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="aspect">The Aspect that has been added.</param>
      <param name="iPoints">The list of iPoints where the Aspect has been added.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PreRemoveAspect(XcoSpaces.Kernel.Aspects.ContainerAspect@,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Remove Aspect. Calls all Aspects of this Container that have been added
            to the PreRemoveAspect iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="aspect">The Aspect that should be removed.</param>
      <param name="iPoints">The list of iPoints where the Aspect should be removed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PostRemoveAspect(XcoSpaces.Kernel.Aspects.ContainerAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Remove Aspect. Calls all Aspects of this Container that have been added
            to the PostRemoveAspect iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="aspect">The Aspect that has been removed.</param>
      <param name="iPoints">The list of iPoints where the Aspect has been removed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PreContainerDestroy(XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Container Destroy. Calls all Aspects of this Container that have been added
            to the PreContainerDestroy iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerAspectManager.PostContainerDestroy(XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Container Destroy. Calls all Aspects of this Container that have been added
            to the PostContainerDestroy iPoint. The operation is cancelled as soon as an Aspects returns
            another result than Ok, and this result is returned.
            </summary>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.ContainerMemory">
      <summary>
            The ContainerMemory uses MemoryCells to store all information of the
            Container (Entries and coordination information).
            Note: Test implementation only!
            NOTE 2: All the functionality of this class has been removed because it is currently never needed and only slows down the kernel!!!!!
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerMemory.#ctor">
      <summary>
            Creates a new ContainerMemory.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerMemory.Allocate">
      <summary>
            Creates and Allocates new MemoryCell in the ContainerMemory.
            </summary>
      <returns>The MemoryCell that has been created.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerMemory.Allocate(XcoSpaces.Kernel.IEntry)">
      <summary>
            Creates and Allocates a new MemoryCell and stores the Entry in it.
            </summary>
      <param name="entry">The Entry to be stored.</param>
      <returns>The MemoryCell that has been created.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerMemory.Free(XcoSpaces.Kernel.Container.IMemoryCell)">
      <summary>
            Frees a MemoryCell by removing it from the ContainerMemory.
            </summary>
      <param name="cell">The MemoryCell to be removed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ContainerMemory.Free(XcoSpaces.Kernel.IEntry)">
      <summary>
            Frees the MemoryCell that stores the given Entry by removing it
            from the ContainerMemory.
            </summary>
      <param name="entry">The Entry to be removed.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.ResponseTransactionRollback">
      <summary>
            Response message (response) for rolling back a Transaction.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseTransactionRollback.#ctor">
      <summary>
            Creates a new ResponseTransactionRollback message.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseTransactionRollback.#ctor(XcoSpaces.Exceptions.XcoException)">
      <summary>
            Creates a new ResponseTransactionRollback message.
            </summary>
      <param name="error">Error that occured while processing the corresponding RequestMessage.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.EventProcessor">
      <summary>
            The EventProcessor listens to the EventContainer Thread. When a new event arrives, the EventProcessor
            looks if there are any Messages waiting in the WaitContainer for this event. All messages that are 
            waiting for the event are then scheduled to be processed again.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.EventProcessor.#ctor(XcoSpaces.Kernel.Core.CoreData,XcoSpaces.Kernel.Core.XCore.ProcessRequestMethod)">
      <summary>
            Creates a new EventProcessor. An own thread is started for taking the events from the event
            Container and processing them.
            </summary>
      <param name="coreData">The internal kernel data structures.</param>
      <param name="processRequestMethod">The methode to be called to process a request message again.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.EventProcessor.Run">
      <summary>
            Method running in an own thread to take the events from the event
            container and process them.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.EventProcessor.Stop">
      <summary>
            Stops the EventProcessor thead.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.EventProcessor.Process(XcoSpaces.Kernel.Core.WaitEvent)">
      <summary>
            Processes an Event by comparing all waiting messages with the event
            and giving the messages back to the XCoreProcessor that were waiting
            for this event.
            </summary>
      <param name="waitEvent">The event that has occured.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.CoreData">
      <summary>
            Class representing the data structures within the kernel, that are needed and used by the central
            kernel components, like core containers and container/transaction manager.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreData.#ctor(XcoSpaces.Kernel.Core.XCore.GetKernelMethod)">
      <summary>
            Creates a new CoreData instance
            </summary>
      <param name="getLocalKernel">Method for getting the reference to the local XcoKernel.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreData.Dispose">
      <summary>
            Disposes the core data structures (releases all waiters in the core containers and stops 
            the transaction manager).
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Core.CoreData.ContainerManager">
      <summary>
            The ContainerManager of the kernel that manages the list of containers.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Core.CoreData.TransactionManager">
      <summary>
            The TransactionManager of the kernel that manages the list of open transactions.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Core.CoreData.AspectManager">
      <summary>
            The AspectManager that manages the list of all aspects in the kernel and to which ipoints they were added.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Core.CoreData.SpaceAspectManager">
      <summary>
            The SpaceAspectManager that is responsible for managing and executing all space aspects.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Core.CoreData.WaitContainer">
      <summary>
            The core container for waiting messages.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Core.CoreData.EventContainer">
      <summary>
            The core container that receives events from the CoreProcessor.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Core.CoreData.LocalKernel">
      <summary>
            Reference to the local XcoKernel.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.CoreContainer`1">
      <summary>
            CoreContainers are used in the Core for synchrized communication between the
            Threads running in the core. The same ContainerMemory is used internal is in
            user created Containers.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreContainer`1.#ctor(System.Int32)">
      <summary>
            Creates a new CoreContainer.
            </summary>
      <param name="size">The size of the Container (-1 for unbounded) - NOT YET IMPLEMENTED</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreContainer`1.IsFull">
      <summary>
            Checks if the Container is full.
            </summary>
      <returns>true if the Container is full.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreContainer`1.IncCount">
      <summary>
            Increases the Entry count of the Container by 1.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreContainer`1.DecCount">
      <summary>
            Decreases the Entry count of the Container by 1.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreContainer`1.WriteOne(XcoSpaces.Kernel.Entry{`0})">
      <summary>
            Writes one Entry into the Container. A write lock is acquired for this Thread
            before the Entry is written (and is released immediately afterwards).
            </summary>
      <param name="entry">The Entry to be written into the Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreContainer`1.TakeOne">
      <summary>
            Takes one Entry from the Container. If the Container is empty, the Operation
            is blocked until an Entry is added to the Container. A write lock is acquired 
            for this Thread before the Entry is taken (and is released immediately afterwards).
            </summary>
      <returns>The Entry that has been taken.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreContainer`1.ReadAll">
      <summary>
            Reads all Entries from the Container. A read lock is acquired for this Thread 
            before the Entries are read (and is released immediately afterwards).
            </summary>
      <returns>The list of Entries that has been read from the Container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreContainer`1.DestroyOne(XcoSpaces.Kernel.Entry{`0})">
      <summary>
            Removes the given Entry from the Container.
            </summary>
      <param name="entry">The Entry to be destroyed (removed).</param>
      <returns>true if the Entry has been removed from the Container, or false if the Entry has not been found in the Container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreContainer`1.ReleaseWaiters">
      <summary>
            Releases all Threads that are waiting to take an Entry from the Container.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Aspects.AspectReference">
      <summary>
            The reference to an Aspect, that can be used to access this Aspect in an operation.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.AspectReference.#ctor(System.Guid)">
      <summary>
            Creates a new AspectReference. (This Constructor is only used for testing purposes.)
            </summary>
      <param name="id">The id of the Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.AspectReference.#ctor(System.Guid,System.String)">
      <summary>
            Creates a new AspectReference.
            </summary>
      <param name="id">The id of the Container.</param>
      <param name="remoteAddress">The address of the space where the Aspect is held, or null for the local (embedded) space.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.ResponseMessage">
      <summary>
            Base class for all response messages that are sent from the core.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseMessage.#ctor(XcoSpaces.Kernel.Messages.ResponseMessageContent)">
      <summary>
            Creates a new ResponseMessage.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseMessage.SetMessageData(XcoSpaces.Kernel.Messages.RequestMessage)">
      <summary>
            Takes over the message id and remote address from the given message.
            </summary>
      <param name="msg">The message from which the data should be taken over.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseMessage.SerializeContent">
      <summary>
            Serializes the content of this message.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseMessage.DeserializeContent">
      <summary>
            Deserializes the content of this message.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.ResponseMessage.Content">
      <summary>
            The content of this message. Or null, if the content is currently serialized.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Container">
      <summary>
            Implementation of a Container. The Container can be coordinated by multiple coordination types.
            The locking is realised on container level, which means that the whole Container is locked when
            an operation is performed on the Container. Implements the IContainer Interface.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.#ctor(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.ContainerReference,System.Int32,System.Boolean,XcoSpaces.Kernel.Core.CoreContainer{XcoSpaces.Kernel.Core.WaitEvent},XcoSpaces.Kernel.Core.CoreContainer{XcoSpaces.Kernel.Core.WaitRequest},XcoSpaces.Kernel.Container.ICoordinator[])">
      <summary>
            Creates a new Container.
            </summary>
      <param name="cref">The reference to this Container, that is used to address the Container from outside the kernel.</param>
      <param name="crefMeta">The reference to this Container's Meta Container.</param>
      <param name="size">The maximum size of the Container, that is the number of Entries the Container can hold. Use -1 for an unbounded Container.</param>
      <param name="unique">True if the elements in the container should be unique - FUNCTIONALITY NOT YET IMPLEMENTED</param>
      <param name="eventContainer">The event container of the core, that receives events to wake up waiting operations.</param>
      <param name="waitContainer">The wait container of the core, that holds waiting operations.</param>
      <param name="coordinators">List of Coordinators that represent the coordination types of this container. A Container must have at least one Coordinator.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.UpdateCRef(System.String)">
      <summary>
            Updates the ContainerReference of this Container with the new space address.
            </summary>
      <param name="spaceAddress">The address of the local space.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.Read(XcoSpaces.Kernel.Messages.RequestRead,XcoSpaces.Kernel.Transactions.Transaction,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@)">
      <summary>
            Reads a list of Entries from a Container. Which Entries are read is decided by the list of 
            Selectors provided by the operation.
            </summary>
      <param name="op">The operation that should be performed.</param>
      <param name="t">The Transaction in which this operation should be done.</param>
      <param name="entries">Returns the list of Entries that have been read.</param>
      <returns>true if the operation was successful, false if the operation could not be finished (e.g. because there were not enough Entries in the Container) and was sent to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.Take(XcoSpaces.Kernel.Messages.RequestRead,XcoSpaces.Kernel.Transactions.Transaction,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@)">
      <summary>
            Takes a list of Entries from a Container. Which Entries are taken is decided by the list of 
            Selectors provided by the operation.
            </summary>
      <param name="op">The operation that should be performed.</param>
      <param name="t">The Transaction in which this operation should be done.</param>
      <param name="entries">Returns the list of Entries that have been taken.</param>
      <returns>true if the operation was successful, false if the operation could not be finished (e.g. because there were not enough Entries in the Container) and was sent to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.Destroy(XcoSpaces.Kernel.Messages.RequestRead,XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Destroys (removes) a list of Entries from a Container. Which Entries are removed is decided 
            by the list of Selectors provided by the operation.
            </summary>
      <param name="op">The operation that should be performed.</param>
      <param name="t">The Transaction in which this operation should be done.</param>
      <returns>true if the operation was successful, false if the operation could not be finished (e.g. because there were not enough Entries in the Container) and was sent to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.Write(XcoSpaces.Kernel.Messages.RequestWrite,XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Writes a list of Entries to a Container.
            </summary>
      <param name="op">The operation that should be performed.</param>
      <param name="t">The Transaction in which this operation should be done.</param>
      <returns>true if the write operation was successful. false if the entries couldn't be written to the Container (e.g. because there was not enough space left in the Container) and therefore the operation was sent to the wait Container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.Shift(XcoSpaces.Kernel.Messages.RequestWrite,XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Writes a list of Entries to a Container. Writing with Shift is always successful because 
            any Entries in the Container that wouldn't allow the Entries to be written will be removed
            from the Container first.
            </summary>
      <param name="op">The operation that should be performed.</param>
      <param name="t">The Transaction in which this operation should be done.</param>
      <returns>true if the write operation was successful. false if the operation was sent to the wait Container (e.g. when a lock could not be set).</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.GetProperty(XcoSpaces.Kernel.Messages.RequestRead,XcoSpaces.Kernel.Transactions.Transaction,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@)">
      <summary>
            Reads a property from the Container. The type of the returned property value is specific
            based on which property is read. An exception is thrown if the name of the property is not 
            known. Some properties (like the Entry Count) need to acquire a read lock, and will therefore 
            use the given Transaction (or time out in case the lock cannot be set in time).
            </summary>
      <param name="op">The operation that should be performed.</param>
      <param name="t">The Transaction in which the operation takes place.</param>
      <param name="entries">The value(s) of the property, packed into an entry list (to be equal to the outcome of a standard read operation).</param>
      <returns>true if the operation was successful, false if the operation could not be finished (e.g. because a lock could not be set) and was sent to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.CheckReadSelectorRequirements(System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector})">
      <summary>
            Checks if the list of read Selectors fulfills the Requirements. The list
            has to contain at least one Selector, and the Selector count must not
            exceed the maximum size of a bounded container.
            </summary>
      <param name="selectors">The list of selectors to be checked.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.ReadEntries(System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector},XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Reads Entries from the Container with the given list of Selectors. The Selectors
            are applied in the given order. If the list of Selectors contains a Selectors to
            which no Coordinator can be found, a XcoContainerReadException is thrown. If the
            selectors cannot be fulfilled, null is returned.
            This method is used by all read operations.
            </summary>
      <param name="selectors">List of Selectors that define which Entries should be read.</param>
      <param name="t">The Transaction in which the operation takes place.</param>
      <returns>The list of Entries that have been read, or null if the Selectors could not be fulfilled.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.RemoveEntries(System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Removes the Entries from the Container (that is, from the ContainerMemory and all
            Coordinators). This method is used by Take and Destroy operations.
            </summary>
      <param name="entries">The list of Entries to be removed from the Container.</param>
      <param name="t">The Transaction in which the operation takes place.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.RemoveEntries(System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.Transactions.Transaction,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry})">
      <summary>
            Removes the given Entries from the Container (that is, from the ContainerMemory and all
            Coordinators). This is used in the Shift operation.
            </summary>
      <param name="entries">The list of Entries to be removed from the Container.</param>
      <param name="t">The Transaction in which the operation takes place.</param>
      <param name="removedEntries">List of all removed Entries, where the Entries that are removed should be added.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.PrepareReadOperationForWait(XcoSpaces.Kernel.Messages.RequestRead,XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Prepares the read operation for being put into waiting state. The Transaction is rolled back,
            the lock that has been acquired for this operation is released, the AddWaitCounter is increased
            and the operation is written to the wait container.
            </summary>
      <param name="op">The operation that should be prepared for wait.</param>
      <param name="t">The Transaction in which the operation takes place.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.PrepareWriteOperationForWait(XcoSpaces.Kernel.Messages.RequestWrite,XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Prepares the write operation for being put into waiting state. The Transaction is rolled back,
            the lock that has been acquired for this operation is released, the RemoveWaitCounter is increased
            and the operation is written to the wait container.
            </summary>
      <param name="op">The operation that should be prepared for wait.</param>
      <param name="t">The Transaction in which the operation takes place.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.FindCoordinator(XcoSpaces.Kernel.Selectors.Selector)">
      <summary>
            Finds the Coordinator for the given Selector.
            </summary>
      <param name="s">The Selector for which a coordinator should be found.</param>
      <returns>The Coordinator for this Selector, or null if no Coordinator fitting this Selector has been found.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.IsFull">
      <summary>
            Checks if the Container is full (that is when the Entry count equals the maximum size).
            </summary>
      <returns>True if the Container is full.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.CreateEntryAddEventIfNeeded(XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            If the add wait counter for this Transaction is greater that 0, an EntryAdd event is 
            created to wake up the waiting operations.
            </summary>
      <param name="t">The Transaction for which an event should be created.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.CreateEntryRemoveEventIfNeeded(XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            If the remove wait counter for this Transaction is greater that 0, an EntryRemove event is 
            created to wake up the waiting operations.
            </summary>
      <param name="t">The Transaction for which an event should be created.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.CommitEntryAdd(XcoSpaces.Kernel.Transactions.TransactionLog)">
      <summary>
            Commits the adding of one or more Entries. The only thing that needs to be done is creating an
            Event, if there are any operations waiting for Entry Add on this container.
            </summary>
      <param name="tlog">The log of the transaction, in this case contains no needed information.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.CommitEntryRemove(XcoSpaces.Kernel.Transactions.TransactionLog)">
      <summary>
            Commits the removing of one or more Entries. The only thing that needs to be done is creating an
            Event, if there are any operations waiting for Entry Remove on this container.
            </summary>
      <param name="tlog">The log of the transaction, in this case contains no needed information.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Container.RollbackComplete(XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Completely rolls back the given Transaction. This is used when an error in a Container operation
            occurs. A Transaction can be rolled back completely when an operation fails, because it is created 
            only for a single operation.
            </summary>
      <param name="t">The Transaction to be rolled back.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Container.CRef">
      <summary>
            The reference to this Container, that is used to address the Container from outside the core.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Container.CRefMeta">
      <summary>
            The reference to this Container's Meta Container.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Container.AspectManager">
      <summary>
            The ContainerAspectManager that manages the Aspects of this Container.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Container.AddWaitCounter">
      <summary>
            Counter that contains information about how many RequestMessages wait for Entries to be added
            to this Container.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Container.RemoveWaitCounter">
      <summary>
            Counter that contains information about how many RequestMessages wait for Entries to be removed
            from this Container.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.OperationContext">
      <summary>
            Class for providing an operation with meta information, that can be used by Aspects
            in the core.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.OperationContext.#ctor">
      <summary>
            Creates a new OperationContext.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.OperationContext.AddProperty(System.String,System.Object)">
      <summary>
            Adds a property to the OperationContext.
            </summary>
      <param name="key">The key of the property.</param>
      <param name="value">The value of the property.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.OperationContext.ContainsProperty(System.String)">
      <summary>
            Checks if the OperationContext contains a certain property.
            </summary>
      <param name="key">The key of the property.</param>
      <returns>True if the OperationContext contains a property with this key.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.OperationContext.GetProperty(System.String)">
      <summary>
            Gets a property from the OperationContext.
            </summary>
      <param name="key">The key of the property.</param>
      <returns>The value of the property, of null if no property with this value exists.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.OperationContext.RemoveProperty(System.String)">
      <summary>
            Removes a property from the OperationContext.
            </summary>
      <param name="key">The key of the property.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.OperationContext.SetProperty(System.String,System.Object)">
      <summary>
            Sets a property to the given value. If no value with this key exists, it is added.
            </summary>
      <param name="key">The key of the property.</param>
      <param name="value">The value of the property.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.OperationContext.GetAllProperties">
      <summary>
            For xml-serializer
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:XcoSpaces.Kernel.OperationContext.Item(System.String)">
      <summary>
            Array accessor for the properties of this OperationContext.
            </summary>
      <param name="key">The key of the property.</param>
      <returns>The value of the property, or null if no property with this key exists.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLock">
      <summary>
            Class that handles the locking of a single IEntry in a Container in IEntry level locking mode.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLock.#ctor(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo)">
      <summary>
            Creates a new EntryLock.
            </summary>
      <param name="entry">The IEntry that this lock is responsible for.</param>
      <param name="lockInfo">LockInfo handled by the EntryLevelLockManager that contains all information about the current lock status of the Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLock.SetReadLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Tries to set a read lock for this Transaction. Locking is always done with the root transaction 
            (otherwise children of the same transaction could lock themselves). If the lock cannot be set,
            the operation is written to the wait container.
            </summary>
      <param name="t">The Transaction for which the read lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLock.SetWriteLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Tries to set a write lock for this Transaction. Locking is always done with the root transaction 
            (otherwise children of the same transaction could lock themselves). If the lock cannot be set,
            the operation is written to the wait container.
            </summary>
      <param name="t">The Transaction for which the write lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLock.ReleaseReadLock(XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Releases a read lock for this Transaction (its root Transaction).
            </summary>
      <param name="t">The Transaction for which the read lock should be released.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLock.ReleaseWriteLock(XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Releases a write lock for this Transaction (its root Transaction).
            </summary>
      <param name="t">The Transaction for which the write lock should be released.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLock.CheckOperationTimeout(XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Checks if the operation timed out, by controlling its timeout date. If this is the case, the
            operation is removed from the list of waiting operations and a XcoOperationTimeoutException
            is thrown.
            </summary>
      <param name="op">The operation to be checked.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLock.AddWaitingOperation(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp,System.Boolean)">
      <summary>
            Creates a new wait info object and adds it to the list of waiting operations.
            </summary>
      <param name="t">The Transaction for which a lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <param name="write">true for a write lock, false for a read lock</param>
      <returns>The created EntryLockWaitInfo that holds the information if the lock can be set or not.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLock.RemoveWaitingOperation(XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Removes an operation from the list of waiting operations.
            </summary>
      <param name="op">The operation to be removed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLock.ReadLocksChanged">
      <summary>
            Called by Set/ReleaseReadLock methods whenever the read locks changed. All waiting
            operations are checked, if they can be woken up.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLock.WriteLockChanged">
      <summary>
            Called by Set/ReleaseWriteLock methods whenever the read locks changed. All waiting
            operations are checked, if they can be woken up.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLock.RemoveWaitingEntryLock(XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLockWaitInfo)">
      <summary>
            Removes a wait object from the list of operations waiting for a lock on this IEntry.
            This is for situations when the wait is removed by release of a container lock.
            </summary>
      <param name="waitInfo">The wait object to be removed.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLock">
      <summary>
            Class that handles the locking of the complete Container in Entry level locking mode.
            Locking the complete Container in this mode is needed in special situations, like when
            reading the entry count from the container, which needs a container read lock.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLock.#ctor(XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo)">
      <summary>
            Creates a new ContainerLock.
            </summary>
      <param name="lockInfo">LockInfo handled by the EntryLevelLockManager that contains all information about the current lock status of the Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLock.SetReadLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Tries to set a read lock for this Transaction. Locking is always done with the root transaction 
            (otherwise children of the same transaction could lock themselves). If the lock cannot be set,
            the operation is written to the wait container.
            </summary>
      <param name="t">The Transaction for which the read lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLock.SetWriteLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Tries to set a write lock for this Transaction. Locking is always done with the root transaction 
            (otherwise children of the same transaction could lock themselves). If the lock cannot be set,
            the operation is written to the wait container.
            </summary>
      <param name="t">The Transaction for which the write lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLock.ReleaseReadLock(XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Releases a read lock for this Transaction (its root Transaction).
            </summary>
      <param name="t">The Transaction for which the read lock should be released.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLock.ReleaseWriteLock(XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Releases a write lock for this Transaction (its root Transaction).
            </summary>
      <param name="t">The Transaction for which the write lock should be released.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.ContainerLock.CheckOperationTimeout(XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Checks if the operation timed out, by controlling its timeout date. If this is the case, the
            operation is removed from the list of waiting operations and a XcoOperationTimeoutException
            is thrown.
            </summary>
      <param name="op">The operation to be checked.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLockWaitInfo">
      <summary>
            Holds information for a single operation that is waiting for a container lock, when
            container level locking is used.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLockWaitInfo.#ctor(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp,System.Boolean)">
      <summary>
            Creates a new ContainerLockWaitInfo.
            </summary>
      <param name="t">The Transaction for which the lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <param name="write">true for a write lock, false for a read lock</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLockWaitInfo.OtherLocksSet">
      <summary>
            Uses the information in this wait object to check if there are (still) other locks set, 
            and because of that the lock for this operation cannot be set.
            </summary>
      <returns>True if there are other locks set.</returns>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLockWaitInfo.Op">
      <summary>
            The Transaction for which the lock should be set.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLockWaitInfo.Transaction">
      <summary>
            The operation that needs the lock.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLockWaitInfo.OtherContainerReadLockSet">
      <summary>
            Gets/Sets the information, if another read lock than the own is set for the container.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLockWaitInfo.OtherContainerWriteLockSet">
      <summary>
            Gets/Sets the information, if another write lock than the own is set for the container.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Aspects.Aspect">
      <summary>
            Base class that is implemented by all Aspect classes (currently ContainerAspect and SpaceAspect).
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.Aspect.SetKernel(XcoSpaces.Kernel.XcoKernel)">
      <summary>
            Sets the XcoKernel where this Aspect belongs to. This is automatically set when the Aspect
            is added to a kernel.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.Aspect.SetARef(XcoSpaces.Kernel.Aspects.AspectReference)">
      <summary>
            Sets the AspectReference identifying this Aspect for operations in the kernel.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Aspects.Aspect.OwningKernel">
      <summary>
            The XcoKernel where this Aspect belongs to.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Aspects.Aspect.ARef">
      <summary>
            The AspectReference identifying this Aspect for operations in the kernel.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Aspects.ContainerAspect">
      <summary>
            Base class for Container Aspects. Provides methods for all ContainerIPoints (that only return
            Ok as result in base implementation), that can be overridden in subclasses to provide the
            wanted Aspect functionality.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PreRead(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector}@,System.Int32,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Read. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to read Entries from the Container.</param>
      <param name="retryCount">The number of times this operation has already been rescheduled.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PostRead(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Read. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to read Entries from the Container.</param>
      <param name="entries">The list of Entries that have been read.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PreTake(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector}@,System.Int32,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Take. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to take Entries from the Container.</param>
      <param name="retryCount">The number of times this operation has already been rescheduled.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PostTake(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Take. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to take Entries from the Container.</param>
      <param name="entries">The list of Entries that have been taken.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PreDestroy(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector}@,System.Int32,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Destroy. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to destroy Entries in the Container.</param>
      <param name="retryCount">The number of times this operation has already been rescheduled.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PostDestroy(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Destroy. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to destroy Entries in the Container.</param>
      <param name="entries">The list of Entries that have been destroyed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PreWrite(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,System.Int32,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Write. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="entries">The list of Entries that should be written.</param>
      <param name="retryCount">The number of times this operation has already been rescheduled.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PostWrite(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Write. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="entries">The list of Entries that have been written.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PreShift(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,System.Int32,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Shift. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="entries">The list of Entries that should be written.</param>
      <param name="retryCount">The number of times this operation has already been rescheduled.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PostShift(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Shift. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="entries">The list of Entries that have been written.</param>
      <param name="removedEntries">The list of Entries that have been removed for shift.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PreAddAspect(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Aspects.ContainerAspect@,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Add Aspect. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="aspect">The Aspect that should be added.</param>
      <param name="iPoints">The list of iPoints where the Aspect should be added.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PostAddAspect(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Aspects.ContainerAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Add Aspect. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="aspect">The Aspect that has been added.</param>
      <param name="iPoints">The list of iPoints where the Aspect has been added.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PreRemoveAspect(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Aspects.ContainerAspect@,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Remove Aspect. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="aspect">The Aspect that should be removed.</param>
      <param name="iPoints">The list of iPoints where the Aspect should be removed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PostRemoveAspect(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Aspects.ContainerAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Remove Aspect. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="aspect">The Aspect that has been removed.</param>
      <param name="iPoints">The list of iPoints where the Aspect has been removed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PreContainerDestroy(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Container Destroy. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that should be destroyed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.PostContainerDestroy(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Container Destroy. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container that should be destroyed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.ContainerAspect.GetImplementedIPoints(XcoSpaces.Kernel.Aspects.ContainerAspect)">
      <summary>
            Gets that list of ContainerIPoints for which the corresponding method is implemented by that aspect
            (overridden from the ContainerAspect implementation of this method).
            </summary>
      <param name="aspect">The aspect from which the list of ipoints should be read.</param>
      <returns>The list of ContainerIPoints for this aspect.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Aspects.NotificationAspect">
      <summary>
            ContainerAspect for Notifications (the "Notification1" variant).
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.NotificationAspect.BINDING_NAME">
      <summary>
            The name that is used for aspect instantiation through the Microkernel.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.NotificationAspect.#ctor">
      <summary>
            Creates a new NotificationAspect.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.NotificationAspect.PostAddAspect(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Aspects.ContainerAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Add Aspect. When added to the container, the aspect adds itself to the notification container so 
            the aspect can remove itself when this container is destroyed.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="aspect">The aspect that has been added.</param>
      <param name="iPoints">The list of iPoints where the Aspect has been added.</param>
      <param name="context">The context of this operation.</param>
      <returns>Always Ok as result.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.NotificationAspect.PostRead(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after a read operation. Creates a read notification.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which the operation takes place (the write to the notification Container uses the same Transaction).</param>
      <param name="selectors">The list of Selectors that where used for the read operation.</param>
      <param name="entries">The Entries that have been read.</param>
      <param name="context">The context of this operation.</param>
      <returns>Always Ok as result.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.NotificationAspect.PostTake(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after a take operation. Creates a take notification.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which the operation takes place (the write to the notification Container uses the same Transaction).</param>
      <param name="selectors">The list of Selectors that where used for the take operation.</param>
      <param name="entries">The Entries that have been taken.</param>
      <param name="context">The context of this operation.</param>
      <returns>Always Ok as result.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.NotificationAspect.PostDestroy(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after a destroy operation. Creates a destroy notification.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which the operation takes place (the write to the notification Container uses the same Transaction).</param>
      <param name="selectors">The list of Selectors that where used for the destroy operation.</param>
      <param name="entries">The Entries that have been destroyed.</param>
      <param name="context">The context of this operation.</param>
      <returns>Always Ok as result.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.NotificationAspect.PostWrite(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after a write operation. Creates a write notification.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which the operation takes place (the write to the notification Container uses the same Transaction).</param>
      <param name="entries">The list of Entries that have been written.</param>
      <param name="context">The context of this operation.</param>
      <returns>Always Ok as result.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.NotificationAspect.PostShift(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after a shift operation. Creates a shift notification.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which the operation takes place (the write to the notification Container uses the same Transaction).</param>
      <param name="entries">The list of Entries that have been written.</param>
      <param name="removedEntries">The list of Entries that have been removed (shifted out).</param>
      <param name="context">The context of this operation.</param>
      <returns>Always Ok as result.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.NotificationAspect.PostContainerDestroy(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Container Destroy. Destroys the Notification Container, that is also no longer
            needed if this Container is destroyed.
            </summary>
      <param name="cref">Reference to the Container that is destroyed.</param>
      <param name="context">The context of this operation.</param>
      <returns>Always Ok as result.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.NotificationAspect.CreateReadNotification(XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.ReadOperation,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Creates a read notification by use of a ReadNotify object and writes it to the notification
            Container. An event is created to wake up waiting Take operations in the notification container.
            </summary>
      <param name="t">The Transaction in which the operation takes place (the write to the notification Container uses the same Transaction).</param>
      <param name="entries">The list of Entries that have been read.</param>
      <param name="op">The read operation that has been performed.</param>
      <param name="context">The context of this operation.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.NotificationAspect.CreateWriteNotification(XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.WriteOperation,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Creates a write notification by use of a WriteNotify object and writes it to the notification
            Container. An event is created to wake up waiting Take operations in the notification container.
            </summary>
      <param name="t">The Transaction in which the operation takes place (the write to the notification Container uses the same Transaction).</param>
      <param name="entries">The list of Entries that have been written.</param>
      <param name="op">The write operation that has been performed.</param>
      <param name="context">The context of this operation.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.NotificationAspect.DestroyNotification">
      <summary>
            Removes the NotificationAspect from the Container.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.RequestRead">
      <summary>
            Request message (request) for reading entries from a container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestRead.#ctor(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Int32,XcoSpaces.Kernel.ReadOperation,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Creates a new RequestRead message.
            </summary>
      <param name="cref">The reference to the Container that is the target of the operation.</param>
      <param name="tref">Reference to the Transaction in which this operation takes places, or null if an implicit Transaction should be used.</param>
      <param name="timeout">The timeout of the operation in milliseconds. Use System.Threading.Timeout.Infinite for infinite Timeout.</param>
      <param name="operation">The type of read operation that should be performed.</param>
      <param name="selectors">The list that defines which Entries should be read from the Container.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestRead.Operation">
      <summary>
            The type of read operation that should be performed.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestRead.Selectors">
      <summary>
            The list that defines which Entries should be read from the Container.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.RequestMessage">
      <summary>
            Base class for all request messages that are sent to the core.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestMessage.#ctor(XcoSpaces.Kernel.Messages.RequestMessageContent)">
      <summary>
            Creates a new RequestMessage.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestMessage.SerializeContent">
      <summary>
            Serializes the content of this message.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestMessage.DeserializeContent">
      <summary>
            Deserializes the content of this message.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestMessage.Timestamp">
      <summary>
            The time when the RequestMessage was received by the core. Used for timeout calculation
            in operations that can have a timeout.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestMessage.Content">
      <summary>
            The content of this message. Or null, if the content is currently serialized.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.RequestAddAspect">
      <summary>
            Request message (request) for adding and removing Aspects.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestAddAspect.#ctor(System.Collections.IList,XcoSpaces.Kernel.ContainerReference)">
      <summary>
            Creates a new RequestAddAspect message.
            </summary>
      <param name="iPoints">The list of iPoint where the Aspect should be added/removed.</param>
      <param name="cref">Reference to the Container where the Aspect should be added (only needed with a ContainerAspect).</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestAddAspect.IPoints">
      <summary>
            The list of iPoint where the Aspect should be added.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestAddAspect.CRef">
      <summary>
            Reference to the Container where the Aspect should be added (only needed with a ContainerAspect).
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.RequestRemoveAspect">
      <summary>
            Request message (request) for adding and removing Aspects.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestRemoveAspect.#ctor(XcoSpaces.Kernel.Aspects.AspectReference,System.Collections.IList,XcoSpaces.Kernel.ContainerReference)">
      <summary>
            Creates a new RequestRemoveAspect message.
            </summary>
      <param name="aref">Reference to the Aspect that should be removed.</param>
      <param name="iPoints">The list of iPoint where the Aspect should be added/removed.</param>
      <param name="cref">Reference to the Container where the Aspect should be added (only needed with a ContainerAspect).</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestRemoveAspect.ARef">
      <summary>
            Reference to the Aspect that should be removed.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestRemoveAspect.IPoints">
      <summary>
            The list of iPoint where the Aspect should be added.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestRemoveAspect.CRef">
      <summary>
            Reference to the Container where the Aspect should be added (only needed with a ContainerAspect).
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Aspects.ContainerIPoint">
      <summary>
            Possible insertion points for container aspects.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PreRead">
      <summary>
            Before Read operation.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PostRead">
      <summary>
            After Read operation.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PreTake">
      <summary>
            Before Take operation.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PostTake">
      <summary>
            After Take operation.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PreDestroy">
      <summary>
            Before Destroy operation.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PostDestroy">
      <summary>
            After Destroy operation.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PreWrite">
      <summary>
            Before Write operation.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PostWrite">
      <summary>
            After Write operation.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PreShift">
      <summary>
            Before Shift operation.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PostShift">
      <summary>
            After Shift operation.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PreAddAspect">
      <summary>
            Before Add Aspect.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PostAddAspect">
      <summary>
            After Add Aspect.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PreRemoveAspect">
      <summary>
            Before Remove Aspect.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PostRemoveAspect">
      <summary>
            After Remove Aspect.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PreContainerDestroy">
      <summary>
            Before this Container is Destroyed.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.ContainerIPoint.PostContainerDestroy">
      <summary>
            After this Container is Destroyed.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.AspectManager">
      <summary>
            Manages all aspects in the kernel. Stores for all aspects to which containers and ipoints they are added
            and provides methods for adding and removing aspects for all different possibilities of adding/removing.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.AspectManager.#ctor(XcoSpaces.Kernel.Core.CoreData)">
      <summary>
            Creates a new AspectManager.
            </summary>
      <param name="coreData">The internal kernel data structures.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.AspectManager.AddContainerAspect(XcoSpaces.Kernel.Aspects.ContainerAspect,XcoSpaces.Kernel.ContainerReference,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Adds an aspect to a container. The aspect can either be a new one or one that has already been added to other containers and/or ipoints. 
            Adding an aspect in this way is only possible from the local kernel.
            </summary>
      <param name="aspect">The aspect to be added.</param>
      <param name="cref">The container where the aspect should be added.</param>
      <param name="ipoints">The list of ipoints where the aspect should be added in the given container.</param>
      <param name="operationContext">The context of the current operation.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.AspectManager.AddContainerAspect(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},XcoSpaces.Kernel.ContainerReference,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Adds an aspect to a container. The aspect is instantiated from the given type and properties by using the microkernel's DynamicBinder.
            This method is suitable for adding aspects from a remote space.
            </summary>
      <param name="aspectType">The type of the aspect that should be added.</param>
      <param name="properties">The list of properties for instantiating the aspect.</param>
      <param name="cref">The container where the aspect should be added.</param>
      <param name="ipoints">The list of ipoints where the aspect should be added in the given container.</param>
      <param name="operationContext">The context of the current operation.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.AspectManager.AddContainerAspect(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},XcoSpaces.Kernel.ContainerReference,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Adds an aspect to a container. The aspect is instantiated from the given name and properties by using the microkernel's DynamicBinder.
            The name must be configured in the DynamicBinder, otherwise an exception will be thrown. This method is suitable for adding aspects 
            from a remote space.
            </summary>
      <param name="aspectName">The name of the aspect that should be added.</param>
      <param name="properties">The list of properties for instantiating the aspect.</param>
      <param name="cref">The container where the aspect should be added.</param>
      <param name="ipoints">The list of ipoints where the aspect should be added in the given container.</param>
      <param name="operationContext">The context of the current operation.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.AspectManager.AddSpaceAspect(XcoSpaces.Kernel.Aspects.SpaceAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.SpaceIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Adds an aspect to the local space. The aspect can either be a new one or one that has already been added to other ipoints. 
            Adding an aspect in this way is only possible from the local kernel.
            </summary>
      <param name="aspect">The aspect to be added.</param>
      <param name="ipoints">The list of space ipoints where the aspect should be added.</param>
      <param name="operationContext">The context of the current operation.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.AspectManager.AddSpaceAspect(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.SpaceIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Adds an aspect to the local space. The aspect is instantiated from the given type and properties by using the microkernel's DynamicBinder.
            This method is suitable for adding aspects from a remote space.
            </summary>
      <param name="aspectType">The type of the aspect that should be added.</param>
      <param name="properties">The list of properties for instantiating the aspect.</param>
      <param name="ipoints">The list of space ipoints where the aspect should be added.</param>
      <param name="operationContext">The context of the current operation.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.AspectManager.AddSpaceAspect(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.SpaceIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Adds an aspect to the local space. The aspect is instantiated from the given name and properties by using the microkernel's DynamicBinder.
            The name must be configured in the DynamicBinder, otherwise an exception will be thrown. This method is suitable for adding aspects 
            from a remote space.
            </summary>
      <param name="aspectName">The name of the aspect that should be added.</param>
      <param name="properties">The list of properties for instantiating the aspect.</param>
      <param name="ipoints">The list of space ipoints where the aspect should be added.</param>
      <param name="operationContext">The context of the current operation.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.AspectManager.RemoveContainerAspect(XcoSpaces.Kernel.Aspects.AspectReference,XcoSpaces.Kernel.ContainerReference,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Removes a container aspect from a given container and list of ipoints.
            </summary>
      <param name="aref">The reference to the container aspect that should be removed.</param>
      <param name="cref">The container from which the aspect should be removed.</param>
      <param name="ipoints">The list of ipoints from which the aspect should be removed.</param>
      <param name="operationContext">The context of the current operation.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.AspectManager.RemoveContainerAspect(XcoSpaces.Kernel.Aspects.AspectReference,XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Removes a container aspect from all ipoints of a given container.
            </summary>
      <param name="aref">The reference to the container aspect that should be removed.</param>
      <param name="cref">The container from which the aspect should be removed.</param>
      <param name="operationContext">The context of the current operation.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.AspectManager.RemoveSpaceAspect(XcoSpaces.Kernel.Aspects.AspectReference,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.SpaceIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Removes a space aspect from the given list of ipoints.
            </summary>
      <param name="aref">The reference to the space aspect that should be removed.</param>
      <param name="ipoints">The list of ipoints from which the aspect should be removed.</param>
      <param name="operationContext">The context of the current operation.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.AspectManager.RemoveAspect(XcoSpaces.Kernel.Aspects.AspectReference,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Completely removes an aspect (either container or space aspect) from the space.
            </summary>
      <param name="aref">The reference to the aspect that should be removed.</param>
      <param name="operationContext">The context of the current operation.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.AspectManager.RemoveContainer(XcoSpaces.Kernel.ContainerReference)">
      <summary>
            To be called when a container is destroyed. All references that aspects have to the given
            container are removed.
            </summary>
      <param name="cref">The container that has been destroyed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.AspectManager.SetSpaceAddress(System.String)">
      <summary>
            Sets the new space address in the references of all Containers. This space address
            will also be used for all Containers that are created in the future.
            </summary>
      <param name="spaceAddress">The address of the local space.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.XcoKernel">
      <summary>
            Main Class to start and access the XcoSpaces Kernel. Provides methods for synchronous communication 
            with embedded and remote spaces.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.CreateContainer(System.String,System.Int32,System.Boolean,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Creates a new Container.
            </summary>
      <param name="address">The address of the kernel in format ip:port where the Container should be created.</param>
      <param name="size">The maximum size of the Container. Use -1 for an unbounded Container.</param>
      <param name="unique">True if the elements in the container should be unique - FUNCTIONALITY NOT YET IMPLEMENTED</param>
      <param name="coordinationTypes">The list of the coordination types for this Container (fifo, lifo, vector, key, ...). A Container must have at least one coordination type.</param>
      <returns>Reference to the new Container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.DestroyContainer(XcoSpaces.Kernel.ContainerReference)">
      <summary>
            Destroys a container.
            </summary>
      <param name="cref">The reference to the Container that should be destroyed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.CreateNamedContainer(System.String,System.String,System.Int32,System.Boolean,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Creates a Container and publishes it with the given name.
            </summary>
      <param name="address">The address of the space where the Container should be created.</param>
      <param name="name">The name of the published Container.</param>
      <param name="size">The maximum size of the Container. Use -1 for an unbounded Container.</param>
      <param name="unique">True if the elements in the container should be unique - FUNCTIONALITY NOT YET IMPLEMENTED</param>
      <param name="coordinationTypes">The list of the coordination types for this Container (fifo, lifo, vector, key, ...)</param>
      <returns>Reference to the new Container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.GetNamedContainer(System.String,System.String)">
      <summary>
            Gets a Reference to the Container that is published under the given name and address. An Exception
            is thrown if the Container cannot be found.
            </summary>
      <param name="address">The address of the space where the Container is published, in the form ip:port.</param>
      <param name="name">The name of the Container.</param>
      <returns>Reference to the Container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.DestroyNamedContainer(System.String,System.String)">
      <summary>
            Destroys the Container that is published under the given name and address.
            </summary>
      <param name="address">The address of the space where the Container is published, in the form ip:port.</param>
      <param name="name">The name of the Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.CreateTransaction(System.String,System.Int32)">
      <summary>
            Creates a new Transaction.
            </summary>
      <param name="address">The address of the space where the Transaction should be created, in the form ip:port.</param>
      <param name="timeout">The time after which the Transaction times out and is automatically rolled back. Use System.Threading.Timeout.Infinite for infinite timeout.</param>
      <returns>Reference to the new Transaction.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.CommitTransaction(XcoSpaces.Kernel.TransactionReference)">
      <summary>
            Commits a Transaction.
            </summary>
      <param name="tref">Reference to the Transaction that should be commited.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.RollbackTransaction(XcoSpaces.Kernel.TransactionReference)">
      <summary>
            Rolls back a Transaction.
            </summary>
      <param name="tref">Reference to the Transaction that should be rolled back.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.Read(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Int32,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Reads Entries from a Container.
            </summary>
      <param name="cref">Reference to the Container where the Entries should be read.</param>
      <param name="tref">Reference to the Transaction in which the operation should be performed, or null if no Transaction should be used.</param>
      <param name="timeout">The timeout of the operation in milliseconds. Use System.Threading.Timeout.Infinite for infinite Timeout.</param>
      <param name="selectors">The list of Selectors by which the Entries are selected from the Container.</param>
      <returns>List of Entries that have been read.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.Take(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Int32,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Takes Entries from a Container, so the Entries are removed from the Container after reading them.
            </summary>
      <param name="cref">Reference to the Container where the Entries should be taken.</param>
      <param name="tref">Reference to the Transaction in which the operation should be performed, or null if no Transaction should be used.</param>
      <param name="timeout">The timeout of the operation in milliseconds. Use System.Threading.Timeout.Infinite for infinite Timeout.</param>
      <param name="selectors">The list of Selectors by which the Entries are selected from the Container.</param>
      <returns>List of the Entries that have been taken.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.Destroy(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Int32,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Destroys Entries in a Container (the selected Entries are removed from the Container).
            </summary>
      <param name="cref">Reference to the Container where the Entries should be destroyed.</param>
      <param name="tref">Reference to the Transaction in which the operation should be performed, or null if no Transaction should be used.</param>
      <param name="timeout">The timeout of the operation in milliseconds. Use System.Threading.Timeout.Infinite for infinite Timeout.</param>
      <param name="selectors">The list of Selectors by which the Entries are selected from the Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.Write(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Int32,XcoSpaces.Kernel.IEntry[])">
      <summary>
            Writes Entries to a Container.
            </summary>
      <param name="cref">Reference to the Container where the Entries should be written.</param>
      <param name="tref">Reference to the Transaction in which the Operation should be performed, or null if no Transaction should be used.</param>
      <param name="timeout">The timeout of the operation in milliseconds. Use System.Threading.Timeout.Infinite for infinite Timeout.</param>
      <param name="entries">The Entries that should be written.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.Shift(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Int32,XcoSpaces.Kernel.IEntry[])">
      <summary>
            Shifts Entries to a Container, that means the Entries will overwrite other Entries if there is
            not enough free space in the container.
            </summary>
      <param name="cref">Reference to the Container where the Entries should be written.</param>
      <param name="tref">Reference to the Transaction in which the Operation should be performed, or null if no Transaction should be used.</param>
      <param name="timeout">The timeout of the operation in milliseconds. Use System.Threading.Timeout.Infinite for infinite Timeout.</param>
      <param name="entries">The Entries that should be written.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.GetProperty(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Int32,XcoSpaces.Kernel.ContainerProperty)">
      <summary>
            Reads a property from a Container.
            </summary>
      <param name="cref">Reference to the Container where the property should be read.</param>
      <param name="tref">Reference to the Transaction in which the operation should be performed, or null if no Transaction should be used. The Transaction is only of use when the property in question is not constant and therefore requires a lock on the Container to be read.</param>
      <param name="timeout">The timeout of the operation in milliseconds. Use System.Threading.Timeout.Infinite for infinite Timeout.</param>
      <param name="prop">The property that should be read.</param>
      <returns>The property that has been read.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.GetProperty(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Int32,XcoSpaces.Kernel.Selectors.Selector,System.String)">
      <summary>
            Reads a property from the Coordinator of a Container.
            </summary>
      <param name="cref">Reference to the Container where the property should be read.</param>
      <param name="tref">Reference to the Transaction in which the operation should be performed, or null if no Transaction should be used. The Transaction is only of use when the property in question is not constant and therefore requires a lock on the Container to be read.</param>
      <param name="timeout">The timeout of the operation in milliseconds. Use System.Threading.Timeout.Infinite for infinite Timeout.</param>
      <param name="selector">The Selector that defines from which Coordinator of the Container the property should be read.</param>
      <param name="propertyName">The name of the property that should be read.</param>
      <returns>The property that has been read.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.GetProperty(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Int32,System.String)">
      <summary>
            Reads a property from a Container (its Meta Container).
            </summary>
      <param name="cref">Reference to the Container where the property should be read.</param>
      <param name="tref">Reference to the Transaction in which the operation should be performed, or null if no Transaction should be used.</param>
      <param name="timeout">The timeout of the operation in milliseconds. Use System.Threading.Timeout.Infinite for infinite Timeout.</param>
      <param name="propertyName">The name of the property that should be read.</param>
      <returns>The property that has been read.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.SetProperty(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Int32,System.String,System.Object)">
      <summary>
            Writes a property to a Container (its Meta Container).
            </summary>
      <param name="cref">Reference to the Container where the property should be written.</param>
      <param name="tref">Reference to the Transaction in which the operation should be performed, or null if no Transaction should be used.</param>
      <param name="timeout">The timeout of the operation in milliseconds. Use System.Threading.Timeout.Infinite for infinite Timeout.</param>
      <param name="propertyName">The name of the property that should be written.</param>
      <param name="propertyValue">The property value that should be written.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.AddContainerAspect(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Aspects.ContainerAspect)">
      <summary>
            Adds a ContainerAspect to a Container in the embedded Space. An Exception is thrown if the Container
            is from a remote Space.
            </summary>
      <param name="cref">Reference to the Container where the Aspect should be added.</param>
      <param name="aspect">The Aspect that should be added.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.AddContainerAspect(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Aspects.ContainerAspect,XcoSpaces.Kernel.Aspects.ContainerIPoint[])">
      <summary>
            Adds a ContainerAspect to certain insertion points of a Container in the embedded Space. An Exception is thrown 
            if the Container is from a remote Space.
            </summary>
      <param name="cref">Reference to the Container where the Aspect should be added.</param>
      <param name="aspect">The Aspect that should be added.</param>
      <param name="iPoints">The insertion points where the Aspect should be added in the Container.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.AddContainerAspect(XcoSpaces.Kernel.ContainerReference,System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Adds a ContainerAspect to the given Container. This method can be used to add aspects to containers in a remote
            space. The given type is instantiated at the remote space. It must provide an empty default constructor. Properties
            can be added to the aspect by using the given list. These properties will be automatically injected to fields in
            the aspect instance that are usinge the XcoSpaces.Kernel.Microkernel.PropertyAttribute attribute.
            </summary>
      <param name="cref">Reference to the Container where the Aspect should be added.</param>
      <param name="aspectType">The type of the aspect that should be added.</param>
      <param name="properties">The list of properties for instantiating the aspect.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.AddContainerAspect(XcoSpaces.Kernel.ContainerReference,System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},XcoSpaces.Kernel.Aspects.ContainerIPoint[])">
      <summary>
            Adds a ContainerAspect to certain ipoints in the given Container. This method can be used to add aspects to containers 
            in a remote space. The given type is instantiated at the remote space. It must provide an empty default constructor. 
            Properties can be added to the aspect by using the given list. These properties will be automatically injected to fields 
            in the aspect instance that are usinge the XcoSpaces.Kernel.Microkernel.PropertyAttribute attribute.
            </summary>
      <param name="cref">Reference to the Container where the Aspect should be added.</param>
      <param name="aspectType">The type of the aspect that should be added.</param>
      <param name="properties">The list of properties for instantiating the aspect.</param>
      <param name="iPoints">The insertion points where the Aspect should be added in the Container.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.AddContainerAspect(XcoSpaces.Kernel.ContainerReference,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},XcoSpaces.Kernel.Aspects.ContainerIPoint[])">
      <summary>
            Adds a ContainerAspect to certain ipoints in the given Container. This method can be used to add aspects to containers 
            in a remote space. The given name must refer to a type that is either defined in the XcoSpaces binding configuration or
            has been added manually to the named bindings defined in the XcoSpaces.Kernel.MicroKernel.DynamicBinder. The referenced 
            type must provide an empty default constructor. Properties can be added to the aspect by using the given list. These 
            properties will be automatically injected to fields  in the aspect instance that are usinge the
            XcoSpaces.Kernel.Microkernel.PropertyAttribute attribute.
            </summary>
      <param name="cref">Reference to the Container where the Aspect should be added.</param>
      <param name="aspectName">The predefined name of the aspect that should be added.</param>
      <param name="properties">The list of properties for instantiating the aspect.</param>
      <param name="iPoints">The insertion points where the Aspect should be added in the Container.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.RemoveContainerAspect(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Aspects.AspectReference)">
      <summary>
            Removes a ContainerAspect from a certain Container.
            </summary>
      <param name="cref">Reference to the Container where the Aspect should be removed.</param>
      <param name="aref">Reference to the aspect that should be removed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.RemoveContainerAspect(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Aspects.AspectReference,XcoSpaces.Kernel.Aspects.ContainerIPoint[])">
      <summary>
            Removes a ContainerAspect from certain insertion points of a Container in the embedded Space. An Exception is thrown 
            if the  Container is from a remote Space.
            </summary>
      <param name="cref">Reference to the Container where the Aspect should be removed.</param>
      <param name="aref">Reference to the aspect that should be removed.</param>
      <param name="iPoints">The insertion points where the Aspect should be removed from the Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.AddSpaceAspect(XcoSpaces.Kernel.Aspects.SpaceAspect)">
      <summary>
            Adds a SpaceAspect to the embedded Space.
            </summary>
      <param name="aspect">The Aspect that should be added.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.AddSpaceAspect(XcoSpaces.Kernel.Aspects.SpaceAspect,XcoSpaces.Kernel.Aspects.SpaceIPoint[])">
      <summary>
            Adds a SpaceAspect to certain insertion points in the embedded Space.
            </summary>
      <param name="aspect">The Aspect that should be added.</param>
      <param name="iPoints">The insertion points where the Aspect should be added in the space.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.AddSpaceAspect(System.String,System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Adds a SpaceAspect to the space at the given address. This method can be used to add aspects to a remote
            spaces. The given type is instantiated at the remote space. It must provide an empty default constructor. Properties
            can be added to the aspect by using the given list. These properties will be automatically injected to fields in
            the aspect instance that are usinge the XcoSpaces.Kernel.Microkernel.PropertyAttribute attribute.
            </summary>
      <param name="address">The address of the space where the aspect should be added.</param>
      <param name="aspectType">The type of the aspect that should be added.</param>
      <param name="properties">The list of properties for instantiating the aspect.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.AddSpaceAspect(System.String,System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},XcoSpaces.Kernel.Aspects.SpaceIPoint[])">
      <summary>
            Adds a SpaceAspect to certain ipoints of the space at the given address. This method can be used to add aspects to a remote
            spaces. The given type is instantiated at the remote space. It must provide an empty default constructor. Properties
            can be added to the aspect by using the given list. These properties will be automatically injected to fields in
            the aspect instance that are usinge the XcoSpaces.Kernel.Microkernel.PropertyAttribute attribute.
            </summary>
      <param name="address">The address of the space where the aspect should be added.</param>
      <param name="aspectType">The type of the aspect that should be added.</param>
      <param name="properties">The list of properties for instantiating the aspect.</param>
      <param name="iPoints">The insertion points where the Aspect should be added.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.AddSpaceAspect(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},XcoSpaces.Kernel.Aspects.SpaceIPoint[])">
      <summary>
            Adds a SpaceAspect to certain ipoints in space at the given address. This method can be used to add aspects to a 
            remote space. The given name must refer to a type that is either defined in the XcoSpaces binding configuration or
            has been added manually to the named bindings defined in the XcoSpaces.Kernel.MicroKernel.DynamicBinder. The referenced 
            type must provide an empty default constructor. Properties can be added to the aspect by using the given list. These 
            properties will be automatically injected to fields  in the aspect instance that are usinge the
            XcoSpaces.Kernel.Microkernel.PropertyAttribute attribute.
            </summary>
      <param name="address">The address of the space where the aspect should be added.</param>
      <param name="aspectName">The predefined name of the aspect that should be added.</param>
      <param name="properties">The list of properties for instantiating the aspect.</param>
      <param name="iPoints">The insertion points where the Aspect should be added.</param>
      <returns>A reference to the aspect that has been added.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.RemoveSpaceAspect(XcoSpaces.Kernel.Aspects.AspectReference,XcoSpaces.Kernel.Aspects.SpaceIPoint[])">
      <summary>
            Removes a SpaceAspect from the embedded Space.
            </summary>
      <param name="aref">Reference to the aspect that should be removed.</param>
      <param name="iPoints">The insertion points where the Aspect should be removed from the space.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.RemoveAspect(XcoSpaces.Kernel.Aspects.AspectReference)">
      <summary>
            Removes an Aspect from the embedded Space.
            </summary>
      <param name="aref">Reference to the aspect that should be removed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.CreateReadNotification(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,XcoSpaces.Kernel.ReadOperation[])">
      <summary>
            Creates a notification, that notifies the user when Entries have been read from the Container.
            </summary>
      <param name="cref">Reference to the Container the notification should be created on.</param>
      <param name="tref">Reference to a Transaction, if the notification should run within a Transaction, or null (in which case the Notification will only notify about operations after they have been committed).</param>
      <param name="operations">List of read operations for which a Notification should be thrown.</param>
      <returns>Notification object that waits for incoming notifications and can inform the user over a callback method.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.CreateWriteNotification(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,XcoSpaces.Kernel.WriteOperation[])">
      <summary>
            Creates a notification, that notifies the user when Entries have been written to the Container.
            </summary>
      <param name="cref">Reference to the Container the notification should be created on.</param>
      <param name="tref">Reference to a Transaction, if the notification should run within a Transaction, or null (in which case the Notification will only notify about operations after they have been committed).</param>
      <param name="operations">List of write operations for which a Notification should be thrown.</param>
      <returns>Notification object that waits for incoming notifications and can inform the user over a callback method.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.DisposeContainer(XcoSpaces.Kernel.ContainerReference)">
      <summary>
            Disposes the local resources of a remote Container. (Currently does nothing.)
            </summary>
      <param name="cref">The reference to the Container that should be disposed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.RemoveTransactionFromNotifications(XcoSpaces.Kernel.TransactionReference)">
      <summary>
            Removes the transaction from all notifications. This is used when a Transaction is committed,
            so there are no notifications remaining that use this transaction.
            </summary>
      <param name="tref">Reference to the transaction.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.CheckAddress(System.String)">
      <summary>
            Checks the address and converts it to lower case letters. 
            </summary>
      <param name="address">The address to check.</param>
      <returns>The address in lower case letters, or null if the given address was null.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.GetLookupCRef(System.String)">
      <summary>
            Creates a reference to the lookup container at a remote space.
            </summary>
      <param name="remoteAddress">The address of the remote space.</param>
      <returns>Reference to the lookup container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.ReleaseCommunicationConnections">
      <summary>
            Release current active connections.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.Close">
      <summary>
            Shuts down the Kernel and stops the server for remote communication if running. All communication 
            currently going on with the Kernel will result in a XcoOperationTimeoutException.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.Dispose">
      <summary>
            Cleans up all resources by calling Close().
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.AddService(XcoSpaces.Services.IXcoService)">
      <summary>
            Adds a service to the XcoKernel. Only services of type IXcoCommunicationService
            are supported by now.
            </summary>
      <param name="service">The service to be added.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.Start(System.Int32)">
      <summary>
            Starts the server for remote communication, so that other peers can communicate with
            the local kernel, and the local peer can communicate with other kernels.
            If no communication service has been added, an XcoWCFCommunicationService will be used
            by default. If the port is 0, a random port number between 8000 and 9000 will be generated.
            </summary>
      <param name="port">The local port on which the server should be running.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.Start">
      <summary>
            Starts the server for remote communication, so that other peers can communicate with
            the local kernel, and the local peer can communicate with other kernels.
            If no communication service has been added, a XcoCommunicationException will be thrown.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.XcoKernel.Stop">
      <summary>
            Stops the server for remote communication, if it is running.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.XCore">
      <summary>
            The Class that represents the XCore Server. Manages all components of the XCore.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.XCore.ProcessRequestMethod">
      <summary>
            Delegate that represants a method call to process a RequestMessage object.
            </summary>
      <param name="msg">The RequestMessage to be processed.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.XCore.ProcessResponseMethod">
      <summary>
            Delegate that represants a method call to process an ResponseMessage object.
            </summary>
      <param name="msg">The ResponseMessage to be processed.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.XCore.GetKernelMethod">
      <summary>
            Delegate to get the reference to the local XcoKernel.
            </summary>
      <returns>Local XcoKernel</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.XCore.Shutdown">
      <summary>
            Shuts down the XCore Server.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.XCore.Process(XcoSpaces.Kernel.Messages.RequestMessage)">
      <summary>
            Processes a RequestMessage. The remote address of the messages indicates if it should be 
            processed by the embedded core, or be sent to a remote core (embedded if remote address is null).
            A XcoRemoteException is thrown if a remote message should be sent, but the server for remote
            communication has not been started.
            </summary>
      <param name="message">The message to be processed</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.ResponseRead">
      <summary>
            Response message (response) for reading Entries from a Container.
            NOTE: This is subject to change, because read should be answered with a write request!
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseRead.#ctor(XcoSpaces.Kernel.ReadOperation,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry})">
      <summary>
            Creates a new ResponseRead message.
            </summary>
      <param name="operation">The type of read operation that has been performed.</param>
      <param name="entries">The list of Entries that have been read from the Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseRead.#ctor(XcoSpaces.Exceptions.XcoException,XcoSpaces.Kernel.ReadOperation)">
      <summary>
            Creates a new ResponseRead message.
            </summary>
      <param name="error">Error that occured while processing the corresponding RequestMessage.</param>
      <param name="operation">The type of read operation that has been performed / should have been performed.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.ResponseRead.Operation">
      <summary>
            The type of read operation that has been performed.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.ResponseRead.Entries">
      <summary>
            The list of Entries that have been read from the Container.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.RequestAddAspectRemote">
      <summary>
            Request message (request) for adding and removing Aspects.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestAddAspectRemote.#ctor(System.Type,System.Collections.IList,XcoSpaces.Kernel.ContainerReference,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Creates a new RequestAddAspectRemote message.
            </summary>
      <param name="aspectType">The type of the Aspect that should be added.</param>
      <param name="iPoints">The list of iPoint where the Aspect should be added.</param>
      <param name="cref">Reference to the Container where the Aspect should be added (only needed with a ContainerAspect).</param>
      <param name="properties">The properties used for instantiation of the aspect.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestAddAspectRemote.#ctor(System.String,System.Collections.IList,XcoSpaces.Kernel.ContainerReference,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Creates a new RequestAddAspectRemote message.
            </summary>
      <param name="aspectName">The name of the Aspect that should be added (must be defined as binding in the microkernel, otherwise it cannot be instantiated).</param>
      <param name="iPoints">The list of iPoint where the Aspect should be added/removed.</param>
      <param name="cref">Reference to the Container where the Aspect should be added (only needed with a ContainerAspect).</param>
      <param name="properties">The properties used for instantiation of the aspect.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestAddAspectRemote.AspectType">
      <summary>
            The type of the aspect that should be added (either type or name are needed).
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestAddAspectRemote.AspectName">
      <summary>
            The name of the aspect that should be added (either type or name are needed).
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestAddAspectRemote.Properties">
      <summary>
            The properties used for instantiation of the aspect.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Locking.LockType">
      <summary>
            Enum that holds information about the type of a lock. Only for information
            purposes.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Container.Locking.LockType.Read">
      <summary>
            A read lock.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Container.Locking.LockType.Write">
      <summary>
            A write lock.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLevelLockManager">
      <summary>
            Lock manager for managing the locks of an entry level locked Container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLevelLockManager.#ctor(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Core.CoreContainer{XcoSpaces.Kernel.Core.WaitEvent},XcoSpaces.Kernel.Core.CoreContainer{XcoSpaces.Kernel.Core.WaitRequest})">
      <summary>
            Creates a new EntryLevelLockManager.
            </summary>
      <param name="cref">Reference to the Container that this lock manager is used for.</param>
      <param name="eventContainer">The event container of the core, that receives events to wake up waiting operations.</param>
      <param name="waitContainer">The wait container of the core, that holds waiting operations.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLevelLockManager.SetReadLock(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Sets a read lock for a single entry.
            </summary>
      <param name="e">The entry to be locked.</param>
      <param name="t">The Transaction for which the read lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLevelLockManager.SetWriteLock(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Sets a write lock for a single entry.
            </summary>
      <param name="e">The entry to be locked.</param>
      <param name="t">The Transaction for which the write lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLevelLockManager.SetReadLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Does nothing because locking is done on entry level.
            </summary>
      <param name="t">The Transaction for which the read lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>always true</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLevelLockManager.SetWriteLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Does nothing because locking is done on entry level.
            </summary>
      <param name="t">The Transaction for which the write lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>always true</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLevelLockManager.SetCompleteReadLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Sets a read lock for the complete container, for special situations where locking
            the complete container is even needed in IEntry level locking mode.
            </summary>
      <param name="t">The Transaction for which the read lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLevelLockManager.SetCompleteWriteLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Sets a write lock for the complete container, for special situations where locking
            the complete container is even needed in IEntry level locking mode.
            </summary>
      <param name="t">The Transaction for which the write lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLevelLockManager.RollbackEntryAdd(XcoSpaces.Kernel.Transactions.TransactionLog)">
      <summary>
            Rolls back the Adding of an IEntry (by removing its lock).
            </summary>
      <param name="log">The log containing the entry for which the add is rolled back.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLevelLockManager.CommitEntryRemove(XcoSpaces.Kernel.Transactions.TransactionLog)">
      <summary>
            Commits the removing of an IEntry (by removing its lock).
            </summary>
      <param name="log">The log containing the entry for which the remove is rolled back.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Aspects.SpaceIPoint">
      <summary>
            Possible insertion points for space aspects.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.SpaceIPoint.PreTransactionCreate">
      <summary>
            Before Transaction Create.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.SpaceIPoint.PostTransactionCreate">
      <summary>
            After Transaction Create.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.SpaceIPoint.PreTransactionCommit">
      <summary>
            Before Transaction Commit.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.SpaceIPoint.PostTransactionCommit">
      <summary>
            After Transaction Commit.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.SpaceIPoint.PreTransactionRollback">
      <summary>
            Before Transaction Rollback.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.SpaceIPoint.PostTransactionRollback">
      <summary>
            After Transaction Rollback.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.SpaceIPoint.PreContainerCreate">
      <summary>
            Before Container Create.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.SpaceIPoint.PostContainerCreate">
      <summary>
            After Container Create.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.SpaceIPoint.PreContainerDestroy">
      <summary>
            Before Container Destroy.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.SpaceIPoint.PostContainerDestroy">
      <summary>
            After Container Destroy.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.SpaceIPoint.PreAddAspect">
      <summary>
            Before Add Space Aspect
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.SpaceIPoint.PostAddAspect">
      <summary>
            After Add Space Aspect
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.SpaceIPoint.PreRemoveAspect">
      <summary>
            Before Remove Space Aspect
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.SpaceIPoint.PostRemoveAspect">
      <summary>
            After Remove Space Aspect
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.SpaceIPoint.PreSpaceShutdown">
      <summary>
            Before Space Shutdown
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.SpaceAspectManager">
      <summary>
            Manages a list of Aspects per SpaceIPoint for the Space, and provides Methods
            to call the Aspects for every SpaceIPoint.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.#ctor">
      <summary>
            Creates a new SpaceAspectManager.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.AddAspect(XcoSpaces.Kernel.Aspects.SpaceAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.SpaceIPoint})">
      <summary>
            Adds an Aspect to the Space.
            </summary>
      <param name="aspect">The Aspect that should be added.</param>
      <param name="iPoints">The list of SpaceIPoints where the Aspect should be added.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.RemoveAspect(XcoSpaces.Kernel.Aspects.SpaceAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.SpaceIPoint})">
      <summary>
            Removes an Aspect from the Space.
            </summary>
      <param name="aspect">The Aspect that should be removed.</param>
      <param name="iPoints">The list of SpaceIPoints where the Aspect should be removed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.CreateException(System.Exception,XcoSpaces.Kernel.Aspects.SpaceIPoint,System.Int32)">
      <summary>
            Creates an XcoAspectException if the given Exception is not of this type, or else gives the same
            Exception back. This method is used to guarantee that an Aspect always gives back an Exception
            of type XcoAspectException.
            </summary>
      <param name="ex">The Exception that was thrown.</param>
      <param name="iPoint">The ContainerIPoint where the Exception occured.</param>
      <param name="index">The index of the Aspect in the list of Aspects for this iPoint, that has thrown the Exception.</param>
      <returns>An XcoAspectException for the error that occured.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.PreTransactionCreate(XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Transaction Create. Calls all Aspects that have been added to the 
            PreTransactionCreate iPoint. The operation is cancelled as soon as an Aspects 
            returns another result than Ok, and this result is returned.
            </summary>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.PostTransactionCreate(XcoSpaces.Kernel.TransactionReference@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Transaction Create. Calls all Aspects that have been added to the 
            PostTransactionCreate iPoint. The operation is cancelled as soon as an Aspects 
            returns another result than Ok, and this result is returned.
            </summary>
      <param name="tref">The reference of the Transaction that has been created.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.PreTransactionRollback(XcoSpaces.Kernel.TransactionReference@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Transaction Rollback. Calls all Aspects that have been added to the 
            PreTransactionRollback iPoint. The operation is cancelled as soon as an Aspects 
            returns another result than Ok, and this result is returned.
            </summary>
      <param name="tref">The reference ot the Transaction to be rolled back.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.PostTransactionRollback(XcoSpaces.Kernel.TransactionReference,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Transaction Rollback. Calls all Aspects that have been added to the 
            PostTransactionRollback iPoint. The operation is cancelled as soon as an Aspects 
            returns another result than Ok, and this result is returned.
            </summary>
      <param name="tref">The reference ot the Transaction to be rolled back.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.PreContainerCreate(System.Int32@,System.Boolean@,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Container Create. Calls all Aspects that have been added to the 
            PreContainerCreate iPoint. The operation is cancelled as soon as an Aspects 
            returns another result than Ok, and this result is returned.
            </summary>
      <param name="size">The maximum size of the Container, or -1 for an unbounded Container.</param>
      <param name="unique">True if the elements in the container should be unique.</param>
      <param name="coordinationTypes">The list of Selectors that defines which coordination types the container should have.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.PostContainerCreate(System.Int32,System.Boolean,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector},XcoSpaces.Kernel.ContainerReference@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Container Create. Calls all Aspects that have been added to the 
            PostContainerCreate iPoint. The operation is cancelled as soon as an Aspects 
            returns another result than Ok, and this result is returned.
            </summary>
      <param name="size">The maximum size of the Container, or -1 for an unbounded Container.</param>
      <param name="unique">True if the elements in the container should be unique.</param>
      <param name="coordinationTypes">The list of Selectors that defines which coordination types the container should have.</param>
      <param name="cref">The reference to the Container that has been created.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.PreContainerDestroy(XcoSpaces.Kernel.ContainerReference@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Calle before Container Destroy. Calls all Aspects that have been added to the 
            PreContainerDestroy iPoint. The operation is cancelled as soon as an Aspects 
            returns another result than Ok, and this result is returned.
            </summary>
      <param name="cref">Reference to the Container to be destroyed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.PostContainerDestroy(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Container Destroy. Calls all Aspects that have been added to the 
            PostContainerDestroy iPoint. The operation is cancelled as soon as an Aspects 
            returns another result than Ok, and this result is returned.
            </summary>
      <param name="cref">Reference to the Container to be destroyed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.PreAddAspect(XcoSpaces.Kernel.Aspects.SpaceAspect@,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.SpaceIPoint}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Add Aspect. Calls all Aspects that have been added to the 
            PreAddAspect iPoint. The operation is cancelled as soon as an Aspects 
            returns another result than Ok, and this result is returned.
            </summary>
      <param name="aspect">The Aspect that should be added.</param>
      <param name="iPoints">The list of iPoints where the Aspect should be added.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.PostAddAspect(XcoSpaces.Kernel.Aspects.SpaceAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.SpaceIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Add Aspect. Calls all Aspects that have been added to the 
            PostAddAspect iPoint. The operation is cancelled as soon as an Aspects 
            returns another result than Ok, and this result is returned.
            </summary>
      <param name="aspect">The Aspect that has been added.</param>
      <param name="iPoints">The list of iPoints where the Aspect has been added.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.PreRemoveAspect(XcoSpaces.Kernel.Aspects.SpaceAspect@,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.SpaceIPoint}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Remove Aspect. Calls all Aspects that have been added to the 
            PreRemoveAspect iPoint. The operation is cancelled as soon as an Aspects 
            returns another result than Ok, and this result is returned.
            </summary>
      <param name="aspect">The Aspect that should be removed.</param>
      <param name="iPoints">The list of iPoints where the Aspect should be removed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.PostRemoveAspect(XcoSpaces.Kernel.Aspects.SpaceAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.SpaceIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Remove Aspect. Calls all Aspects that have been added to the 
            PostRemoveAspect iPoint. The operation is cancelled as soon as an Aspects 
            returns another result than Ok, and this result is returned.
            </summary>
      <param name="aspect">The Aspect that has been removed.</param>
      <param name="iPoints">The list of iPoints where the Aspect has been removed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.SpaceAspectManager.PreSpaceShutdown(XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Space Shutdown. Calls all Aspects that have been added to the 
            PreSpaceShutdown iPoint. The operation is cancelled as soon as an Aspects 
            returns another result than Ok, and this result is returned.
            </summary>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the called Aspects.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Transactions.TransactionLog">
      <summary>
            A single IEntry in the log of a Transaction, contains every information that is needed
            to roll back the operation for which this log entry has been created.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Transactions.TransactionLog.CommitDelegate">
      <summary>
            Definition of the method that must be implemented for commit operations.
            </summary>
      <param name="log">The log IEntry that should be committed back.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Transactions.TransactionLog.RollbackDelegate">
      <summary>
            Definition of the method that must be implemented for rollback operations.
            </summary>
      <param name="log">The log IEntry that should be rolled back.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.TransactionLog.Commit">
      <summary>
            Performs a commit of the logged operation by calling the commit method that has been defined
            when creating this log entry, if one has been defined.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.TransactionLog.Rollback">
      <summary>
            Performs a rollback of the logged operation by calling the rollback method that has been defined
            when creating this log entry, if one has been defined.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.TransactionLog.ToString">
      <summary>
            Converts the TransactionLog into a String.
            </summary>
      <returns>String representation of the TransactionLog.</returns>
    </member>
    <member name="P:XcoSpaces.Kernel.Transactions.TransactionLog.Type">
      <summary>
            The type of operation that is logged.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Transactions.TransactionLog.Entry">
      <summary>
            The Entry that was the target of the operation.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Entry">
      <summary>
            Entries can be stored in Containers. An Entry holds the stored value (object)
            and a list of Selectors that define how this Entry is coordinated in the Container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Entry.#ctor(System.Object,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Creates a new Entry.
            </summary>
      <param name="value">The value that should be stored.</param>
      <param name="selectors">List of Selectors that define how the Entry is coordinated in the Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Entry.#ctor(System.Object,System.Boolean,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Creates a new Entry.
            </summary>
      <param name="value">The value that should be stored.</param>
      <param name="keepSerialized">Defines if the Entry value should be kept in serialized state.</param>
      <param name="selectors">List of Selectors that define how the Entry is coordinated in the Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Entry.#ctor(System.Object,System.Type,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Creates a new Entry. This constructor is used with the generic Entry subclass.
            </summary>
      <param name="value">The value that should be stored.</param>
      <param name="type">The type of the value that should be stored.</param>
      <param name="selectors">List of Selectors that define how the Entry is coordinated in the Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Entry.ToString">
      <summary>
            Converts the Entry into a String.
            </summary>
      <returns>String representation of the Entry.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Entry.Serialize">
      <summary>
            Serializes the value of this Entry.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Entry.Deserialize">
      <summary>
            Deserializes the value of this Entry, but without saving it.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Entry.Value">
      <summary>
            The value stored in this Entry. The value is automatically deserialized, when it is currently
            is serialized state.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Entry.Type">
      <summary>
            The type of the value that is stored in this Entry.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Entry.Selectors">
      <summary>
            List of Selectors that define how the Entry is coordinated in the Container.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Entry.KeepSerialized">
      <summary>
            True if the Entry value is kept serialized.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Entry.IsSerialized">
      <summary>
            True if the Entry value is currently serialized.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Entry`1">
      <summary>
            Generic variant of Entry class.
            </summary>
      <typeparam name="T">The type of the value the Entry holds.</typeparam>
    </member>
    <member name="M:XcoSpaces.Kernel.Entry`1.#ctor(`0,XcoSpaces.Kernel.Selectors.Selector[])">
      <summary>
            Creates a new Entry.
            </summary>
      <param name="value">The value that should be stored.</param>
      <param name="selectors">List of Selectors that define how the Entry is coordinated in the Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Entry`1.#ctor">
      <summary>
            Creates a new Entry that has no value.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Entry`1.Value">
      <summary>
            The value stored in this Entry. The value is automatically deserialized, when it is currently
            is serialized state.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.WaitEvent">
      <summary>
            Represents an event that occured in the XCoreProcessor to wake up waiting messages.
            Events are created by the XCoreProcessor, stored in the event Container and from there
            processed by the EventProcessor.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.WaitEvent.#ctor(XcoSpaces.Kernel.Core.WaitEventType,XcoSpaces.Kernel.ContainerReference)">
      <summary>
            Creates a new WaitEvent.
            </summary>
      <param name="type">The type of event that occured.</param>
      <param name="cref">The Container where the event occured.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.WaitEvent.#ctor(XcoSpaces.Kernel.Core.WaitEventType,XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference)">
      <summary>
            Creates a new WaitEvent.
            </summary>
      <param name="type">The type of event that occured.</param>
      <param name="cref">The Container where the event occured.</param>
      <param name="tref">The Transaction for which the event occured.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.WaitEvent.#ctor(XcoSpaces.Kernel.Core.WaitEventType,XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Creates a new WaitEvent.
            </summary>
      <param name="type">The type of event that occured.</param>
      <param name="cref">The Container where the event occured.</param>
      <param name="operation">The operation for which the event occured.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Core.WaitEvent.Type">
      <summary>
            The type of event that occured.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Core.WaitEvent.CRef">
      <summary>
            The Container where the event occured.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Core.WaitEvent.TRef">
      <summary>
            The Transaction for which the event occured.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Core.WaitEvent.Operation">
      <summary>
            The operation for which the event occured.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.RequestContainerDestroy">
      <summary>
            Request message (request) for destroying a container.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager">
      <summary>
            Lock manager for managing the locks of a container level locked Container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.#ctor(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Core.CoreContainer{XcoSpaces.Kernel.Core.WaitEvent},XcoSpaces.Kernel.Core.CoreContainer{XcoSpaces.Kernel.Core.WaitRequest})">
      <summary>
            Creates a new ContainerLevelLockManager.
            </summary>
      <param name="cref">Reference to the Container that this lock manager is used for.</param>
      <param name="eventContainer">The event container of the core, that receives events to wake up waiting operations.</param>
      <param name="waitContainer">The wait container of the core, that holds waiting operations.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.SetReadLock(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Does nothing because locking is done on container level.
            </summary>
      <param name="e">The entry to be locked.</param>
      <param name="t">The Transaction for which the read lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>always true</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.SetWriteLock(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Does nothing because locking is done on container level.
            </summary>
      <param name="e">The entry to be locked.</param>
      <param name="t">The Transaction for which the write lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>always true</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.SetReadLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Tries to set a read lock for the complete Container. Locking is always done with the root transaction 
            (otherwise children of the same transaction could lock themselves). If the lock cannot be set,
            the operation is written to the wait container.
            </summary>
      <param name="t">The Transaction for which the read lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.SetWriteLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Tries to set a write lock for the complete Container. Locking is always done with the root transaction 
            (otherwise children of the same transaction could lock themselves). If the lock cannot be set,
            the operation is written to the wait container.
            </summary>
      <param name="t">The Transaction for which the write lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.SetCompleteReadLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Tries to set a read lock for the complete Container. Locking is always done with the root transaction 
            (otherwise children of the same transaction could lock themselves). If the lock cannot be set,
            the operation is written to the wait container. (In the case of container level locking, this method
            does exactly the same as SetReadLock(t, op).)
            </summary>
      <param name="t">The Transaction for which the read lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.SetCompleteWriteLock(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Tries to set a write lock for the complete Container. Locking is always done with the root transaction 
            (otherwise children of the same transaction could lock themselves). If the lock cannot be set,
            the operation is written to the wait container. (In the case of container level locking, this method
            does exactly the same as SetWriteLock(t, op).)
            </summary>
      <param name="t">The Transaction for which the write lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <returns>true if setting the lock was successful, false if the lock could not be set and the operation was written to the wait container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.ReleaseReadLock(XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Releases a read lock for this Transaction (its root Transaction).
            </summary>
      <param name="t">The Transaction for which the read lock should be released.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.ReleaseWriteLock(XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Releases a write lock for this Transaction (its root Transaction).
            </summary>
      <param name="t">The Transaction for which the write lock should be released.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.CheckOperationTimeout(XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Checks if the operation timed out, by controlling its timeout date. If this is the case, the
            operation is removed from the list of waiting operations and a XcoOperationTimeoutException
            is thrown.
            </summary>
      <param name="op">The operation to be checked.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.AddWaitingOperation(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp,System.Boolean)">
      <summary>
            Creates a new wait info object and adds it to the list of waiting operations.
            </summary>
      <param name="t">The Transaction for which a lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <param name="write">true for a write lock, false for a read lock</param>
      <returns>The created ContainerLockWaitInfo that holds the information if the lock can be set or not.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.RemoveWaitingOperation(XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Removes an operation from the list of waiting operations.
            </summary>
      <param name="op">The operation to be removed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.ReadLocksChanged">
      <summary>
            Called by Set/ReleaseReadLock methods whenever the read locks changed. All waiting
            operations are checked, if they can be woken up.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.WriteLockChanged">
      <summary>
            Called by Set/ReleaseWriteLock methods whenever the read locks changed. All waiting
            operations are checked, if they can be woken up.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.SendEvent(XcoSpaces.Kernel.Container.Locking.ILockWaitInfo)">
      <summary>
            Sends an event for the operation that is waiting with this waitInfo object. (The event is written
            to the event container.)
            </summary>
      <param name="waitInfo">The waitInfo that contains the information which operation has to be woken up.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.ContainerLevel.ContainerLevelLockManager.SendToWait(XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Send an operation into waiting state by writing it into the wait container.
            </summary>
      <param name="op">The operation that has to wait.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.TransactionReference">
      <summary>
            The reference to a Transaction, that can be used to access this Transaction in an operation.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.TransactionReference.#ctor(System.Guid)">
      <summary>
            Creates a new TransactionReference. (This Constructor is only used for testing purposes.)
            </summary>
      <param name="id">The id of the Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.TransactionReference.#ctor(System.Guid,System.String)">
      <summary>
            Creates a new TransactionReference.
            </summary>
      <param name="id">The id of the Container.</param>
      <param name="remoteAddress">The address of the space where the Transaction is held, or null for the local (embedded) space.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.WriteOperation">
      <summary>
            Types of write operations when Entries are written to a container.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.WriteOperation.Write">
      <summary>
            The Entries are written to the Container. The operation blocks if 
            the Entries cannot be written to the Container (like when the container 
            is full, or an Entry with the same Key already exists).
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.WriteOperation.Shift">
      <summary>
            The Entries are written to the Container. The operation removes
            any Entries from the Container that would not allow the operation
            to be fulfilled (like when the container is full, or an Entry with
            the same Key already exists).
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.WaitEventType">
      <summary>
            Types of events that can occur and that can be waited for.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Core.WaitEventType.EntryAdd">
      <summary>
            An Entry has been added to a Container (operations wait for this event when they
            want to read more Entries from a Container as are currently in it).
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Core.WaitEventType.EntryRemove">
      <summary>
            An Entry has been removed from a Container (operations wait for this event when they
            want to write more Entries to a Container than there is place left).
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Core.WaitEventType.LockRelease">
      <summary>
            All locks have been released that a certain operation has been waiting for (an operation
            waits for this event when it wants to set a lock on a resource (container or entry) that
            is currently locked by another transaction).
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Core.WaitEventType.ContainerDestroy">
      <summary>
            Special Event to wake up all Operations of a Container, when the container has been
            destroyed.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Notification">
      <summary>
            The Notification class waits for notifications to occur on the defined container. Therefore,
            it runs an own Thread that listens for concerning notifications. To be informed a callback Method
            can be set, that will be called whenever a notification occurs.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Notification.NotificationReadCallback">
      <summary>
            Definition of the callback method that is called when a read event occurs.
            </summary>
      <param name="source">The notification Object that is the source of the call.</param>
      <param name="operation">The operation (read/take/destroy) that has been performed on the container.</param>
      <param name="entries">List of entries that have been read/taken/destroyed from the container.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Notification.NotificationWriteCallback">
      <summary>
            Definition of the callback method that is called when a write event occurs.
            </summary>
      <param name="source">The notification Object that is the source of the call.</param>
      <param name="operation">The operation (write/shift) that has been performed on the container.</param>
      <param name="entries">List of entries that have been written/shifted to the container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Notification.#ctor(XcoSpaces.Kernel.XcoKernel,XcoSpaces.Kernel.Aspects.AspectReference,XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference)">
      <summary>
            Creates a new notification.
            </summary>
      <param name="kernel">The kernel that is used to create the Notification.</param>
      <param name="notificationARef">Reference to the notification aspect.</param>
      <param name="notificationCRef">Reference to the notification container.</param>
      <param name="tref">Reference to a Transaction, if the notification should run within a transaction.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Notification.SetReadCallback(XcoSpaces.Kernel.Notification.NotificationReadCallback)">
      <summary>
            Set a callback method for read notifications.
            </summary>
      <param name="readCallback">The callback method.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Notification.SetWriteCallback(XcoSpaces.Kernel.Notification.NotificationWriteCallback)">
      <summary>
            Set a callback method for write notifications.
            </summary>
      <param name="writeCallback">The callback method.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Notification.Run">
      <summary>
            The method that is running in an own thread when Start() is called. While running, a take on the
            notification container is done continuosly and defined callback method is called every time
            something is taken (or nothing happens, if the callback has not been defined).
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Notification.Start">
      <summary>
            The Notification object starts listening for notifications.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Notification.Stop">
      <summary>
            The Notification object stops listening for notifications and the notification is destroyed
            in the Kernel by destroying the notification Container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Notification.RemoveTransaction">
      <summary>
            Removes the Transaction from the notification. This method is called by the Request automatically
            when the Transaction in the notification is committed or rolled back. When the Transaction has
            been removed, the Notification object will go on to listen to notifications without the
            transactional context.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Notification.Dispose">
      <summary>
            Disposes the Notification by calling Stop().
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Notification.TRef">
      <summary>
            Returns the Transaction of the notification.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.ResponseDistributor">
      <summary>
            The ResponseDistributor is responsible for giving back the ResponseMessages to the
            right source, that is either the Request object for embedded Messages, or the
            RemoteServer object for remote Messages. Delegates are used for this Task
            for most flexibility.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.ResponseDistributor.#ctor(XcoSpaces.Kernel.Core.CoreData,XcoSpaces.Kernel.Core.XCore.ProcessResponseMethod)">
      <summary>
            Creates a new ResponseDistributor.
            </summary>
      <param name="coreData">The internal kernel data structures.</param>
      <param name="processEmbeddedResponse">The method that should be called for processing embedded ResponseMessages.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.ResponseDistributor.SetRemoteProcess(XcoSpaces.Kernel.Core.XCore.ProcessResponseMethod,System.String)">
      <summary>
            Sets the method that should be called for processing remote ResponseMessages. The method
            has to be set only when the server for remote communication is started.
            </summary>
      <param name="processRemoteResponse">The method that should be called for processing remote ResponseMessages.</param>
      <param name="localSpaceAddress">The address of the local space so messages to this address can be recognized as embedded.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.ResponseDistributor.ProcessResponse(XcoSpaces.Kernel.Messages.ResponseMessage)">
      <summary>
            Decides if an ResponseMessage should be processed embedded or remote, and then gives 
            the message to the correct process method. (embedded if the remote address is null, 
            otherwise remote)
            </summary>
      <param name="msg">The ResponseMessage to be processed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.ResponseDistributor.Stop">
      <summary>
            Stops the ResponseDistributor (does nothing right now).
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.WaitCounter">
      <summary>
            A simple class to count waiting messages for a Container. The counter is the
            basis for the Container to decide if an Event has to be created after an operation
            has been done or not. The count is logged per Transaction, because of the differences 
            in waiting:
            - Normally an EntryAdd event only has to be created, when a Transaction is committed,
              because until the changes are not visible to other Transactions
            - But: When a waiting operation is of the same transaction than the operation that
              changed something in the container, the changes are visible for that waiting 
              operation, and so it has to be woken up immediately.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.WaitCounter.Increase(XcoSpaces.Kernel.TransactionReference)">
      <summary>
            Increases the wait count by 1 for the given Transaction.
            </summary>
      <param name="tref">Reference to the Transaction that is used in the operation that is put into wait.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.WaitCounter.Decrease(XcoSpaces.Kernel.TransactionReference)">
      <summary>
            Decreases the wait count by 1 for the given Transaction.
            </summary>
      <param name="tref">Reference to the Transaction that is used in the operation that is removed from wait.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.WaitCounter.Is0">
      <summary>
            Checks if the count (over all Transaction) is currently 0.
            </summary>
      <returns>true if the count is 0.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.WaitCounter.Is0(XcoSpaces.Kernel.TransactionReference)">
      <summary>
            Checks if the count for the given Transaction is currently 0.
            </summary>
      <param name="tref">Reference to the Transaction to be checked.</param>
      <returns>
      </returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Locking.LockData">
      <summary>
            Represents the current locks on a Container. Either one writer or many
            readers can have concurrent access to the Container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.LockData.#ctor">
      <summary>
            Creates a new ContainerLockData.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.LockData.WriteLock">
      <summary>
            The Transaction that currently holds a write lock on the container,
            or null, if the container is currently not write locked.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.LockData.ReadLocks">
      <summary>
            The list of transactions that currently hold a read lock on the container.
            (The list is empty when the container is currently not read locked.)
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.ResponseContainerDestroy">
      <summary>
            Response message (response) for destroying a Container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseContainerDestroy.#ctor">
      <summary>
            Creates a new ResponseContainerDestroy message.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseContainerDestroy.#ctor(XcoSpaces.Exceptions.XcoException)">
      <summary>
            Creates a new ResponseContainerDestroy message.
            </summary>
      <param name="error">Error that occured while processing the corresponding RequestMessage.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.SpaceMeta">
      <summary>
            Defined constants for the space meta data.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Transactions.OperationCounter">
      <summary>
            A simple class to count current operations for a Transaction. The counter is the
            basis for the Container to decide if an Event has to be created after an operation
            has been done or not. The count is logged per Transaction, because of the differences 
            in waiting:
            - Normally an EntryAdd event only has to be created, when a Transaction is committed,
              because until the changes are not visible to other Transactions
            - But: When a waiting operation is of the same transaction than the operation that
              changed something in the container, the changes are visible for that waiting 
              operation, and so it has to be woken up immediately.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.OperationCounter.#ctor(XcoSpaces.Kernel.TransactionReference)">
      <summary>
            Creates a new OperationCounter
            </summary>
      <param name="tref">Reference to the Transaction for which this counter is created.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.OperationCounter.Increase">
      <summary>
            Increases the wait count by 1.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.OperationCounter.Decrease">
      <summary>
            Decreases the wait count by 1.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Properties.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Properties.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Properties.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.ReadOperation">
      <summary>
            Types of read operations when reading Entries from a Container
            (operations that read and/or remove Entries).
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.ReadOperation.Read">
      <summary>
            The Entries are read from the Container. The content of the Container is not changed.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.ReadOperation.Take">
      <summary>
            The Entries are taken (read and removed) from the Container.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.ReadOperation.Destroy">
      <summary>
            The Entries are removed from the Container (without actually reading them).
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.TimeoutHandler">
      <summary>
            The TimeoutManager regularly checks the wait Container if any waiting messages have run into
            a timeout. A timeout exception is created for these messages and they are removed from the
            wait container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.TimeoutHandler.#ctor(XcoSpaces.Kernel.Core.CoreData,XcoSpaces.Kernel.Core.ResponseDistributor)">
      <summary>
            Creates a new TimeoutManager. A timer is started for regularly checking the wait Container
            for timeouts.
            </summary>
      <param name="coreData">The internal kernel data structures.</param>
      <param name="responseDistributor">The ResponseDistributor that handles ResponseMessages to send them back to the source of the RequestMessage.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.TimeoutHandler.Stop">
      <summary>
            Stops the TimeoutManager.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.TimeoutHandler.CheckWaitRequests(System.Object)">
      <summary>
            Reads all messages from the RequestWait Container and checks for every message
            if the timeout has been reached. Every message that has timed out is removed
            from the RequestWait Container, and an ResponseMessage with a timeout exception is
            created.
            </summary>
      <param name="timerInfo">Field for additional info from the timer that starts the method (is ignored because no additional info needed).</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.TimeoutHandler.WriteTimeoutResponse(XcoSpaces.Kernel.Core.WaitRequest)">
      <summary>
            Creates a timeout for a message (ResponseMessage with a XcoOperationFailedException), and gives it
            to the ResponseDistributor to be processed.
            </summary>
      <param name="waitRequest">The waiting message for which a timout should be created.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.RequestTransactionRollback">
      <summary>
            Request message (request) for rolling back a Transaction.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestTransactionRollback.#ctor(XcoSpaces.Kernel.TransactionReference)">
      <summary>
            Creates a new RequestTransactionCommit message.
            </summary>
      <param name="tref">The reference to the Transaction that should be rolled back.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestTransactionRollback.TRef">
      <summary>
            The reference to the Transaction that should be rolled back.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.ContainerProperty">
      <summary>
            Properties that can be read from a Container.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.ContainerProperty.EntryCount">
      <summary>
            Number of Entries that are currently in the Container.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.ContainerProperty.MaxSize">
      <summary>
            The maximum size of the Container, that is the maximum number of Entries the Container can hold.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.ContainerProperty.Uniqueness">
      <summary>
            The uniqueness property of the Container (true if Entries in the Container must be unique,
            otherwise false.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.ContainerProperty.CoordinationTypes">
      <summary>
            The coordination types of the Container, to be returned as an Array of System.Type objects,
            for example {typeof(FifoCoordinator), typeof(VectorCoordinator)}
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Transactions.Transaction">
      <summary>
            A Transaction represents a series of successive operations, that can only be
            finished completely together (or completely undone). A Transaction consists of the
            Log, that says which operations have been done and how to undo them, and the Locks
            that have been set to do these operations.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.Transaction.#ctor(XcoSpaces.Kernel.Core.TransactionManager,XcoSpaces.Kernel.TransactionReference,System.DateTime,XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Creates a new Transaction.
            </summary>
      <param name="transactionManager">The TransactionManager that manages this Transaction. Is used by the Transaction to prepare, commit and rollback itself.</param>
      <param name="tref">The reference to this Transaction that can be used to address it from outside.</param>
      <param name="timeoutDate">The date when this Transaction times out. (Use DateTime.MaxValue for infinite timeout.)</param>
      <param name="rootTransaction">The root Transaction of this Transaction. Or null if the Transaction itself is the root Transaction.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.Transaction.#ctor">
      <summary>
            Creates a new Transaction without reference. This used for implicit Transactions, they dont have
            to be added to the managed list of existing Transactions, because they are committed immediately,
            and because of that never accessible from outside.
            UPDATE: Using this constructor for implicit Transactions is no more possible, because they have
            to be managed as well to be available for Aspect operations. So this constructor is now only used
            for testing!!
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.Transaction.UpdateTRef(System.String)">
      <summary>
            Updates the TransactionReference of this Transaction with the new space address.
            </summary>
      <param name="spaceAddress">The address of the local space.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.Transaction.AddLog(XcoSpaces.Kernel.Transactions.ITransactionLog)">
      <summary>
            Adds a new ITransactionLog to the log list of this transaction
            </summary>
      <param name="transactionLog">The log to be added.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.Transaction.AddLock(XcoSpaces.Kernel.Container.Locking.LockType,XcoSpaces.Kernel.Transactions.TransactionLock.LockReleaseDelegate)">
      <summary>
            Adds a lock to the log list of this Transaction.
            </summary>
      <param name="lockStatus">The status of the lock to determine what actions have to be done to release the previously acclaimed lock. This assures that when an operation is rolled back, the status of the lock will be exactly as it was before setting the lock. (see LockStatus enum for details)</param>
      <param name="lockReleaseDelegate">The method that can be used to release the lock.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.Transaction.Prepare">
      <summary>
            Prepares this Transaction for commit.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.Transaction.Commit">
      <summary>
            Commits this Transaction.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.Transaction.Rollback">
      <summary>
            Rolls back this Transaction.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Transactions.Transaction.TRef">
      <summary>
            The reference object of this Transaction, that is used to address this Transaction from outside.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Transactions.Transaction.TimeoutDate">
      <summary>
            The date when this Transaction times out.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Transactions.Transaction.CurrentOpCount">
      <summary>
            To count the number of operations for this Transaction that is currently in the core.
            (A Transaction cannot be prepared or committed as long as there is at least one operation 
            for it in the core.)
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Transactions.Transaction.Prepared">
      <summary>
            Has the Transaction been prepared for commit.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Transactions.Transaction.Log">
      <summary>
            The log of the Transaction (the list of operations that have been done in this Transaction).
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Transactions.Transaction.RootTransaction">
      <summary>
            The root Transaction of this Transaction. Returns itself if this transaction is a root Transaction.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Transactions.Transaction.RootTx">
      <summary>
            The root ITransaction of this Transaction. (Returns the same as RootTransaction, only a ITransaction)
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.ContainerManager">
      <summary>
            Manages all Containers that are currently in the core. Provides threadsafe methods to create new
            Containers, and to get and destroy Containers by their reference.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Core.ContainerManager.LookUpCrefID">
      <summary>
            The cref id that is used for the lookup container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.ContainerManager.CreateMetaContainer(System.Guid)">
      <summary>
            Creates a new Meta Container (a Key Container with infinite size).
            </summary>
      <param name="crefID">The cref ID that should be used for the Container.</param>
      <returns>The created Meta Container.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.ContainerManager.GetContainer(XcoSpaces.Kernel.ContainerReference)">
      <summary>
            Gets the Container for this ContainerReference. An Exception is thrown if a Container with
            the id of this reference doesnt exist. If the CRef contains a subpath, not the original container
            but the one that the subpath is leading to is returned.
            </summary>
      <param name="cref">The ContainerReference that identifies the Container.</param>
      <returns>The Container for this reference.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.ContainerManager.SetSpaceAddress(System.String)">
      <summary>
            Sets the new space address in the references of all Containers. This space address
            will also be used for all Containers that are created in the future.
            </summary>
      <param name="spaceAddress">The address of the local space.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.RequestTransactionCommit">
      <summary>
            Request message (request) for committing a Transaction.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestTransactionCommit.#ctor(XcoSpaces.Kernel.TransactionReference)">
      <summary>
            Creates a new RequestTransactionCommit message.
            </summary>
      <param name="tref">The reference to the Transaction that should be committed.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestTransactionCommit.TRef">
      <summary>
            The reference to the Transaction that should be committed.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.RequestTransactionCreate">
      <summary>
            Request message (request) for creating a Transaction.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestTransactionCreate.#ctor(System.Int32)">
      <summary>
            Creates a new RequestTransactionCreate message.
            </summary>
      <param name="timeout">The time in milliseconds after which the Transaction times out. Or -1 for infinite timeout.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestTransactionCreate.Timeout">
      <summary>
            The time in milliseconds after which the Transaction times out. Or -1 for infinite timeout.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.ResponseRemoveAspect">
      <summary>
            Response message for removing Aspects.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseRemoveAspect.#ctor">
      <summary>
            Creates a new ResponseRemoveAspect message.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseRemoveAspect.#ctor(XcoSpaces.Exceptions.XcoException)">
      <summary>
            Creates a new ResponseRemoveAspect message.
            </summary>
      <param name="error">Error that occured while processing the corresponding RequestMessage.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.EnumHelper">
      <summary>
            EnumHelper provides helper methods for enums. Actually not needed, but used for better
            compliance with the PPC Version.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.EnumHelper.GetValues(System.Type)">
      <summary>
            Retrieves an Array of the values of the constants in a specified enumeration.
            </summary>
      <param name="enumType">An enumeration type.</param>
      <returns>Array of enumeration values.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Aspects.TestContainerAspect">
      <summary>
            Aspect for testing purposes, that just prints a line to the console at every ipoint.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PreRead(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector}@,System.Int32,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Read.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to read Entries from the Container.</param>
      <param name="retryCount">The number of times this operation has already been rescheduled.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PostRead(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Read.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to read Entries from the Container.</param>
      <param name="entries">The list of Entries that have been read.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PreTake(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector}@,System.Int32,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Take.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to take Entries from the Container.</param>
      <param name="retryCount">The number of times this operation has already been rescheduled.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PostTake(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Take.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to take Entries from the Container.</param>
      <param name="entries">The list of Entries that have been taken.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PreDestroy(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector}@,System.Int32,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Destroy.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to destroy Entries in the Container.</param>
      <param name="retryCount">The number of times this operation has already been rescheduled.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PostDestroy(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Destroy.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="selectors">The list of Selectors that are used to destroy Entries in the Container.</param>
      <param name="entries">The list of Entries that have been destroyed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PreWrite(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,System.Int32,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Write.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="entries">The list of Entries that should be written.</param>
      <param name="retryCount">The number of times this operation has already been rescheduled.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PostWrite(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Write.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="entries">The list of Entries that have been written.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PreShift(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry}@,System.Int32,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Shift.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="entries">The list of Entries that should be written.</param>
      <param name="retryCount">The number of times this operation has already been rescheduled.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PostShift(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Shift.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="t">The Transaction in which this operation takes place.</param>
      <param name="entries">The list of Entries that have been written.</param>
      <param name="removedEntries">The list of Entries that have been removed for shift.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PreAddAspect(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Aspects.ContainerAspect@,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Add Aspect.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="aspect">The Aspect that should be added.</param>
      <param name="iPoints">The list of iPoints where the Aspect should be added.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PostAddAspect(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Aspects.ContainerAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Add Aspect.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="aspect">The Aspect that has been added.</param>
      <param name="iPoints">The list of iPoints where the Aspect has been added.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PreRemoveAspect(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Aspects.ContainerAspect@,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Remove Aspect.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="aspect">The Aspect that should be removed.</param>
      <param name="iPoints">The list of iPoints where the Aspect should be removed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PostRemoveAspect(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Aspects.ContainerAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.ContainerIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Remove Aspect.
            </summary>
      <param name="cref">Reference to the Container that is the target of this operation.</param>
      <param name="aspect">The Aspect that has been removed.</param>
      <param name="iPoints">The list of iPoints where the Aspect has been removed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PreContainerDestroy(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Container Destroy.
            </summary>
      <param name="cref">Reference to the Container that should be destroyed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.TestContainerAspect.PostContainerDestroy(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Container Destroy.
            </summary>
      <param name="cref">Reference to the Container that should be destroyed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Aspects.SpaceAspect">
      <summary>
            Base class for Space Aspects. Provides methods for all SpaceIPoints (that only return
            Ok as result in base implementation), that can be overridden in subclasses to provide 
            the wanted Aspect functionality.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.SpaceAspect.PreTransactionCreate(XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Transaction Create. By default does nothing.
            </summary>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.SpaceAspect.PostTransactionCreate(XcoSpaces.Kernel.TransactionReference@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Transaction Create. By default does nothing.
            </summary>
      <param name="tref">The reference of the Transaction that has been created.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.SpaceAspect.PreTransactionRollback(XcoSpaces.Kernel.TransactionReference@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Transaction Rollback. By default does nothing.
            </summary>
      <param name="tref">The reference ot the Transaction to be rolled back.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.SpaceAspect.PostTransactionRollback(XcoSpaces.Kernel.TransactionReference,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Transaction Rollback. By default does nothing.
            </summary>
      <param name="tref">The reference ot the Transaction to be rolled back.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.SpaceAspect.PreContainerCreate(System.Int32@,System.Boolean@,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Container Create. By default does nothing.
            </summary>
      <param name="size">The maximum size of the Container, or -1 for an unbounded Container.</param>
      <param name="unique">True if the elements in the container should be unique.</param>
      <param name="coordinationTypes">The list of Selectors that defines which coordination types the container should have.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.SpaceAspect.PostContainerCreate(System.Int32,System.Boolean,System.Collections.Generic.List{XcoSpaces.Kernel.Selectors.Selector},XcoSpaces.Kernel.ContainerReference@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Container Create. By default does nothing.
            </summary>
      <param name="size">The maximum size of the Container, or -1 for an unbounded Container.</param>
      <param name="unique">True if the elements in the container should be unique.</param>
      <param name="coordinationTypes">The list of Selectors that defines which coordination types the container should have.</param>
      <param name="cref">The reference to the Container that has been created.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.SpaceAspect.PreContainerDestroy(XcoSpaces.Kernel.ContainerReference@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Calle before Container Destroy. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container to be destroyed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.SpaceAspect.PostContainerDestroy(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Container Destroy. By default does nothing.
            </summary>
      <param name="cref">Reference to the Container to be destroyed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.SpaceAspect.PreAddAspect(XcoSpaces.Kernel.Aspects.SpaceAspect@,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.SpaceIPoint}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Add Aspect. By default does nothing.
            </summary>
      <param name="aspect">The Aspect that should be added.</param>
      <param name="iPoints">The list of iPoints where the Aspect should be added.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.SpaceAspect.PostAddAspect(XcoSpaces.Kernel.Aspects.SpaceAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.SpaceIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Add Aspect. By default does nothing.
            </summary>
      <param name="aspect">The Aspect that has been added.</param>
      <param name="iPoints">The list of iPoints where the Aspect has been added.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.SpaceAspect.PreRemoveAspect(XcoSpaces.Kernel.Aspects.SpaceAspect@,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.SpaceIPoint}@,XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Remove Aspect. By default does nothing.
            </summary>
      <param name="aspect">The Aspect that should be removed.</param>
      <param name="iPoints">The list of iPoints where the Aspect should be removed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.SpaceAspect.PostRemoveAspect(XcoSpaces.Kernel.Aspects.SpaceAspect,System.Collections.Generic.List{XcoSpaces.Kernel.Aspects.SpaceIPoint},XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called after Remove Aspect. By default does nothing.
            </summary>
      <param name="aspect">The Aspect that has been removed.</param>
      <param name="iPoints">The list of iPoints where the Aspect has been removed.</param>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.SpaceAspect.PreSpaceShutdown(XcoSpaces.Kernel.OperationContext)">
      <summary>
            Called before Space Shutdown. By default does nothing.
            </summary>
      <param name="context">The context of this operation, can be used to receive or provide additional information.</param>
      <returns>The result of the Aspect operation, by default Ok.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Aspects.SpaceAspect.GetImplementedIPoints(XcoSpaces.Kernel.Aspects.SpaceAspect)">
      <summary>
            Gets that list of SpaceIPoints for which the corresponding method is implemented by that aspect
            (overridden from the SpaceAspect implementation of this method).
            </summary>
      <param name="aspect">The aspect from which the list of ipoints should be read.</param>
      <returns>The list of SpaceIPoints for this aspect.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Aspects.AspectResult">
      <summary>
            Possible results from the method call of an Aspect.
            Note: A "NotOk" result (that rolls back the Operation and gives back an error) can be reached
            by throwing an Exception in the Aspect (should be a subclass of XcoAspectException).
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.AspectResult.Ok">
      <summary>
            Everything is ok.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.AspectResult.Skip">
      <summary>
            The operation has to be skipped, execution moves directly to post aspects (this is only
            supported in pre aspects, and will have no effect in post aspects). Skip will also
            always result in skipping all Aspects that would be called after this one.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Aspects.AspectResult.Reschedule">
      <summary>
            Operation has to be rescheduled (Transaction is rolled back to the last savepoint,
            the RequestMessage is given to the XCoreProcessor Threadpool again, and the RetryCount
            is increased). This is possible in pre aspects, and in post aspects only when the
            operation is transactional secure and therefore the actions that have already been done
            can be rolled back. Otherwise Reschedule will be ignored, and only skip all Aspects that 
            would be called after this one.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.CoreProcessor">
      <summary>
            The main class of the core, processes all incoming messages.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreProcessor.Stop">
      <summary>
            Stops the XCoreProcessor.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreProcessor.ProcessRequest(XcoSpaces.Kernel.Messages.RequestMessage)">
      <summary>
            Posts a RequestMessage to the ThreadDispatcher to be processed.
            </summary>
      <param name="message">The message to be processed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreProcessor.Process(XcoSpaces.Kernel.Contracts.ThreadDispatcher.IDispatchable)">
      <summary>
            Processes a RequestMessage. This method is used in the Threadpool for the message processing.
            If the message is processed correctly, a corresponding ResponseMessage is generated and given
            to the ResponseDistributor, and if needed an event is created and written to the event Container. 
            If the message cannot be processed yet, it is written to the RequestWait Container. If an error 
            occurs while processing a message, an ResponseMessage with this error is generated and given to 
            the ResponseDistributor.
            </summary>
      <param name="dispatchableMsg">The message to be processed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreProcessor.WriteResponse(XcoSpaces.Kernel.Messages.RequestMessage,XcoSpaces.Kernel.Messages.ResponseMessageContent)">
      <summary>
            Gives the ResponseMessage to the ResponseDistributor that decides where to give the message
            back. Important message data (message id and remote address) is taken from the
            RequestMessage.
            </summary>
      <param name="request">The RequestMessage to take the message id and remote address from.</param>
      <param name="response">The ResponseMessage that is the response to the RequestMessage.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.CoreProcessor.Reschedule(XcoSpaces.Kernel.Messages.RequestMessage)">
      <summary>
            Reschedules a RequestMessage by posting it into the Threadpool again. This is needed for the
            Aspect Reschedule possibility.
            </summary>
      <param name="message">The message to be rescheduled.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.ResponseWrite">
      <summary>
            Response message (response) for writing Entries to a Container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseWrite.#ctor(XcoSpaces.Kernel.WriteOperation)">
      <summary>
            Creates a new ResponseWrite message.
            </summary>
      <param name="operation">The type of write operation that has been performed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseWrite.#ctor(XcoSpaces.Exceptions.XcoException,XcoSpaces.Kernel.WriteOperation)">
      <summary>
            Creates a new ResponseWrite message.
            </summary>
      <param name="error">Error that occured while processing the corresponding RequestMessage.</param>
      <param name="operation">The type of write operation that has been performed / should have been performed.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.ResponseWrite.Operation">
      <summary>
            The type of write operation that has been performed.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.RequestAddAspectLocal">
      <summary>
            Request message (request) for adding and removing Aspects.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestAddAspectLocal.#ctor(XcoSpaces.Kernel.Aspects.Aspect,System.Collections.IList,XcoSpaces.Kernel.ContainerReference)">
      <summary>
            Creates a new RequestAddAspectLocal message.
            </summary>
      <param name="aspect">The Aspect that should be added/removed.</param>
      <param name="iPoints">The list of iPoint where the Aspect should be added/removed.</param>
      <param name="cref">Reference to the Container where the Aspect should be added (only needed with a ContainerAspect).</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestAddAspectLocal.Aspect">
      <summary>
            The Aspect that should be added/removed.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Logging.LoggerFactory">
      <summary>
            Factory class for creating Loggers.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Logging.LoggerFactory.CreateInstance(System.String,System.Type)">
      <summary>
            Creates a new Logger.
            </summary>
      <param name="name">The name under which the messages should be logged.</param>
      <param name="type">The type of the logged class.</param>
      <returns>A new Logger.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Core.TransactionManager">
      <summary>
            Manages all open Transactions that are currently in the core. Provides threadsafe methods to 
            create new Transactions, to get Transactions by their reference, and to commit or rollback
            Transactions.
            Also regularly checks if Transactions have run into a timeout, and automatically rolles back such
            Transactions.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.TransactionManager.#ctor">
      <summary>
            Creates a new TransactionManager and starts the timer for checking for timed out Transactions.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.TransactionManager.Stop">
      <summary>
            Stops the TransactionManager.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.TransactionManager.CreateTransaction(System.Int32,XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Creates a new Transaction. A new TransactionReference with a new id is created 
            for the Transaction, and the Transaction is added to the current list of Transactions.
            </summary>
      <param name="timeout">The time in milliseconds after which the Transaction times out. Or -1 for infinite timeout.</param>
      <param name="rootTransaction">The root Transaction of this Transaction. Or null if the Transaction itself is the root Transaction.</param>
      <returns>The Transaction that has been created.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.TransactionManager.CommitTransaction(XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Commits the Transaction by releasing all locks that are owned by this Transaction,
            and removes it from the list of open Transactions.
            </summary>
      <param name="t">The Transaction that should be committed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.TransactionManager.RollbackTransaction(XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Rolls back the Transaction by rolling back all actions in the transaction log and 
            releasing all locks that are owned by this Transaction, and removes it from the 
            list of open Transactions.
            </summary>
      <param name="t">The Transaction that should be committed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.TransactionManager.SetSpaceAddress(System.String)">
      <summary>
            Sets the new space address in the references of all Transactions. This space address
            will also be used for all Transactions that are created in the future.
            </summary>
      <param name="spaceAddress">The address of the local space.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Core.TransactionManager.CheckTransactionTimeouts(System.Object)">
      <summary>
            Checks if a Transaction has timed out. All transactions that have timed out are
            automatically rolled back.
            </summary>
      <param name="timerInfo">Field for additional info from the timer that starts the method (is ignored because not additional info needed).</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.RequestWrite">
      <summary>
            Request message (request) for writing entries to a container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestWrite.#ctor(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.TransactionReference,System.Int32,XcoSpaces.Kernel.WriteOperation,XcoSpaces.Kernel.IEntry[])">
      <summary>
            Creates a new RequestWrite message.
            </summary>
      <param name="cref">The reference to the Container that is the target of the operation.</param>
      <param name="tref">Reference to the Transaction in which this operation takes places, or null if an implicit Transaction should be used.</param>
      <param name="timeout">The timeout of the operation in milliseconds. Use System.Threading.Timeout.Infinite for infinite Timeout.</param>
      <param name="operation">The type of write operation that should be performed.</param>
      <param name="entries">The list of Entries that should be written to the Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.RequestWrite.SerializeInnerContent">
      <summary>
            Serializes all Entries, because they should always be stored in the
            Container serialized when they are sent over remote communication.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestWrite.Operation">
      <summary>
            The type of write operation that should be performed.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.RequestWrite.Entries">
      <summary>
            The list of Entries that should be written to the Container.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Messages.ResponseAddAspect">
      <summary>
            Response message for adding Aspects.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseAddAspect.#ctor(XcoSpaces.Kernel.Aspects.AspectReference)">
      <summary>
            Creates a new ResponseAddAspect message.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Messages.ResponseAddAspect.#ctor(XcoSpaces.Exceptions.XcoException)">
      <summary>
            Creates a new ResponseAddAspect message.
            </summary>
      <param name="error">Error that occured while processing the corresponding RequestMessage.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Messages.ResponseAddAspect.ARef">
      <summary>
            The reference to the aspect that has been added.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo">
      <summary>
            LockInfo contains all information and provides all methods that are needed for the lock waiting
            and eventing at entry level locking.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo.#ctor(XcoSpaces.Kernel.ContainerReference,XcoSpaces.Kernel.Core.CoreContainer{XcoSpaces.Kernel.Core.WaitEvent},XcoSpaces.Kernel.Core.CoreContainer{XcoSpaces.Kernel.Core.WaitRequest})">
      <summary>
            Creates a new EntryLevelLockManager.
            </summary>
      <param name="cref">Reference to the Container that this lock manager is used for.</param>
      <param name="eventContainer">The event container of the core, that receives events to wake up waiting operations.</param>
      <param name="waitContainer">The wait container of the core, that holds waiting operations.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo.AddWaitingOperation(XcoSpaces.Kernel.Transactions.Transaction,XcoSpaces.Kernel.Messages.RequestContainerOp,System.Boolean)">
      <summary>
            Creates a new wait info object for an operation waiting for a container lock and adds it
            to the list of waiting operations.
            </summary>
      <param name="t">The Transaction for which a lock should be set.</param>
      <param name="op">The operation that needs the lock.</param>
      <param name="write">true for a write lock, false for a read lock</param>
      <returns>The created ContainerLockWaitInfo that holds the information if the lock can be set or not.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo.RemoveWaitingOperation(XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Removes an operation from the list of waiting operations for container lock.
            </summary>
      <param name="op">The operation to be removed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo.AddWaitingEntryLock(XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLockWaitInfo)">
      <summary>
            Adds a wait object to the list of operations waiting for an entry lock.
            </summary>
      <param name="waitInfo">The wait object to be added.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo.RemoveWaitingEntryLock(XcoSpaces.Kernel.Container.Locking.EntryLevel.EntryLockWaitInfo)">
      <summary>
            Removes a wait object from the list of operations waiting for an entry lock.
            </summary>
      <param name="waitInfo">The wait object to be removed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo.IncEntryReadLockCount(XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Increases the entry read lock counts of all container lock wait objects, except of the ones 
            for the given Transaction, by 1. This is called when an entry read lock is set.
            </summary>
      <param name="t">The Transaction for which the lock has been set.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo.DecEntryReadLockCount(XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Decreases the entry read lock counts of all container lock wait objects, except of the ones 
            for the given Transaction, by 1. This is called when an entry read lock is set. Every concerned 
            wait object is checked, and if there are no other locks set, an event is sent to wake up the
            waiting operation.
            </summary>
      <param name="t">The Transaction for which the lock has been set.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo.IncEntryWriteLockCount(XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Increases the entry write lock counts of all container lock wait objects, except of the ones 
            for the given Transaction, by 1. This is called when an entry read lock is set.
            </summary>
      <param name="t">The Transaction for which the lock has been set.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo.DecEntryWriteLockCount(XcoSpaces.Kernel.Transactions.Transaction)">
      <summary>
            Decreases the entry write lock counts of all container lock wait objects, except of the ones 
            for the given Transaction, by 1. This is called when an entry read lock is set. Every concerned 
            wait object is checked, and if there are no other locks set, an event is sent to wake up the
            waiting operation.
            </summary>
      <param name="t">The Transaction for which the lock has been set.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo.ContainerReadLocksChanged">
      <summary>
            Called by whenever the container read locks are changed. All waiting
            operations are checked, if they can be woken up.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo.ContainerWriteLockChanged">
      <summary>
            Called by whenever the container write locks are changed. All waiting
            operations are checked, if they can be woken up.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo.SendEvent(XcoSpaces.Kernel.Container.Locking.ILockWaitInfo)">
      <summary>
            Sends an event for the operation that is waiting with this waitInfo object. (The event is written
            to the event container.)
            </summary>
      <param name="waitInfo">The waitInfo that contains the information which operation has to be woken up.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo.SendToWait(XcoSpaces.Kernel.Messages.RequestContainerOp)">
      <summary>
            Send an operation into waiting state by writing it into the wait container.
            </summary>
      <param name="op">The operation that has to wait.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo.ContainerLockData">
      <summary>
            The lock data for container locks.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Locking.EntryLevel.LockInfo.EntryLocks">
      <summary>
            The list of entry lock objects (each entry in container has an own lock object that handles the
            locking for this entry).
            </summary>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoException">
      <summary>
            XcoException is the base class for all Exceptions thrown in XcoSpaces.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoException.#ctor(System.String)">
      <summary>
            Creates a new XcoException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new XcoException.
            </summary>
      <param name="message">The error message.</param>
      <param name="innerException">Inner Exception.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoException. Needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoContainerException">
      <summary>
            Exception that is thrown in case of an error in any container related actions.
            Is also the base class for more specific Exceptions for container errors.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoContainerException.#ctor(System.String)">
      <summary>
            Creates a new XcoContainerException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoContainerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoContainerException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoContainerCreateException">
      <summary>
            Exception that is thrown in case of an error at container creation.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoContainerCreateException.#ctor(System.String)">
      <summary>
            Creates a new XcoContainerCreateException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoContainerCreateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoContainerCreateException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoFatalCoreException">
      <summary>
            Exception that is thrown when an unexpected error occurs in the core.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoFatalCoreException.#ctor(System.String)">
      <summary>
            Creates a new XcoFatalCoreException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoFatalCoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoFatalCoreException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoAspectException">
      <summary>
            Exception that is thrown in case of errors in Aspects.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoAspectException.#ctor(System.String)">
      <summary>
            Creates a new XcoAspectException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoAspectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoAspectException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoAspectRescheduleException">
      <summary>
            Exception that is thrown in when a ContainerAspect results in Reschedule. The Exception is needed
            because the information cannot be given out to the XCoreProcessor in another way.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoAspectRescheduleException.#ctor">
      <summary>
            Creates a new XcoAspectRescheduleException.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoAspectRescheduleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoAspectRescheduleException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoBindingException">
      <summary>
            Exception that is thrown in case errors in the microkernel, when the binding cannot be loaded,
            the information in the binding configuration is not valid, or the interface for which an
            instance should be created is not contained in the binding configuration.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoBindingException.#ctor(System.String)">
      <summary>
            Creates a new XcoBindingException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoBindingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoBindingException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoAspectAddException">
      <summary>
            Exception that is thrown in case of an error during aspect creating, e.g. the aspect cannot be instantiated.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoAspectAddException.#ctor(System.String)">
      <summary>
            Creates a new XcoAspectAddException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoAspectAddException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoAspectAddException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoContainerWriteException">
      <summary>
            Exception that is thrown in case of an error when performing a write operation on a container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoContainerWriteException.#ctor(System.String)">
      <summary>
            Creates a new XcoContainerWriteException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoContainerWriteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoContainerWriteException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoConfigException">
      <summary>
            Exception that is thrown in case of errors with the XcoSpaces configuration (e.g. when it cannot be loaded from the config file).
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoConfigException.#ctor(System.String)">
      <summary>
            Creates a new XcoConfigException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoConfigException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoConfigException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoContainerReadException">
      <summary>
            Exception that is thrown in case of an error when performing a read operation on a container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoContainerReadException.#ctor(System.String)">
      <summary>
            Creates a new XcoContainerReadException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoContainerReadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoContainerReadException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoContainerNotFoundException">
      <summary>
            Exception that is thrown in case of an error when performing a read operation on a container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoContainerNotFoundException.#ctor(System.String)">
      <summary>
            Creates a new XcoContainerNotFoundException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoContainerNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoContainerNotFoundException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoOperationFailedException">
      <summary>
            Exception that is thrown when an operation fails because a lock cannot be set or the requirements
            of the operation could not be fulfilled (e.g. not enough entries in the container for read) within
            the given time.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoOperationFailedException.#ctor(System.String)">
      <summary>
            Creates a new XcoOperationFailedException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoOperationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoOperationFailedException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoOperationTimeoutException">
      <summary>
            Exception that is thrown in when an operation fails because it ran into a timeout before
            it could be processed (a timeout while trying to set a lock).
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoOperationTimeoutException.#ctor(System.String)">
      <summary>
            Creates a new XcoOperationTimeoutException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoOperationTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoOperationTimeoutException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoCommunicationException">
      <summary>
            Exception that is thrown in case of an error related to remote communication (e.g. problems
            connecting to the remote kernel).
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoCommunicationException.#ctor(System.String)">
      <summary>
            Creates a new XcoCommunicationException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoCommunicationException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoTransactionException">
      <summary>
            Exception that is thrown in case of transaction related errors (e.g. unknown transaction reference).
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoTransactionException.#ctor(System.String)">
      <summary>
            Creates a new XcoTransactionException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoTransactionException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoSerializationException">
      <summary>
            Exception that is thrown in case of an error related to serialization or deserialization of messages,
            message content or entry values.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoSerializationException.#ctor(System.String)">
      <summary>
            Creates a new XcoSerializationException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoSerializationException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoAspectNotFoundException">
      <summary>
            Exception that is thrown when an aspect that should be removed from the space or a container is not found.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoAspectNotFoundException.#ctor(System.String)">
      <summary>
            Creates a new XcoAspectAddException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoAspectNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoAspectAddException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Exceptions.XcoContainerPropertyException">
      <summary>
            Exception that is thrown in case of an error when trying to get or set a container property.
            </summary>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoContainerPropertyException.#ctor(System.String)">
      <summary>
            Creates a new XcoContainerPropertyException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoSpaces.Exceptions.XcoContainerPropertyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoContainerPropertyException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Contracts.Logging.ILogger">
      <summary>
            Interface definition for Class used for Logging in the Kernel. Defines methods
            for all needed message severity levels.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.Logging.ILogger.Start(System.String,System.Type)">
      <summary>
            Starts the logger.
            </summary>
      <param name="name">The (source) name the logger should use.</param>
      <param name="type">The class type for which this logger is used.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.Logging.ILogger.Debug(System.String)">
      <summary>
            Logs a debug message.
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.Logging.ILogger.Info(System.String)">
      <summary>
            Logs an Info message.
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.Logging.ILogger.Warn(System.String)">
      <summary>
            Logs a warning message.
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.Logging.ILogger.Error(System.String)">
      <summary>
            Logs an error message.
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.Logging.ILogger.Error(System.String,System.Exception)">
      <summary>
            Logs an error message.
            </summary>
      <param name="msg">The message to be logged.</param>
      <param name="ex">The exception that was thrown.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.Logging.ILogger.Fatal(System.String)">
      <summary>
            Logs a fatal error message.
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.Logging.ILogger.Fatal(System.String,System.Exception)">
      <summary>
            Logs a fatal error message.
            </summary>
      <param name="msg">The message to be logged.</param>
      <param name="ex">The exception that was thrown.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.ICoordinator">
      <summary>
            Interface for Coordinators. Defines all methods needed to manage coordination
            information from the Container for a certain coordination type.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ICoordinator.Read(XcoSpaces.Kernel.Selectors.Selector,XcoSpaces.Kernel.Transactions.ITransaction,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry})">
      <summary>
            Reads a list of Entries from this Coordinator that fits the given Selector.
            </summary>
      <param name="selector">Selector that must fit to the Coordinator, and that defines which and how many entries are selected.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <param name="preSelectedEntries">List of Entries that have already been selected with a previous Selector (in another coordinator), which means that only these Entries are allow be selected, or null if no Entries have been selected yet.</param>
      <returns>List of the Entries that have been selected, or null if the requirements of the Selector could not be met.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ICoordinator.Write(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Writes an IEntry to the Coordinator.
            </summary>
      <param name="entry">The IEntry that should be written.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>true if the IEntry could be written. False if the IEntry could not be written because of restrictions defined by the Coordinator (e.g. when an IEntry with the same key already exists in the KeyCoordinator).</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ICoordinator.Remove(System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Removes a list of Entries from the Coordinator. This is used to remove Entries
            that have previously been selected with the Read operation of a Coordinator
            of the Container this Coordinator belongs to. (Because every IEntry that is removed
            from the Container also has to be removed from every Coordinator.)
            </summary>
      <param name="entries">The Entries to be removed.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>The number of Entries that have been removed from the Coordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ICoordinator.GetNext(XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Gets the IEntry that should be removed next from the coordinator. The IEntry is chosen that 
            would be the next one to be taken in a Take operation. This is used for Shift operations, 
            when the Container is full and an IEntry has to be removed to be able to write another IEntry
            to the Container. If the Coordinator has no implicit order and it is because of that 
            not defined which IEntry would be taken next, the IEntry to be removed is decided 
            specifically for the Coordinator (see the Coordinators for information about which 
            IEntry will be removed).
            </summary>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>The IEntry that should be removed, or null if no IEntry can be removed (only happens when Container is empty).</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ICoordinator.GetShifted(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Gets all Entries from the Coordinator that would not allow this IEntry to be
            added to the Coordinator. This is used when an IEntry is added with Shift operation,
            where all Entries are removed from the Container that would not allow the IEntry
            to be written into the Container (e.g. Entries with the same key in a KeyCoordinator)
            </summary>
      <param name="entry">The IEntry that is written to the Container with Shift.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>The list of Entries that have to be removed from the Coordinator, or null if no Entries have to be removed.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ICoordinator.SelectorFits(XcoSpaces.Kernel.Selectors.Selector)">
      <summary>
            Checks if the Selector fits to the Coordinator (in other words belongs to this Coordinator).
            </summary>
      <param name="selector">The Selector to be checked.</param>
      <returns>true if the Selector fits to this Coordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ICoordinator.SetContainerMemory(XcoSpaces.Kernel.Container.IContainerMemory)">
      <summary>
            Sets the ContainerMemory. This method needs to be called before the Coordinator 
            can be used, because the Coordinator saves all coordination information in the 
            ContainerMemory.
            </summary>
      <param name="mem">The ContainerMemory of the Container that the Coordinator belongs to.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.ICoordinator.GetProperty(System.String)">
      <summary>
            Reads a property from the Coordinator. An Exception is thrown if the property name is not
            defined.
            </summary>
      <param name="propertyName">The name of the property that should be read.</param>
      <returns>The read property value.</returns>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.ICoordinator.AllowsEntryLocking">
      <summary>
            True if the coordinator allows locking at entry level, false if it only allows locking at
            container level.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.IContainerMemory">
      <summary>
            Interface for ContainerMemory, that manages the data stored in a Container.
            (Probably subject to change as soon as persistency and replication profiles
            are implemented.)
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.IContainerMemory.Allocate">
      <summary>
            Allocates a new memory cell in the container memory.
            </summary>
      <returns>The new memory cell.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.IContainerMemory.Free(XcoSpaces.Kernel.Container.IMemoryCell)">
      <summary>
            Removes the given memory cell from the container memory.
            </summary>
      <param name="cell">The memory cell to be removed.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Selectors.Selector">
      <summary>
            Base Class for Selectors, that are used to specify which Entries are read in a
            read operation, or to specify the coordination properties when writing Entries
            to a Container (like key value or vector index)
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Selectors.Selector.COUNT_ALL">
      <summary>
            Constant to be used for Selector count value, when all available Entries should be returned. This
            also means that the read operation will not block if no Entries are available, but return an empty
            list of Entries.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.Selector.#ctor(System.Int32)">
      <summary>
            Creates a new Selector.
            </summary>
      <param name="count">The number of Entries that should be read (only when used in a read operation). A read operation will block until the defined number of Entries is available. Use Selector.CountAll to read all available Entries from a Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.Selector.#ctor">
      <summary>
            Creates a new Selector with a default count of 1.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.Selector.CreateCoordinator">
      <summary>
            Creates a Coordinator for this Selector that can be used to coordinate the Entries in a
            Container with the coordination type of this Selector.
            </summary>
      <returns>A Coordinator that can handle the coordination information of this Selector.</returns>
    </member>
    <member name="P:XcoSpaces.Kernel.Selectors.Selector.Count">
      <summary>
            The number of Entries that should be read (only when used in a read operation). A read 
            operation will block until the defined number of Entries is available. Use Selector.CountAll 
            to read all available Entries from a Container.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Selectors.Selector.HasCountAll">
      <summary>
            True if all available Entries should be read (only when used in a read operation). This also 
            means that the read operation will not block if no Entries are available, but return an empty
            list of Entries.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Transactions.ITransactionLog">
      <summary>
            Interface for anything that can be Logged in a Transaction. Currently that is:
            - TransactionLog, representing a single action in a Transaction that can be rolled back
            - TransactionLock, representing a Lock that has been acquired for a Transaction
            - Transaction itself, when being the child Transaction of another one
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.ITransactionLog.Commit">
      <summary>
            The log object commits itself.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.ITransactionLog.Rollback">
      <summary>
            The log object rolls back itself.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.IMemoryCell">
      <summary>
            Interface definition for a single memory cell of a container memory,
            to store (entry or coordination) information of a container.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.IMemoryCell.Value">
      <summary>
            The value that is stored in this memory cell.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Transactions.ITransaction">
      <summary>
            Interface definition for a Transaction that defines everything needed for coordinators
            to store their Transaction related information within the Transaction.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Transactions.ITransaction.AddLog(XcoSpaces.Kernel.Transactions.ITransactionLog)">
      <summary>
            Adds a new Transaction log to the log list of this transaction. A coordinator has
            to add a log to the Transaction for everything that needs further action when this
            Transaction is prepared, committed or rolled back.
            </summary>
      <param name="log">The TransactionLog to be added.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Transactions.ITransaction.RootTx">
      <summary>
            The root Transaction of this (child) Transaction. Since every operation has its own child
            Transaction, this attribute can be used to access the Transaction that was actually used for
            the operation from outside. 
            Note: This should never be used for writing a log to the root transaction, logs should
            always be added to the given child Transaction.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.IEntry">
      <summary>
            Interface definition for an entry that can be stored in a Container. An Entry holds 
            the stored value (object) and a list of Selectors that define how this Entry is coordinated 
            in the Container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.IEntry.Serialize">
      <summary>
            Serializes the value of this Entry.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.IEntry.Selectors">
      <summary>
            List of Selectors that define how the Entry is coordinated in the Container.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.IEntry.Value">
      <summary>
            The value stored in this Entry.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.IEntry.Type">
      <summary>
            The value stored in this Entry.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.IEntry.KeepSerialized">
      <summary>
            True if the Entry value is kept serialized.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Contracts.ThreadDispatcher.IDispatchable">
      <summary>
            Interface definition for objects that can be dispatched with
            an IThreadDispatcher.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Contracts.ThreadDispatcher.IThreadDispatcher">
      <summary>
            Interface for Classes to handle the Threads of the XCoreProcessor, for concurrent message
            processing.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.ThreadDispatcher.IThreadDispatcher.QueueMessage(XcoSpaces.Kernel.Contracts.ThreadDispatcher.IDispatchable)">
      <summary>
            Method to be called to send a message to the ThreadPool for processing.
            </summary>
      <param name="msg">The message to be processed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.ThreadDispatcher.IThreadDispatcher.Start(XcoSpaces.Kernel.Contracts.ThreadDispatcher.ProcessMessageDelegate)">
      <summary>
            Starts the ThreadDispatcher.
            </summary>
      <param name="processMessage">The method to be called for a message to be processed  </param>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.ThreadDispatcher.IThreadDispatcher.Stop">
      <summary>
            Stops the ThreadDispatcher.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Contracts.ThreadDispatcher.ProcessMessageDelegate">
      <summary>
            Delegate defining the method to be called for a message to be processed.
            </summary>
      <param name="msg">The message to be processed.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Logging.TraceSource.Logger">
      <summary>
            Logger class used for logging in the Kernel. Uses the .Net TraceSource class to output 
            the log messages. Settings for this Logger can be easily done in the App.config.
            By default the Logger only outputs critical errors.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Logging.TraceSource.Logger.#ctor">
      <summary>
            Creates a new Logger.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Logging.TraceSource.Logger.Start(System.String,System.Type)">
      <summary>
            Starts the Logger.
            </summary>
      <param name="name">The source name that is used by the TraceSource class and can be referenced in the config.</param>
      <param name="type">The type of the logged class. This information is not used by now.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Logging.TraceSource.Logger.Debug(System.String)">
      <summary>
            Logs a debug message (using TraceEventType.Verbose).
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Logging.TraceSource.Logger.Info(System.String)">
      <summary>
            Logs an Info message (using TraceEventType.Information).
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Logging.TraceSource.Logger.Warn(System.String)">
      <summary>
            Logs a warning message (using TraceEventType.Warning).
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Logging.TraceSource.Logger.Error(System.String)">
      <summary>
            Logs an error message (using TraceEventType.Error).
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Logging.TraceSource.Logger.Error(System.String,System.Exception)">
      <summary>
            Logs an error message (using TraceEventType.Error).
            </summary>
      <param name="msg">The message to be logged.</param>
      <param name="ex">The exception that was thrown.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Logging.TraceSource.Logger.Fatal(System.String)">
      <summary>
            Logs a fatal error message (using TraceEventType.Critical).
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Logging.TraceSource.Logger.Fatal(System.String,System.Exception)">
      <summary>
            Logs a fatal error message (using TraceEventType.Critical).
            </summary>
      <param name="msg">The message to be logged.</param>
      <param name="ex">The exception that was thrown.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Microkernel.EmbeddedConfigReader">
      <summary>
            Provides methods for reading a configuration file that is embedded into an Assembly.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Microkernel.EmbeddedConfigReader.GetEmbeddedConfigStream(System.Reflection.Assembly,System.String)">
      <summary>
            Gets a stream for reading an embedded resource.
            </summary>
      <param name="assembly">The assembly from where the resource should be read.</param>
      <param name="resourceName">The name of the embedded resource.</param>
      <returns>A Stream for reading the resource, or null if the resource could not be read.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Microkernel.EmbeddedConfigReader.GetConfigStreamData(System.IO.Stream,System.String)">
      <summary>
            Reads an XML node with the given name from a (XML) Stream.
            </summary>
      <param name="stream">The Stream from which the node should be read.</param>
      <param name="xmlNodeName">The name of the node.</param>
      <returns>The XmlNode that has been read, or null if no node with this name has been found.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Microkernel.EmbeddedConfigReader.GetEmbeddedConfig(System.Reflection.Assembly,System.String,System.String)">
      <summary>
            Reads a configuration from a resource that is embedded into an Assembly.
            </summary>
      <param name="assembly">The Assembly that contains the embedded resource.</param>
      <param name="resourceName">The name of the embedded resource.</param>
      <param name="xmlNodeName">The name of the xml node that contains the configuration.</param>
      <returns>The XmlNode that contains the configuration, or null if the configuration could not be read.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Microkernel.ServiceConfigSectionHandler">
      <summary>
            ConfigurationSectionHandler for reading the service configuration from the app.config
            file. Every line of the service configuration defines a binding of an implementation to
            a certain interface. The configuration has to look like that:
            <pre>
            &lt;add interface="interfacename,assemblyname" implementation="classname,assemblyname"/&gt;
            </pre></summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Microkernel.ServiceConfig">
      <summary>
            A single interface+implementation configuration contained in the configuration file.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Microkernel.DynamicBinder">
      <summary>
            The DynamicBinder is the main class of the Microkernel. It manages a list of bindings, each 
            containing an interface type and an implementation type that implements this interface.
            It contains methods to load the binding configuration from app.config and an embedded 
            configuration file, and to automatically instantiate an object for a given interface that 
            is contained in the binding configuration.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Microkernel.DynamicBinder.#ctor">
      <summary>
            Creates a new DynamicBinder.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Microkernel.DynamicBinder.LoadBindingsFromConfig(System.String,System.String)">
      <summary>
            Loads the binding configuration from the app.config and an embedded configuration file.
            The configuration is first loaded from the app.config, and only bindings for interfaces
            that are not already contained there are loaded from the embedded configuration. This means
            that only interfaces that are not bound to their standard implementation need to be added
            to the app.config. The embedded configuration should therefore define a standard binding
            for every interface that needs to be managed by the DynamicBinder.
            For the configuration to be read correctly from the app.config, the ServiceConfigSectionHandler
            class has to be defined as ConfigurationSectionReader in the &lt;configSections&gt; section of the
            app.config file for the section containing the config.
            A line in the configuration that describes a certain binding has to look like this:
            <pre>
            &lt;add interface="interfacename,assemblyname" implementation="classname,assemblyname"/&gt;
            
            All the bindings in the configuration are checked, if they fulfill the following:
            - the interface type must be an interface
            - the implementation type must implement this interface
            - the implementation type must not be abstract
            - the implementation type must have an empty constructor (so the DynamicBinder can instantiate it)
            - instead of or in addition to the interface, a name can be defined for instantiating the implementation class by this name
            </pre></summary>
      <param name="xmlSectionName">The name of the section in the xml containing the configuration (like "XcoSpaces.ConfigServices").</param>
      <param name="embeddedConfig">The name of the embedded configuration file.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Microkernel.DynamicBinder.SetBinding``2">
      <summary>
            Manually sets a binding of an interface to an implementation type.
            </summary>
      <typeparam name="IT">The interface.</typeparam>
      <typeparam name="T">The class implementing this interface and an empty constructor.</typeparam>
    </member>
    <member name="M:XcoSpaces.Kernel.Microkernel.DynamicBinder.SetNamedBinding(System.String,System.Type)">
      <summary>
            Manually sets a binding of a certain name to an implementation type. The type must
            implement an empty constructor.
            </summary>
      <param name="name">The name of the binding which can then be used for instantiation.</param>
      <param name="type">The type that should be instantiated by this name.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Microkernel.DynamicBinder.CreateInstance``1">
      <summary>
            Creates an Instance for the given interface, if this interface is contained in the
            binding configuration. The class that is bound to this interface is instantiated by using
            the empty constructor of this class.
            </summary>
      <typeparam name="TInterface">The interface for which an instance is needed.</typeparam>
      <returns>Instance of the class that is bound to this interface.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Microkernel.DynamicBinder.CreateInstance(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Creates an instance of the given type. The type must have an empty constructor, otherwise an exception is thrown.
            The method additionally allows inserting values into fields or properties of the created instance that are marked 
            with the PropertyAttribute. The given properties list must contain values for all fields and properties that are
            marked with this attribute, otherwise an exception will be thrown.
            </summary>
      <param name="type">The type from which the instance should be created.</param>
      <param name="properties">The list of properties that should be assigned to fields of the instance that are marked with the PropertyAttribute. The key must be the name of the property, the value must be the value that should be assigned.</param>
      <returns>The created instance.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Microkernel.DynamicBinder.CreateInstance(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Creates an instance of the type that is bound to the given name. An error will be thrown if the given name is not
            contained in the binding configuration. The type must have an empty constructor, otherwise an exception is thrown.
            The method additionally allows inserting values into fields or properties of the created instance that are marked 
            with the PropertyAttribute. The given properties list must contain values for all fields and properties that are
            marked with this attribute, otherwise an exception will be thrown.
            </summary>
      <param name="name">The name from which the bound type should be instantiated.</param>
      <param name="properties">The list of properties that should be assigned to fields of the instance that are marked with the PropertyAttribute. The key must be the name of the property, the value must be the value that should be assigned.</param>
      <returns>The created instance.</returns>
    </member>
    <member name="P:XcoSpaces.Kernel.Microkernel.DynamicBinder.Instance">
      <summary>
            Gets a singleton instance of the DynamicBinder.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.ThreadDispatcher.ThreadPool.ThreadDispatcher">
      <summary>
            ThreadHandler that uses the .Net ThreadPool class to handle the Threads of the core.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.ThreadDispatcher.ThreadPool.ThreadDispatcher.QueueMessage(XcoSpaces.Kernel.Contracts.ThreadDispatcher.IDispatchable)">
      <summary>
            Method to be called to send a message to the ThreadPool for processing.
            </summary>
      <param name="msg">The message to be processed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.ThreadDispatcher.ThreadPool.ThreadDispatcher.Process(System.Object)">
      <summary>
            Method needed for the ThreadPool (because the QueueUserWorkItem method only takes a method
            with an object parameter).
            </summary>
      <param name="msg">The message to be processed.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.ThreadDispatcher.ThreadPool.ThreadDispatcher.Start(XcoSpaces.Kernel.Contracts.ThreadDispatcher.ProcessMessageDelegate)">
      <summary>
            Nothing needs to be done here, because .Net Threadpool doesn't need to be created
            or destroyed.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.ThreadDispatcher.ThreadPool.ThreadDispatcher.Stop">
      <summary>
            Nothing needs to be done here, because .Net Threadpool doesn't need to be created
            or destroyed.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Selectors.LifoSelector">
      <summary>
            Selector for Lifo Coordination. Because Fifo is an implicit order coordination type,
            it is not necessary to use the Selector when writing an Entry to a Fifo coordinated
            Container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.LifoSelector.#ctor(System.Int32)">
      <summary>
            Creates a new LifoSelector.
            </summary>
      <param name="count">The number of Entries that should be read (only when used in a read operation). A read operation will block until the defined number of Entries is available. Use Selector.CountAll to read all available Entries from a Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.LifoSelector.#ctor">
      <summary>
            Creates a new LifoSelector with a default count of 1.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.LifoSelector.CreateCoordinator">
      <summary>
            Creates a LifoCoordinator that can be used to coordinate the Entries in a Container with 
            the lifo coordination type.
            </summary>
      <returns>A new LifoCoordinator.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Selectors.FifoSelector">
      <summary>
            Selector for Fifo Coordination. Because Fifo is an implicit order coordination type,
            it is not necessary to use the Selector when writing an Entry to a Fifo coordinated
            Container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.FifoSelector.#ctor(System.Int32)">
      <summary>
            Creates a new FifoSelector.
            </summary>
      <param name="count">The number of Entries that should be read (only when used in a read operation). A read operation will block until the defined number of Entries is available. Use Selector.CountAll to read all available Entries from a Container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.FifoSelector.#ctor">
      <summary>
            Creates a new FifoSelector with a default count of 1.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.FifoSelector.CreateCoordinator">
      <summary>
            Creates a FifoCoordinator that can be used to coordinate the Entries in a Container with 
            the fifo coordination type.
            </summary>
      <returns>A new FifoCoordinator.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Selectors.ILindaMatchable">
      <summary>
            Interface that has to be implemented by all classes used as entry values
            in a Linda coordinated Container.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.ILindaMatchable.Matches(XcoSpaces.Kernel.Selectors.ILindaMatchable)">
      <summary>
            Checks if the ILindaMatchable object matches to another one
            (the "query" object). This is called by a container with linda
            coordination in a read operation to select the entries from the 
            container that match to a certain query.
            </summary>
      <param name="query">The query object to which this one should match.</param>
      <returns>True if the ILindaMatchable matches to the query.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Selectors.LabelSelector">
      <summary>
            Abstract LabelSelector class that is the base class of the generic LabelSelector.
            Defines the properties of the LabelSelector that don't depend on genericity.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Selectors.LabelSelector.PROPERTY_LABELS">
      <summary>
            Property name for reading the list of label values from a certain label in a container.
            A List with the label type as generic type is returned when this property is read.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.LabelSelector.#ctor(System.String)">
      <summary>
            Creates a new LabelSelector with a default count of 1.
            </summary>
      <param name="name">The name of the label.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.LabelSelector.#ctor(System.Int32,System.String)">
      <summary>
            Creates a new LabelSelector.
            </summary>
      <param name="count">The number of Entries that should be read (only when used in a read operation). A read operation will block until the defined number of Entries is available. Use Selector.CountAll to read all available Entries from a Container.</param>
      <param name="name">The name of the label.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Selectors.LabelSelector.Name">
      <summary>
            The name of the label.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Selectors.LabelSelector.LabelType">
      <summary>
            The type of the label.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Selectors.LabelSelector`1">
      <summary>
            Selector for Label Coordination.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.LabelSelector`1.#ctor(System.Int32,System.String,`0[])">
      <summary>
            Creates a new LabelSelector.
            </summary>
      <param name="count">The number of Entries that should be read (only when used in a read operation). A read operation will block until the defined number of Entries is available. Use Selector.CountAll to read all available Entries from a Container.</param>
      <param name="name">The name of the label (that has been defined when the Container was created).</param>
      <param name="labelValues">The value of the label of an Entry that should be written to a container (in a write operation), or the label values of the Entries that should be read from the container (in a read operation). Note that in a read operation, it only makes sense to define a count that is smaller or equal to the number of label values, because otherwise the count could never be fulfilled.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.LabelSelector`1.#ctor(System.String,`0[])">
      <summary>
            Creates a new LabelSelector with a default count of 1.
            </summary>
      <param name="name">The name of the label (that has been defined when the Container was created).</param>
      <param name="labelValues">The value of the label of an Entry that should be written to a container, or the label values of the Entries that should be read from the container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.LabelSelector`1.CreateCoordinator">
      <summary>
            Creates a LabelCoordinator that can be used to coordinate the Entries in a Container with 
            the label coordination type.
            </summary>
      <returns>A new LabelCoordinator.</returns>
    </member>
    <member name="P:XcoSpaces.Kernel.Selectors.LabelSelector`1.LabelType">
      <summary>
            The type of the label.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Selectors.LabelSelector`1.LabelValues">
      <summary>
            The value of the key of an Entry that should be written to a container, or the key values of the Entries that should be read from the container.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Selectors.LindaSelector">
      <summary>
            Selector for Linda Coordination. A LindaSelector only needs to be used when reading,
            for selecting the entries from the container that are matching the query object.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.LindaSelector.#ctor(System.Int32,XcoSpaces.Kernel.Selectors.ILindaMatchable)">
      <summary>
            Creates a new LindaSelector.
            </summary>
      <param name="count">The number of Entries that should be read (only when used in a read operation). A read operation will block until the defined number of Entries is available. Use Selector.CountAll to read all available Entries from a Container.</param>
      <param name="query">The query object that is used for matching with the entries in the container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.LindaSelector.#ctor(XcoSpaces.Kernel.Selectors.ILindaMatchable)">
      <summary>
            Creates a new LindaSelector with a default count of 1.
            </summary>
      <param name="query">The query object that is used for matching with the entries in the container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.LindaSelector.#ctor">
      <summary>
            Creates a new LindaSelector with a default count of 1.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.LindaSelector.CreateCoordinator">
      <summary>
            Creates a LindaCoordinator that can be used to coordinate the Entries in a Container with 
            the linda coordination type.
            </summary>
      <returns>A new LindaCoordinator.</returns>
    </member>
    <member name="P:XcoSpaces.Kernel.Selectors.LindaSelector.Query">
      <summary>
            The query object that is used for matching with the entries in the container.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Coordinators.LindaCoordinator">
      <summary>
            Coordinator for Linda coordination type. Entries are only allowed to be added when their
            value implements the ILindaMatchable interface. When reading, a LindaSelector must be used.
            The query object contained in the Selector is used to choose witch Entries are read (by
            calling the ILindaMatchable.Matches() method).
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LindaCoordinator.Read(XcoSpaces.Kernel.Selectors.Selector,XcoSpaces.Kernel.Transactions.ITransaction,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry})">
      <summary>
            Reads a list of Entries from this Coordinator that fits the given Selector.
            </summary>
      <param name="selector">Selector that must fit to the Coordinator, and that defines which and how many entries are selected.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <param name="preSelectedEntries">List of Entries that have already been selected with a previous Selector (in another coordinator), which means that only these Entries are allow be selected, or null if no Entries have been selected yet.</param>
      <returns>List of the Entries that have been selected, or null if the requirements of the Selector could not be met.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LindaCoordinator.Write(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Writes an IEntry to the Coordinator.
            </summary>
      <param name="entry">The IEntry that should be written.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>Always true, because it never happens that an IEntry cannot be written in a LindaCoordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LindaCoordinator.Remove(System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Removes a list of Entries from the Coordinator. This is used to remove Entries
            that have previously been selected with the Read operation of a Coordinator
            of the Container this Coordinator belongs to. (Because every IEntry that is removed
            from the Container also has to be removed from every Coordinator.)
            </summary>
      <param name="entries">The Entries to be removed.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>The number of Entries that have been removed from the Coordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LindaCoordinator.GetNext(XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Gets the IEntry that should be removed next from the Coordinator. This is used for 
            Shift operations, when the Container is full and an IEntry has to be removed to be 
            able to write another IEntry to the Container. With Linda coordination, a randomly 
            chosen IEntry is removed.
            </summary>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>The IEntry that has to be removed, or null if no IEntry can be removed (only happens when Container is empty).</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LindaCoordinator.GetShifted(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Gets all Entries from the Coordinator that would not allow this IEntry to be
            added to the Coordinator. In Linda coordination, Entries never have to be removed
            to allow another IEntry to be added, so this method always returns null.
            </summary>
      <param name="entry">The IEntry that is written to the Container with Shift.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>null, because no Entries have to be removed for Shift in Linda coordination.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LindaCoordinator.SelectorFits(XcoSpaces.Kernel.Selectors.Selector)">
      <summary>
            Checks if the Selector fits to the Coordinator (in other words belongs to this Coordinator).
            This is the case if the Selector is of type LindaSelector.
            </summary>
      <param name="selector">The Selector to be checked.</param>
      <returns>true if the Selector fits to this Coordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LindaCoordinator.SetContainerMemory(XcoSpaces.Kernel.Container.IContainerMemory)">
      <summary>
            Sets the ContainerMemory. This method needs to be called before the Coordinator 
            can be used, because the Coordinator saves all coordination information in the 
            ContainerMemory.
            </summary>
      <param name="mem">The ContainerMemory of the Container that the Coordinator belongs to.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LindaCoordinator.GetProperty(System.String)">
      <summary>
            Reads a property from the Coordinator. This method always throws an Exception because
            the LindaCoordinator has no properties that can be read.
            </summary>
      <param name="propertyName">The name of the property that should be read.</param>
      <returns>The read property value.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LindaCoordinator.Rollback(XcoSpaces.Kernel.Container.Coordinators.TransactionLog)">
      <summary>
            Rolls back an operation that has been done in this Coordinator.
            </summary>
      <param name="log">The ITransaction log entry, that holds the information about the operation that has to be rolled back.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Coordinators.LindaCoordinator.AllowsEntryLocking">
      <summary>
            True if the coordinator allows locking at entry level, false if it only allows locking at
            container level.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Selectors.KeySelector">
      <summary>
            Abstract KeySelector class that is the base class of the generic KeySelector.
            Defines the properties of the KeySelector that don't depend on genericity.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Selectors.KeySelector.PROPERTY_KEYS">
      <summary>
            Property name for reading the list of key values from a certain key in a container.
            A List with the key type as generic type is returned when this property is read.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.KeySelector.#ctor(System.String)">
      <summary>
            Creates a new KeySelector with a default count of 1.
            </summary>
      <param name="name">The name of the key.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.KeySelector.#ctor(System.Int32,System.String)">
      <summary>
            Creates a new KeySelector.
            </summary>
      <param name="count">The number of Entries that should be read (only when used in a read operation). A read operation will block until the defined number of Entries is available. Use Selector.CountAll to read all available Entries from a Container.</param>
      <param name="name">The name of the key.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Selectors.KeySelector.Name">
      <summary>
            The name of the key.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Selectors.KeySelector.KeyType">
      <summary>
            The type of the key.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Selectors.KeySelector`1">
      <summary>
            Selector for Key Coordination.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.KeySelector`1.#ctor(System.Int32,System.String,`0[])">
      <summary>
            Creates a new KeySelector.
            </summary>
      <param name="count">The number of Entries that should be read (only when used in a read operation). A read operation will block until the defined number of Entries is available. Use Selector.CountAll to read all available Entries from a Container.</param>
      <param name="name">The name of the key (that has been defined when the Container was created).</param>
      <param name="keyValues">The value of the key of an Entry that should be written to a container (in a write operation), or the key values of the Entries that should be read from the container (in a read operation). Note that in a read operation, it only makes sense to define a count that is smaller or equal to the number of key values, because otherwise the count could never be fulfilled.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.KeySelector`1.#ctor(System.String,`0[])">
      <summary>
            Creates a new KeySelector with a default count of 1.
            </summary>
      <param name="name">The name of the key (that has been defined when the Container was created).</param>
      <param name="keyValues">The value of the key of an Entry that should be written to a container, or the key values of the Entries that should be read from the container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.KeySelector`1.CreateCoordinator">
      <summary>
            Creates a KeyCoordinator that can be used to coordinate the Entries in a Container with 
            the key coordination type.
            </summary>
      <returns>A new KeyCoordinator.</returns>
    </member>
    <member name="P:XcoSpaces.Kernel.Selectors.KeySelector`1.KeyType">
      <summary>
            The type of the key.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Selectors.KeySelector`1.KeyValues">
      <summary>
            The value of the key of an Entry that should be written to a container, or the key values of the Entries that should be read from the container.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Coordinators.FifoCoordinator">
      <summary>
            Coordinator for FIFO (First In First Out) coordination Type. Fifo is an
            implicit order type, which means that it cannot be affected and will always
            represent the order in which the entries were written to the container. 
            Coordination is simply done with a List, where Entries are added at the end, 
            and read from the start.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.FifoCoordinator.Read(XcoSpaces.Kernel.Selectors.Selector,XcoSpaces.Kernel.Transactions.ITransaction,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry})">
      <summary>
            Reads a list of Entries from this Coordinator that fits the given Selector.
            </summary>
      <param name="selector">Selector that must fit to the Coordinator, and that defines which and how many entries are selected.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <param name="preSelectedEntries">List of Entries that have already been selected with a previous Selector (in another coordinator), which means that only these Entries are allow be selected, or null if no Entries have been selected yet.</param>
      <returns>List of the Entries that have been selected, or null if the requirements of the Selector could not be met.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.FifoCoordinator.Write(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Writes an IEntry to the Coordinator.
            </summary>
      <param name="entry">The IEntry that should be written.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>Always true, because it never happens that an IEntry cannot be written in a FifoCoordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.FifoCoordinator.Remove(System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Removes a list of Entries from the Coordinator. This is used to remove Entries
            that have previously been selected with the Read operation of a Coordinator
            of the Container this Coordinator belongs to. (Because every IEntry that is removed
            from the Container also has to be removed from every Coordinator.)
            </summary>
      <param name="entries">The Entries to be removed.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>The number of Entries that have been removed from the Coordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.FifoCoordinator.GetNext(XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Gets the IEntry that should be removed next from the Coordinator. The IEntry is chosen that 
            would be the next one to be taken in a Take operation. This is used for Shift operations, 
            when the Container is full and an IEntry has to be removed to be able to write another IEntry
            to the Container.
            </summary>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>The IEntry that has to be removed, or null if no IEntry can be removed (only happens when Container is empty).</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.FifoCoordinator.GetShifted(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Gets all Entries from the Coordinator that would not allow this IEntry to be
            added to the Coordinator. In Fifo coordination, Entries never have to be removed
            to allow another IEntry to be added, so this method always returns null.
            </summary>
      <param name="entry">The IEntry that is written to the Container with Shift.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>null, because no Entries have to be removed for Shift in Fifo coordination.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.FifoCoordinator.SelectorFits(XcoSpaces.Kernel.Selectors.Selector)">
      <summary>
            Checks if the Selector fits to the Coordinator (in other words belongs to this Coordinator).
            This is the case if the Selector is of type FifoSelector.
            </summary>
      <param name="selector">The Selector to be checked.</param>
      <returns>true if the Selector fits to this Coordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.FifoCoordinator.SetContainerMemory(XcoSpaces.Kernel.Container.IContainerMemory)">
      <summary>
            Sets the ContainerMemory. This method needs to be called before the Coordinator 
            can be used, because the Coordinator saves all coordination information in the 
            ContainerMemory.
            </summary>
      <param name="mem">The ContainerMemory of the Container that the Coordinator belongs to.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.FifoCoordinator.GetProperty(System.String)">
      <summary>
            Reads a property from the Coordinator. This method always throws an Exception because
            the FifoCoordinator has no properties that can be read.
            </summary>
      <param name="propertyName">The name of the property that should be read.</param>
      <returns>The read property value.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.FifoCoordinator.Rollback(XcoSpaces.Kernel.Container.Coordinators.TransactionLog)">
      <summary>
            Rolls back an operation that has been done in this Coordinator.
            </summary>
      <param name="log">The ITransaction log entry, that holds the information about the operation that has to be rolled back.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Coordinators.FifoCoordinator.AllowsEntryLocking">
      <summary>
            True if the coordinator allows locking at entry level, false if it only allows locking at
            container level.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Coordinators.LabelCoordinator`1">
      <summary>
            Coordinator for Key coordination type. Key coordination is internally handled
            with a Dictionary. All Keys must be unique, an IEntry cannot be inserted if another
            one with the same Key is already there. KeySelectors for this Coordinator must use
            the same name and have the same generic Type to fit to this Coordinator.
            </summary>
      <typeparam name="TLabel">The Type of the Key (must implement the IComparable Interface)</typeparam>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LabelCoordinator`1.#ctor(System.String)">
      <summary>
            Creates a new LabelCoordinator.
            </summary>
      <param name="name">The name of the Label.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LabelCoordinator`1.Read(XcoSpaces.Kernel.Selectors.Selector,XcoSpaces.Kernel.Transactions.ITransaction,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry})">
      <summary>
            Reads a list of Entries from this Coordinator that fits the given Selector.
            </summary>
      <param name="selector">Selector that must fit to the Coordinator, and that defines which and how many entries are selected.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <param name="preSelectedEntries">List of Entries that have already been selected with a previous Selector (in another coordinator), which means that only these Entries are allow be selected, or null if no Entries have been selected yet.</param>
      <returns>List of the Entries that have been selected, or null if the requirements of the Selector could not be met.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LabelCoordinator`1.Write(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Writes an IEntry to the Coordinator. The IEntry must have a valid LabelSelector
            that fits to this Coordinator, else a XcoContainerWriteException is thrown.
            </summary>
      <param name="entry">The IEntry that should be written.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>Always true, because it never happens that an IEntry cannot be written in a VectorCoordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LabelCoordinator`1.Remove(System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Removes a list of Entries from the Coordinator. This is used to remove Entries
            that have previously been selected with the Read operation of a Coordinator
            of the Container this Coordinator belongs to. (Because every IEntry that is removed
            from the Container also has to be removed from every Coordinator.)
            </summary>
      <param name="entries">The Entries to be removed.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>The number of Entries that have been removed from the Coordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LabelCoordinator`1.GetNext(XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Returns an IEntry to be removed from the Coordinator. This is used for Shift operations, 
            when the Container is full and an IEntry has to be removed to be able to write another IEntry
            to the Container. With Label coordination, a randomly chosen IEntry is removed (always
            the one whose label is currently the first one in the list of labels, and that is the first in
            the list of entries for this label).
            </summary>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>The IEntry that has to be removed, or null if no IEntry can be removed (only happens when Container is empty).</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LabelCoordinator`1.GetShifted(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Gets all Entries from the Coordinator that would not allow this IEntry to be
            added to the Coordinator. In Label coordination, Entries never have to be removed
            to allow another IEntry to be added, so this method always returns null.
            </summary>
      <param name="entry">The IEntry that is written to the Container with Shift.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>null, because no Entries have to be removed for Shift in Label coordination.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LabelCoordinator`1.GetSelector(XcoSpaces.Kernel.IEntry)">
      <summary>
            Gets the Selector from the IEntry that fits to this Coordinator. The Selector must be of 
            type KeySelector with the same generic Key Type and name as the KeyCoordinator.
            </summary>
      <param name="entry">The IEntry where the Selector should be searched.</param>
      <returns>The Selector of this IEntry that fits to this Coordinator, or null if no fitting Selector was found.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LabelCoordinator`1.SelectorFits(XcoSpaces.Kernel.Selectors.Selector)">
      <summary>
            Checks if the Selector fits to the Coordinator (in other words belongs to this Coordinator).
            This is the case if the Selector is of type LabelSelector with the same generic Label Type and 
            name as the LabelCoordinator.
            </summary>
      <param name="selector">The Selector to be checked.</param>
      <returns>true if the Selector fits to this Coordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LabelCoordinator`1.SetContainerMemory(XcoSpaces.Kernel.Container.IContainerMemory)">
      <summary>
            Sets the ContainerMemory. This method needs to be called before the Coordinator 
            can be used, because the Coordinator saves all coordination information in the 
            ContainerMemory.
            </summary>
      <param name="mem">The ContainerMemory of the Container that the Coordinator belongs to.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LabelCoordinator`1.GetProperty(System.String)">
      <summary>
            Reads a property from the Coordinator. An Exception is thrown if the property name is not
            defined. The LabelCoordinator provides a property to read a list of labels.
            </summary>
      <param name="propertyName">The name of the property that should be read.</param>
      <returns>The read property value.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LabelCoordinator`1.Rollback(XcoSpaces.Kernel.Container.Coordinators.TransactionLog)">
      <summary>
            Rolls back an operation that has been done in this Coordinator. The Label of the IEntry
            is stored in the log's AdditionalInfo field so the operation can be rolled back easier.
            </summary>
      <param name="log">The ITransaction log entry, that holds the information about the operation that has to be rolled back.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Coordinators.LabelCoordinator`1.AllowsEntryLocking">
      <summary>
            True if the coordinator allows locking at entry level, false if it only allows locking at
            container level.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Coordinators.LifoCoordinator">
      <summary>
            Coordinator for LIFO (Last In First Out) coordination Type. Lifo is an
            implicit order type, which means that it cannot be affected and will always
            represent the order in which the entries were written to the container, with
            the IEntry to be the first that was written to the Container last. 
            Coordination is simply done with a List, where Entries are added at the start, 
            and also read from the start of the List.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LifoCoordinator.Read(XcoSpaces.Kernel.Selectors.Selector,XcoSpaces.Kernel.Transactions.ITransaction,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry})">
      <summary>
            Reads a list of Entries from this Coordinator that fits the given Selector.
            </summary>
      <param name="selector">Selector that must fit to the Coordinator, and that defines which and how many entries are selected.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <param name="preSelectedEntries">List of Entries that have already been selected with a previous Selector (in another coordinator), which means that only these Entries are allow be selected, or null if no Entries have been selected yet.</param>
      <returns>List of the Entries that have been selected, or null if the requirements of the Selector could not be met.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LifoCoordinator.Write(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Writes an IEntry to the Coordinator.
            </summary>
      <param name="entry">The IEntry that should be written.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>Always true, because it never happens that an IEntry cannot be written in a LifoCoordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LifoCoordinator.Remove(System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Removes a list of Entries from the Coordinator. This is used to remove Entries
            that have previously been selected with the Read operation of a Coordinator
            of the Container this Coordinator belongs to. (Because every IEntry that is removed
            from the Container also has to be removed from every Coordinator.)
            </summary>
      <param name="entries">The Entries to be removed.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>The number of Entries that have been removed from the Coordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LifoCoordinator.GetNext(XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Gets the IEntry that should be removed next from the Coordinator. The IEntry is chosen that 
            would be the next one to be taken in a Take operation. This is used for Shift operations, 
            when the Container is full and an IEntry has to be removed to be able to write another IEntry
            to the Container.
            </summary>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>The IEntry that has to be removed, or null if no IEntry can be removed (only happens when Container is empty).</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LifoCoordinator.GetShifted(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Gets all Entries from the Coordinator that would not allow this IEntry to be
            added to the Coordinator. In Lifo coordination, Entries never have to be removed
            to allow another IEntry to be added, so this method always returns null.
            </summary>
      <param name="entry">The IEntry that is written to the Container with Shift.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>null, because no Entries have to be removed for Shift in Lifo coordination.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LifoCoordinator.SelectorFits(XcoSpaces.Kernel.Selectors.Selector)">
      <summary>
            Checks if the Selector fits to the Coordinator (in other words belongs to this Coordinator).
            This is the case if the Selector is of type LifoSelector.
            </summary>
      <param name="selector">The Selector to be checked.</param>
      <returns>true if the Selector fits to this Coordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LifoCoordinator.SetContainerMemory(XcoSpaces.Kernel.Container.IContainerMemory)">
      <summary>
            Sets the ContainerMemory. This method needs to be called before the Coordinator 
            can be used, because the Coordinator saves all coordination information in the 
            ContainerMemory.
            </summary>
      <param name="mem">The ContainerMemory of the Container that the Coordinator belongs to.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LifoCoordinator.GetProperty(System.String)">
      <summary>
            Reads a property from the Coordinator. This method always throws an Exception because
            the LifoCoordinator has no properties that can be read.
            </summary>
      <param name="propertyName">The name of the property that should be read.</param>
      <returns>The read property value.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.LifoCoordinator.Rollback(XcoSpaces.Kernel.Container.Coordinators.TransactionLog)">
      <summary>
            Rolls back an operation that has been done in this Coordinator.
            </summary>
      <param name="log">The ITransaction log entry, that holds the information about the operation that has to be rolled back.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Coordinators.LifoCoordinator.AllowsEntryLocking">
      <summary>
            True if the coordinator allows locking at entry level, false if it only allows locking at
            container level.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Coordinators.TransactionLog">
      <summary>
            A single IEntry in the log of a Transaction, contains every information that is needed
            to roll back the operation for which this log entry has been created.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Coordinators.TransactionLog.CommitDelegate">
      <summary>
            Definition of the method that must be implemented for commit operations.
            </summary>
      <param name="log">The log IEntry that should be committed back.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Coordinators.TransactionLog.RollbackDelegate">
      <summary>
            Definition of the method that must be implemented for rollback operations.
            </summary>
      <param name="log">The log IEntry that should be rolled back.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.TransactionLog.#ctor(XcoSpaces.Kernel.Container.Coordinators.TransactionLogType,XcoSpaces.Kernel.Container.Coordinators.TransactionLog.CommitDelegate,XcoSpaces.Kernel.Container.Coordinators.TransactionLog.RollbackDelegate,XcoSpaces.Kernel.IEntry,System.Int32,System.Object)">
      <summary>
            Creates a new TransactionLog.
            </summary>
      <param name="type">The type of operation that is logged.</param>
      <param name="commitDelegate">The method that should be called when the operation is committed.</param>
      <param name="rollbackDelegate">The method that should be called when the operation is rolled back.</param>
      <param name="entry">The IEntry that was the target of the operation.</param>
      <param name="positionInfo">Information about the position of the IEntry that is needed for rollback.</param>
      <param name="additionalInfo">Any additional information that is needed for rollback.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.TransactionLog.#ctor(XcoSpaces.Kernel.Container.Coordinators.TransactionLogType,XcoSpaces.Kernel.Container.Coordinators.TransactionLog.CommitDelegate,XcoSpaces.Kernel.Container.Coordinators.TransactionLog.RollbackDelegate,XcoSpaces.Kernel.IEntry,System.Int32)">
      <summary>
            Creates a new TransactionLog.
            </summary>
      <param name="type">The type of operation that is logged.</param>
      <param name="commitDelegate">The method that should be called when the operation is committed.</param>
      <param name="rollbackDelegate">The method that should be called when the operation is rolled back.</param>
      <param name="entry">The IEntry that was the target of the operation.</param>
      <param name="positionInfo">Information about the position of the IEntry that is needed for rollback.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.TransactionLog.#ctor(XcoSpaces.Kernel.Container.Coordinators.TransactionLogType,XcoSpaces.Kernel.Container.Coordinators.TransactionLog.CommitDelegate,XcoSpaces.Kernel.Container.Coordinators.TransactionLog.RollbackDelegate,XcoSpaces.Kernel.IEntry)">
      <summary>
            Creates a new TransactionLog.
            </summary>
      <param name="type">The type of operation that is logged.</param>
      <param name="commitDelegate">The method that should be called when the operation is committed.</param>
      <param name="rollbackDelegate">The method that should be called when the operation is rolled back.</param>
      <param name="entry">The IEntry that was the target of the operation.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.TransactionLog.Commit">
      <summary>
            Performs a commit of the logged operation by calling the commit method that has been defined
            when creating this log entry, if one has been defined.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.TransactionLog.Rollback">
      <summary>
            Performs a rollback of the logged operation by calling the rollback method that has been defined
            when creating this log entry, if one has been defined.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.TransactionLog.ToString">
      <summary>
            Converts the TransactionLog into a String.
            </summary>
      <returns>String representation of the TransactionLog.</returns>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Coordinators.TransactionLog.Type">
      <summary>
            The type of operation that is logged.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Coordinators.TransactionLog.Entry">
      <summary>
            The Entry that was the target of the operation.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Coordinators.TransactionLog.PositionInfo">
      <summary>
            Information about the position of the IEntry that is needed for rollback.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Coordinators.TransactionLog.AdditionalInfo">
      <summary>
            Any additional information that is needed for rollback.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Coordinators.TransactionLogType">
      <summary>
            Types of coordinator operations that are logged in a Transaction.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Container.Coordinators.TransactionLogType.CoordinatorAdd">
      <summary>
            An Entry has been added to a Coordinator.
            </summary>
    </member>
    <member name="F:XcoSpaces.Kernel.Container.Coordinators.TransactionLogType.CoordinatorRemove">
      <summary>
            An Entry has been removed from a Coordinator.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Selectors.ListSelector">
      <summary>
            Selector for List Coordination.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.ListSelector.#ctor(System.Int32,System.String,System.Int32[])">
      <summary>
            Creates a new ListSelector.
            </summary>
      <param name="count">The number of Entries that should be read (only when used in a read operation). A read operation will block until the defined number of Entries is available. Use Selector.CountAll to read all available Entries from a Container.</param>
      <param name="name">The name of the list (that has been defined when the Container was created).</param>
      <param name="indices">The index of an Entry that should be written to a container (in a write operation), or the indices of the Entries that should be read from the container (in a read operation). Note that in a read operation, it only makes sense to define a count that is smaller or equal to the number of indices, because otherwise the count could never be fulfilled.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.ListSelector.#ctor(System.String,System.Int32[])">
      <summary>
            Creates a new ListSelector with a default count of 1.
            </summary>
      <param name="name">The name of the list (that has been defined when the Container was created).</param>
      <param name="indices">The index of an Entry that should be written to a container, or the indices of the Entries that should be read from the container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.ListSelector.#ctor(System.String,System.Boolean,System.Int32[])">
      <summary>
            Creates a new ListSelector with a default count of 1.
            </summary>
      <param name="name">The name of the list (that has been defined when the Container was created).</param>
      <param name="overwrite">Defines if an Entry should not be inserted at the given index, but overwrite the Entry that is currently at this index. This is only possible in Shift operation and will have no effect in any other operations.</param>
      <param name="indices">The index of an Entry that should be written to a container, or the indices of the Entries that should be read from the container.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Selectors.ListSelector.CreateCoordinator">
      <summary>
            Creates a ListCoordinator that can be used to coordinate the Entries in a Container with 
            the list coordination type.
            </summary>
      <returns>A new ListCoordinator.</returns>
    </member>
    <member name="P:XcoSpaces.Kernel.Selectors.ListSelector.Name">
      <summary>
            The name of the list.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Selectors.ListSelector.Indices">
      <summary>
            The index of an Entry that should be written to a container (in a write operation), or the indices 
            of the Entries that should be read from the container (in a read operation).
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Selectors.ListSelector.Overwrite">
      <summary>
            Defines if an Entry should not be inserted at the given index, but overwrite the Entry that is 
            currently at this index. This is only possible in Shift operation and will have no effect in 
            any other operations.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Coordinators.KeyCoordinator`1">
      <summary>
            Coordinator for Key coordination type. Key coordination is internally handled
            with a Dictionary. All Keys must be unique, an IEntry cannot be inserted if another
            one with the same Key is already there. KeySelectors for this Coordinator must use
            the same name and have the same generic Type to fit to this Coordinator.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.KeyCoordinator`1.#ctor(System.String)">
      <summary>
            Creates a new KeyCoordinator.
            </summary>
      <param name="name">The name of the Key.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.KeyCoordinator`1.Read(XcoSpaces.Kernel.Selectors.Selector,XcoSpaces.Kernel.Transactions.ITransaction,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry})">
      <summary>
            Reads a list of Entries from this Coordinator that fits the given Selector.
            </summary>
      <param name="selector">Selector that must fit to the Coordinator, and that defines which and how many entries are selected.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <param name="preSelectedEntries">List of Entries that have already been selected with a previous Selector (in another coordinator), which means that only these Entries are allow be selected, or null if no Entries have been selected yet.</param>
      <returns>List of the Entries that have been selected, or null if the requirements of the Selector could not be met.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.KeyCoordinator`1.Write(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Writes an IEntry to the Coordinator. The IEntry must have a valid KeySelector
            that fits to this Coordinator, else a XcoContainerWriteException is thrown.
            The IEntry can only be added when no other IEntry with this key is present, else
            false is returned which means the Operations has to be put to the wait container
            (and wait for the IEntry with this key to be removed, before this one can be added).
            </summary>
      <param name="entry">The IEntry that should be written.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>false if the key is already present and because of that the IEntry could not be added, otherwise true</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.KeyCoordinator`1.Remove(System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Removes a list of Entries from the Coordinator. This is used to remove Entries
            that have previously been selected with the Read operation of a Coordinator
            of the Container this Coordinator belongs to. (Because every IEntry that is removed
            from the Container also has to be removed from every Coordinator.)
            </summary>
      <param name="entries">The Entries to be removed.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>The number of Entries that have been removed from the Coordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.KeyCoordinator`1.GetNext(XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Returns an IEntry to be removed from the Coordinator. This is used for Shift operations, 
            when the Container is full and an IEntry has to be removed to be able to write another IEntry
            to the Container. With Key coordination, a randomly chosen IEntry is removed (always
            the one whose key is currently the first one in the list of keys).
            </summary>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>The IEntry that has to be removed, or null if no IEntry can be removed (only happens when Container is empty).</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.KeyCoordinator`1.GetShifted(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Gets all Entries from the Coordinator that would not allow this IEntry to be
            added to the Coordinator. An IEntry will be returned if it has the same key as
            the IEntry that should be written to the container.
            </summary>
      <param name="entry">The IEntry that is written to the Container with Shift.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>null if no IEntry has to be removed, or a list containing the IEntry that has to be removed.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.KeyCoordinator`1.GetSelector(XcoSpaces.Kernel.IEntry)">
      <summary>
            Gets the Selector from the IEntry that fits to this Coordinator. The Selector must be of 
            type KeySelector with the same generic Key Type and name as the KeyCoordinator.
            </summary>
      <param name="entry">The IEntry where the Selector should be searched.</param>
      <returns>The Selector of this IEntry that fits to this Coordinator, or null if no fitting Selector was found.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.KeyCoordinator`1.SelectorFits(XcoSpaces.Kernel.Selectors.Selector)">
      <summary>
            Checks if the Selector fits to the Coordinator (in other words belongs to this Coordinator).
            This is the case if the Selector is of type KeySelector with the same generic Key Type and 
            name as the KeyCoordinator.
            </summary>
      <param name="selector">The Selector to be checked.</param>
      <returns>true if the Selector fits to this Coordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.KeyCoordinator`1.SetContainerMemory(XcoSpaces.Kernel.Container.IContainerMemory)">
      <summary>
            Sets the ContainerMemory. This method needs to be called before the Coordinator 
            can be used, because the Coordinator saves all coordination information in the 
            ContainerMemory.
            </summary>
      <param name="mem">The ContainerMemory of the Container that the Coordinator belongs to.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.KeyCoordinator`1.GetProperty(System.String)">
      <summary>
            Reads a property from the Coordinator. An Exception is thrown if the property name is not
            defined. The KeyCoordinator provides a property to read a list of keys.
            </summary>
      <param name="propertyName">The name of the property that should be read.</param>
      <returns>The read property value.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.KeyCoordinator`1.Rollback(XcoSpaces.Kernel.Container.Coordinators.TransactionLog)">
      <summary>
            Rolls back an operation that has been done in this Coordinator. The Key of the IEntry
            is stored in the log's AdditionalInfo field so the operation can be rolled back easier.
            </summary>
      <param name="log">The ITransaction log entry, that holds the information about the operation that has to be rolled back.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Coordinators.KeyCoordinator`1.AllowsEntryLocking">
      <summary>
            True if the coordinator allows locking at entry level, false if it only allows locking at
            container level.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Container.Coordinators.ListCoordinator">
      <summary>
            Coordinator for List coordination type. The List behaves like List when adding and
            removing Entries. A ListCoordinator must be given a unique name, so the Container
            could have more than one ListCoordinator. ListSelectors for this Coordinator must
            use this name to fit to this Coordinator.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.ListCoordinator.#ctor(System.String)">
      <summary>
            Creates a new ListCoordinator.
            </summary>
      <param name="name">The name of the List.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.ListCoordinator.Read(XcoSpaces.Kernel.Selectors.Selector,XcoSpaces.Kernel.Transactions.ITransaction,System.Collections.Generic.List{XcoSpaces.Kernel.IEntry})">
      <summary>
            Reads a list of Entries from this Coordinator that fits the given Selector.
            </summary>
      <param name="selector">Selector that must fit to the Coordinator, and that defines which and how many entries are selected.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <param name="preSelectedEntries">List of Entries that have already been selected with a previous Selector (in another coordinator), which means that only these Entries are allow be selected, or null if no Entries have been selected yet.</param>
      <returns>List of the Entries that have been selected, or null if the requirements of the Selector could not be met.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.ListCoordinator.Write(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Writes an IEntry to the Coordinator. If the IEntry has a ListVecSelector, it is 
            inserted at the index given in the Selector. If the Selector doesn't provide an
            Index, or the IEntry has no Selector for this Coordinator, the IEntry is added at
            the end of the List.
            </summary>
      <param name="entry">The IEntry that should be written.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>Always true, because it never happens that an IEntry cannot be written in a ListCoordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.ListCoordinator.Remove(System.Collections.Generic.List{XcoSpaces.Kernel.IEntry},XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Removes a list of Entries from the Coordinator. This is used to remove Entries
            that have previously been selected with the Read operation of a Coordinator
            of the Container this Coordinator belongs to. (Because every IEntry that is removed
            from the Container also has to be removed from every Coordinator.)
            </summary>
      <param name="entries">The Entries to be removed.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>The number of Entries that have been removed from the Coordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.ListCoordinator.GetNext(XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Gets the IEntry that should be removed next from the Coordinator. This is used for Shift 
            operations, when the Container is full and an IEntry has to be removed to be able to write 
            another IEntry to the Container. With List coordination, the IEntry with the highest index 
            (which is the last in the Vector) will be returned.
            </summary>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>The IEntry that has to be removed, or null if no IEntry can be removed (only happens when Container is empty).</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.ListCoordinator.GetShifted(XcoSpaces.Kernel.IEntry,XcoSpaces.Kernel.Transactions.ITransaction)">
      <summary>
            Gets all Entries from the Coordinator that would not allow this IEntry to be
            added to the Coordinator. In List coordination, an IEntry will be returned if another
            IEntry should be shifted to the index of this one (this is the case if the ListSelector
            defines Overwrite=true).
            </summary>
      <param name="entry">The IEntry that is written to the Container with Shift.</param>
      <param name="t">The ITransaction in which the operation takes place.</param>
      <returns>A list containing the IEntry that should be removed, or null if no Entries should be removed.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.ListCoordinator.GetSelector(XcoSpaces.Kernel.IEntry)">
      <summary>
            Gets the Selector from the IEntry that fits to this Coordinator. The Selector must be of 
            type ListSelector with the same name as the ListCoordinator.
            </summary>
      <param name="entry">The IEntry where the Selector should be searched.</param>
      <returns>The Selector of this IEntry that fits to this Coordinator, or null if no fitting Selector was found.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.ListCoordinator.SelectorFits(XcoSpaces.Kernel.Selectors.Selector)">
      <summary>
            Checks if the Selector fits to the Coordinator (in other words belongs to this Coordinator).
            This is the case if the Selector is of type ListSelector and has the same name as the
            ListCoordinator.
            </summary>
      <param name="selector">The Selector to be checked.</param>
      <returns>true if the Selector fits to this Coordinator.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.ListCoordinator.SetContainerMemory(XcoSpaces.Kernel.Container.IContainerMemory)">
      <summary>
            Sets the ContainerMemory. This method needs to be called before the Coordinator 
            can be used, because the Coordinator saves all coordination information in the 
            ContainerMemory.
            </summary>
      <param name="mem">The ContainerMemory of the Container that the Coordinator belongs to.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.ListCoordinator.GetProperty(System.String)">
      <summary>
            Reads a property from the Coordinator. This method always throws an Exception because
            the ListCoordinator has no properties that can be read.
            </summary>
      <param name="propertyName">The name of the property that should be read.</param>
      <returns>The read property value.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Container.Coordinators.ListCoordinator.Rollback(XcoSpaces.Kernel.Container.Coordinators.TransactionLog)">
      <summary>
            Rolls back an operation that has been done in this Coordinator.
            </summary>
      <param name="log">The ITransaction log entry, that holds the information about the operation that has to be rolled back.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Container.Coordinators.ListCoordinator.AllowsEntryLocking">
      <summary>
            True if the coordinator allows locking at entry level, false if it only allows locking at
            container level.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Communication.WCF.RemoteSender">
      <summary>
            Sender for communication with remote spaces. Uses an IRemoteSpaceService to communicate
            with service hosts of remote spaces.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Communication.WCF.RemoteSender.LoadConfigurationDelegate">
      <summary>
            Supports differend sender-configurations
            </summary>
      <param name="epa">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.RemoteSender.Connect">
      <summary>
            Initiates a connection by calling the Connect method of the IRemoteSpaceService object.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.RemoteSender.SendDisable">
      <summary>
            Test - After channel shutdown, sending is not allowed
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.RemoteSender.Disconnect">
      <summary>
            Terminates the connection by calling the Disconnect method of the IRemoteSpaceService object.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.RemoteSender.SendMessage(XcoSpaces.Kernel.Contracts.Communication.IMessage)">
      <summary>
            Sends a message by first serializing it and the using the IRemoteSpaceService object to send it.
            The last send time is set to the current time.
            </summary>
      <param name="msg">The Message to be sent.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Communication.WCF.RemoteSender.SessionID">
      <summary>
            The session id of the client channel that is used by communicating with the remote space service.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Communication.WCF.RemoteSender.LastSendTime">
      <summary>
            The time when this RemoteSender has last sent a message.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Communication.WCF.LoggerFactory">
      <summary>
            Factory class for creating Loggers.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.LoggerFactory.CreateInstance(System.String,System.Type)">
      <summary>
            Creates a new Logger.
            </summary>
      <param name="name">The name under which the messages should be logged.</param>
      <param name="type">The type of the logged class.</param>
      <returns>A new Logger.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Communication.WCF.SerializationHelper">
      <summary>
            Helper class for serialization and deserialization of object (used in
            communication with remote spaces).
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.SerializationHelper.Serialize(System.Object)">
      <summary>
            Serializes an object into a byte array.
            </summary>
      <param name="element">The object to be serialized.</param>
      <returns>The serialized object.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.SerializationHelper.Serialize(System.Object,System.String)">
      <summary>
            Serializes an object into a byte array. This is for situations where the
            address to which an object to be serialized is sent can be of importance.
            In this case ignores the destination address because it is not needed for
            serialization.
            </summary>
      <param name="element">The object to be serialized.</param>
      <param name="destAddress">The address of the space that is the destination the object to be serialized.</param>
      <returns>The serialized object.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.SerializationHelper.Deserialize(System.Byte[])">
      <summary>
            Deserializes an object from a byte array.
            </summary>
      <param name="element">The serialized object.</param>
      <returns>The object that has been deserialized.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.SerializationHelper.Deserialize(System.IO.Stream)">
      <summary>
            Deserializes an object from a byte array.
            </summary>
      <param name="stream">The serialized object.</param>
      <returns>The object that has been deserialized.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService">
      <summary>
            Service that manages incoming and outgoing messages from/to remote spaces by use of WCF. Incoming
            messages are received by a hosted SpacePortal service. Outgoing messages are sent by RemoteSender 
            objects, the currently open RemoteSenders are managed in a list. A Timer regularly checks if any 
            connections to remote spaces have run into a timeout, and closes and removes such connections.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.LoadHostConfigurationDelegate">
      <summary>
            Supports different host-configurations
            </summary>
      <param name="coreUri">Uri from core</param>
      <param name="spacePortal">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.NewRemoteSenderDelegate">
      <summary>
            Supports different constructors
            </summary>
      <param name="addr">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.ShutdownRemoteSender(System.String)">
      <summary>
            Close the RemoteSender because the connected channel has closed
            </summary>
      <param name="channelSessionID">sessionID of closed channel</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.#ctor(System.Int32)">
      <summary>
            Creates a new RemoteServer.
            </summary>
      <param name="port">The port that should be used.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.#ctor">
      <summary>
            Creates a new RemoteServer.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.LoadConfiguration(System.Uri,XcoSpaces.Kernel.Communication.WCF.SpacePortal)">
      <summary>
            Load specific configuration settings.       
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.RunServiceHost">
      <summary>
            Method to start in an own thread, that opens a new service host at the given port to receive
            messages from remote kernels. The SpacePortal class is used as service.
            Note: ServiceHost must run in an own thread, otherwise the host will not work when used in
            Windows Forms Applications. This seems to be the case because of some collision with messaging
            in WCF and Windows Forms.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.CheckConnectionTimeouts(System.Object)">
      <summary>
            Checks if any RemoteSenders have run into a timeout (not sent any message for a 
            defined amount of time), and removes these senders and closes their connections.
            </summary>
      <param name="timerInfo">Field for additional info from the timer that starts the method (is ignored because not additional info needed).</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.SendMessage(XcoSpaces.Kernel.Contracts.Communication.IMessage)">
      <summary>
            Sends a message to a remote space. If no remote sender for this message exists yet,
            a new RemoteSender is created and stored in the list of currently open RemoteSenders.
            If a RequestMessage can not be sent, an ResponseMessage with an error is created and given
            back to the Request by using the processResponse method.
            </summary>
      <param name="msg">The message to be sent.</param>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.Stop">
      <summary>
            Closes the service host, stops the timeout checking and disconnects all senders that 
            are currently connected to other spaces.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.ReleaseConnections">
      <summary>
            Release current active connections.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.ConfigLoader">
      <summary>
            Load different WCF-Configurations for the servicehost.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.CreateNewRemoteSender">
      <summary>
            Load different RemoteSender instances
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.Port">
      <summary>
            The port on which the service host is running.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.Hostname">
      <summary>
            The hostname on which the service host is running.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.Running">
      <summary>
            True if the service is running.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Communication.WCF.XcoWCFCommunicationService.ServerAddress">
      <summary>
            The Address of the Server.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Communication.WCF.IRemoteSpaceService">
      <summary>
            Interface definition for the WCF service used to communication with remote spaces.
            All communication is one-way and session oriented.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.IRemoteSpaceService.Connect">
      <summary>
            Initiates a connection to a remote space. This is always the first Method that
            has to be called when wanting to communicate with a remote space.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.IRemoteSpaceService.Disconnect">
      <summary>
            Terminates the connection to a remote space. This is always the last Method that
            has to be called when wanting to communicate with a remote space.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.IRemoteSpaceService.SendMessage(System.Byte[])">
      <summary>
            Sends a message to a remote space (serialized into a byte array).
            </summary>
      <param name="xCoreData">The message to be sent, serialized into a byte array.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Communication.WCF.SpaceServiceChannel">
      <summary>
            Interface definition for the service channel of the space.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Communication.WCF.SpacePortal">
      <summary>
            Implementation for the server side endpoint of the WCF service for communication with remote
            spaces. Named SpacePortal, because it provides a portal to the space for any incoming remote
            communication.
            Definition of the service behavior: Only one instance is running at the server, but can be
            used concurrent.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.SpacePortal.Connect">
      <summary>
            Does nothing, because it is only needed for connection initiation (which is managed
            internally by WCF).
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.SpacePortal.Disconnect">
      <summary>
            Does nothing, because it is only needed for connection termination (which is managed
            internally by WCF).
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Communication.WCF.SpacePortal.SendMessage(System.Byte[])">
      <summary>
            Processes a message that has been received. The message is deserialized and the corresponding
            process method is called.
            </summary>
      <param name="xCoreData">The serialized message that has been received.</param>
    </member>
    <member name="T:XcoSpaces.Kernel.Contracts.Communication.IXcoCommunicationService">
      <summary>
            Interface definition for Services that can be used for Kernel communication.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.Communication.IXcoCommunicationService.Stop">
      <summary>
            Stops the communication service.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.Communication.IXcoCommunicationService.ReleaseConnections">
      <summary>
            Releases all currently active connections.
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.Communication.IXcoCommunicationService.SendMessage(XcoSpaces.Kernel.Contracts.Communication.IMessage)">
      <summary>
            Sends a message to a remote space.
            </summary>
      <param name="msg">The messages that should be sent.</param>
    </member>
    <member name="P:XcoSpaces.Kernel.Contracts.Communication.IXcoCommunicationService.Port">
      <summary>
            The port on which the service is running.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Contracts.Communication.IXcoCommunicationService.Hostname">
      <summary>
            The hostname on which the service is running.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Contracts.Communication.IXcoCommunicationService.Running">
      <summary>
            True if the service is running.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Contracts.Communication.IXcoCommunicationService.ServerAddress">
      <summary>
            The Address of the server.
            </summary>
    </member>
    <member name="T:XcoSpaces.Kernel.Contracts.Communication.ISerializationHelper">
      <summary>
            Interface definition for classes used for serialization and deserialization of 
            objects (used for remote communication and for serialized data storage).
            </summary>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.Communication.ISerializationHelper.Serialize(System.Object)">
      <summary>
            Serializes an object into a byte array.
            </summary>
      <param name="element">The object to be serialized.</param>
      <returns>The serialized object.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.Communication.ISerializationHelper.Serialize(System.Object,System.String)">
      <summary>
            Serializes an object into a byte array. This is for situations where the
            address to which an object to be serialized is sent can be of importance.
            </summary>
      <param name="element">The object to be serialized.</param>
      <param name="destAddress">The address of the space that is the destination the object to be serialized.</param>
      <returns>The serialized object.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.Communication.ISerializationHelper.Deserialize(System.Byte[])">
      <summary>
            Deserializes an object from a byte array.
            </summary>
      <param name="element">The serialized object.</param>
      <returns>The object that has been deserialized.</returns>
    </member>
    <member name="M:XcoSpaces.Kernel.Contracts.Communication.ISerializationHelper.Deserialize(System.IO.Stream)">
      <summary>
            Deserializes an object from a stream.
            </summary>
      <param name="stream">The stream that contains the serialized object.</param>
      <returns>The object that has been deserialized.</returns>
    </member>
    <member name="T:XcoSpaces.Kernel.Contracts.Communication.IMessage">
      <summary>
            Interface definition for a message to be sent by remote communication.
            </summary>
    </member>
    <member name="P:XcoSpaces.Kernel.Contracts.Communication.IMessage.RemoteAddress">
      <summary>
            The address of the remote space where the message should be sent to,
            or the message is received from.
            </summary>
    </member>
    <member name="T:XcoSpaces.Services.IXcoService">
      <summary>
            Interface definition for services that can be added to an XcoSpace.
            </summary>
    </member>
    <member name="T:XcoSpaces.Services.Discovery.P2P.XcoP2PDiscoveryService">
      <summary>
            Peer2Peer discovery service for XcoSpaces. Uses a WCF PeerResolver service
            for XcoSpace instances to find each other.
            </summary>
    </member>
    <member name="M:XcoSpaces.Services.Discovery.P2P.XcoP2PDiscoveryService.Start(XcoSpaces.XcoSpace)">
      <summary>
            Starts the discovery service.
            </summary>
      <param name="localSpace">The owning XcoSpace instance.</param>
    </member>
    <member name="M:XcoSpaces.Services.Discovery.P2P.XcoP2PDiscoveryService.Stop">
      <summary>
            Stops the discovery service.
            </summary>
    </member>
    <member name="M:XcoSpaces.Services.Discovery.P2P.XcoP2PDiscoveryService.Dispose">
      <summary>
            Disposes the discovery service.
            </summary>
    </member>
    <member name="M:XcoSpaces.Services.Discovery.P2P.XcoP2PDiscoveryService.LocateContainer(System.String)">
      <summary>
            Looks up a container with a certain name.
            </summary>
      <param name="qualifiedName">The qualified name of the container to be found.</param>
      <returns>The address of the space where the container is hosted, or null if the container was not fond.</returns>
    </member>
  </members>
</doc>